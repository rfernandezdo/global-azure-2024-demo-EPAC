{
  "exemptions": {
    "numberOfExpired": 0,
    "new": {},
    "replace": {},
    "numberOfChanges": 0,
    "update": {},
    "numberOfOrphans": 0,
    "numberUnchanged": 0,
    "delete": {}
  },
  "assignments": {
    "delete": {},
    "numberOfChanges": 44,
    "replace": {},
    "update": {},
    "numberUnchanged": 0,
    "new": {
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deny-UnmanagedDisk": {
        "name": "Deny-UnmanagedDisk",
        "displayName": "Deny virtual machines and virtual machine scale sets that do not use managed disk",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/06a78e20-9358-41c9-923c-fb736d382a4d",
        "identityRequired": false,
        "description": "Deny virtual machines that do not use managed disk. It checks the managed disk property on virtual machine OS Disk fields.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Virtual machines and virtual machine scales sets must use a managed disk."
          }
        ],
        "overrides": [
          {
            "kind": "policyEffect",
            "value": "Deny"
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deny-UnmanagedDisk",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deny-Classic-Resources": {
        "name": "Deny-Classic-Resources",
        "displayName": "Deny the deployment of classic resources",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "parameters": {
          "listOfResourceTypesNotAllowed": [
            "Microsoft.ClassicCompute/capabilities",
            "Microsoft.ClassicCompute/checkDomainNameAvailability",
            "Microsoft.ClassicCompute/domainNames",
            "Microsoft.ClassicCompute/domainNames/capabilities",
            "Microsoft.ClassicCompute/domainNames/internalLoadBalancers",
            "Microsoft.ClassicCompute/domainNames/serviceCertificates",
            "Microsoft.ClassicCompute/domainNames/slots",
            "Microsoft.ClassicCompute/domainNames/slots/roles",
            "Microsoft.ClassicCompute/domainNames/slots/roles/metricDefinitions",
            "Microsoft.ClassicCompute/domainNames/slots/roles/metrics",
            "Microsoft.ClassicCompute/moveSubscriptionResources",
            "Microsoft.ClassicCompute/operatingSystemFamilies",
            "Microsoft.ClassicCompute/operatingSystems",
            "Microsoft.ClassicCompute/operations",
            "Microsoft.ClassicCompute/operationStatuses",
            "Microsoft.ClassicCompute/quotas",
            "Microsoft.ClassicCompute/resourceTypes",
            "Microsoft.ClassicCompute/validateSubscriptionMoveAvailability",
            "Microsoft.ClassicCompute/virtualMachines",
            "Microsoft.ClassicCompute/virtualMachines/diagnosticSettings",
            "Microsoft.ClassicCompute/virtualMachines/metricDefinitions",
            "Microsoft.ClassicCompute/virtualMachines/metrics",
            "Microsoft.ClassicInfrastructureMigrate/classicInfrastructureResources",
            "Microsoft.ClassicNetwork/capabilities",
            "Microsoft.ClassicNetwork/expressRouteCrossConnections",
            "Microsoft.ClassicNetwork/expressRouteCrossConnections/peerings",
            "Microsoft.ClassicNetwork/gatewaySupportedDevices",
            "Microsoft.ClassicNetwork/networkSecurityGroups",
            "Microsoft.ClassicNetwork/operations",
            "Microsoft.ClassicNetwork/quotas",
            "Microsoft.ClassicNetwork/reservedIps",
            "Microsoft.ClassicNetwork/virtualNetworks",
            "Microsoft.ClassicNetwork/virtualNetworks/remoteVirtualNetworkPeeringProxies",
            "Microsoft.ClassicNetwork/virtualNetworks/virtualNetworkPeerings",
            "Microsoft.ClassicStorage/capabilities",
            "Microsoft.ClassicStorage/checkStorageAccountAvailability",
            "Microsoft.ClassicStorage/disks",
            "Microsoft.ClassicStorage/images",
            "Microsoft.ClassicStorage/operations",
            "Microsoft.ClassicStorage/osImages",
            "Microsoft.ClassicStorage/osPlatformImages",
            "Microsoft.ClassicStorage/publicImages",
            "Microsoft.ClassicStorage/quotas",
            "Microsoft.ClassicStorage/storageAccounts",
            "Microsoft.ClassicStorage/storageAccounts/blobServices",
            "Microsoft.ClassicStorage/storageAccounts/fileServices",
            "Microsoft.ClassicStorage/storageAccounts/metricDefinitions",
            "Microsoft.ClassicStorage/storageAccounts/metrics",
            "Microsoft.ClassicStorage/storageAccounts/queueServices",
            "Microsoft.ClassicStorage/storageAccounts/services",
            "Microsoft.ClassicStorage/storageAccounts/services/diagnosticSettings",
            "Microsoft.ClassicStorage/storageAccounts/services/metricDefinitions",
            "Microsoft.ClassicStorage/storageAccounts/services/metrics",
            "Microsoft.ClassicStorage/storageAccounts/tableServices",
            "Microsoft.ClassicStorage/storageAccounts/vmImages",
            "Microsoft.ClassicStorage/vmImages",
            "Microsoft.ClassicSubscription/operations"
          ]
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749",
        "identityRequired": false,
        "description": "Denies deployment of classic resource types under the assigned scope.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Classic resources must not be deployed."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deny-Classic-Resources",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup": {
        "managedIdentityLocation": "france",
        "name": "Deploy-VM-Backup",
        "displayName": "Configure backup on virtual machines without a given tag to a new recovery services vault with a default policy",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/98d0b9f8-fd90-49c9-88e2-d3baf3b0dd86",
        "identityRequired": true,
        "description": "Enforce backup for all virtual machines by deploying a recovery services vault in the same location and resource group as the virtual machine. Doing this is useful when different application teams in your organization are allocated separate resource groups and need to manage their own backups and restores. You can optionally exclude virtual machines containing a specified tag to control the scope of assignment. See https://aka.ms/AzureVMAppCentricBackupExcludeTag.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Backup on virtual machines without a given tag must be configured to a new recovery services vault with a default policy."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
            "roleDisplayName": "Virtual Machine Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
            "roleDisplayName": "Backup Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-Endpoints": {
        "name": "Deny-Public-Endpoints",
        "displayName": "Public network access should be disabled for PaaS services",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deny-PublicPaaSEndpoints",
        "identityRequired": false,
        "description": "This policy initiative is a group of policies that prevents creation of Azure PaaS services with exposed public endpoints",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Public network access must be disabled for PaaS services."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-Endpoints",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Audit-AppGW-WAF": {
        "name": "Audit-AppGW-WAF",
        "displayName": "Web Application Firewall (WAF) should be enabled for Application Gateway",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/564feb30-bf6a-4854-b4bb-0d2d2d1e6c66",
        "identityRequired": false,
        "description": "Deploy Azure Web Application Firewall (WAF) in front of public facing web applications for additional inspection of incoming traffic. Web Application Firewall (WAF) provides centralized protection of your web applications from common exploits and vulnerabilities such as SQL injections, Cross-Site Scripting, local and remote file executions. You can also restrict access to your web applications by countries, IP address ranges, and other http(s) parameters via custom rules.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Web Application Firewall (WAF) must be enabled for Application Gateway."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Audit-AppGW-WAF",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet": {
        "name": "Deny-MgmtPorts-Internet",
        "displayName": "Management port access from the Internet should be blocked",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet",
        "identityRequired": false,
        "description": "This policy denies any network security rule that allows management port access from the Internet",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Management port access from the Internet must be blocked."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config": {
        "managedIdentityLocation": "france",
        "name": "Deploy-MDFC-Config",
        "displayName": "Deploy Microsoft Defender for Cloud configuration",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "vulnerabilityAssessmentProvider": "mdeTvm",
          "ascExportResourceGroupName": "mdfc-export",
          "logAnalytics": "",
          "ascExportResourceGroupLocation": "",
          "emailSecurityContact": ""
        },
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config",
        "identityRequired": true,
        "description": "Deploy Microsoft Defender for Cloud and Security Contacts",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Microsoft Defender for Cloud and Security Contacts must be deployed."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
            "roleDisplayName": "Azure Kubernetes Service Contributor Role",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
            "roleDisplayName": "Security Admin",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
            "roleDisplayName": "Owner",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/18ed5180-3e48-46fd-8541-4ea054d57064",
            "roleDisplayName": "Azure Kubernetes Service Policy Add-on Deployment",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-Config': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "roleDisplayName": "Log Analytics Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-ASC-Monitoring": {
        "name": "Deploy-ASC-Monitoring",
        "displayName": "Microsoft Cloud Security Benchmark",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8",
        "identityRequired": false,
        "description": "Microsoft Cloud Security Benchmark policy initiative",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Microsoft Cloud Security Benchmark must be met."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-ASC-Monitoring",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-TDE": {
        "managedIdentityLocation": "france",
        "name": "Deploy-SQL-TDE",
        "displayName": "Deploy TDE on SQL servers",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f",
        "identityRequired": true,
        "description": "This policy ensures that Transparent Data Encryption is enabled on SQL Servers.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "TDE must be deployed on SQL servers."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-TDE",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-TDE': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
            "roleDisplayName": "SQL DB Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Audit-PeDnsZones": {
        "name": "Audit-PeDnsZones",
        "displayName": "Audit Private Link Private DNS Zone resources",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "parameters": {
          "privateLinkDnsZones": [
            "privatelink.adf.azure.com",
            "privatelink.afs.azure.net",
            "privatelink.agentsvc.azure-automation.net",
            "privatelink.analysis.windows.net",
            "privatelink.api.azureml.ms",
            "privatelink.azconfig.io",
            "privatelink.azure-api.net",
            "privatelink.azure-automation.net",
            "privatelink.azurecr.io",
            "privatelink.azure-devices.net",
            "privatelink.azure-devices-provisioning.net",
            "privatelink.azurehdinsight.net",
            "privatelink.azurehealthcareapis.com",
            "privatelink.azurestaticapps.net",
            "privatelink.azuresynapse.net",
            "privatelink.azurewebsites.net",
            "privatelink.batch.azure.com",
            "privatelink.blob.core.windows.net",
            "privatelink.cassandra.cosmos.azure.com",
            "privatelink.cognitiveservices.azure.com",
            "privatelink.database.windows.net",
            "privatelink.datafactory.azure.net",
            "privatelink.dev.azuresynapse.net",
            "privatelink.dfs.core.windows.net",
            "privatelink.dicom.azurehealthcareapis.com",
            "privatelink.digitaltwins.azure.net",
            "privatelink.directline.botframework.com",
            "privatelink.documents.azure.com",
            "privatelink.eventgrid.azure.net",
            "privatelink.file.core.windows.net",
            "privatelink.gremlin.cosmos.azure.com",
            "privatelink.guestconfiguration.azure.com",
            "privatelink.his.arc.azure.com",
            "privatelink.kubernetesconfiguration.azure.com",
            "privatelink.managedhsm.azure.net",
            "privatelink.mariadb.database.azure.com",
            "privatelink.media.azure.net",
            "privatelink.mongo.cosmos.azure.com",
            "privatelink.monitor.azure.com",
            "privatelink.mysql.database.azure.com",
            "privatelink.notebooks.azure.net",
            "privatelink.ods.opinsights.azure.com",
            "privatelink.oms.opinsights.azure.com",
            "privatelink.pbidedicated.windows.net",
            "privatelink.postgres.database.azure.com",
            "privatelink.prod.migration.windowsazure.com",
            "privatelink.purview.azure.com",
            "privatelink.purviewstudio.azure.com",
            "privatelink.queue.core.windows.net",
            "privatelink.redis.cache.windows.net",
            "privatelink.redisenterprise.cache.azure.net",
            "privatelink.search.windows.net",
            "privatelink.service.signalr.net",
            "privatelink.servicebus.windows.net",
            "privatelink.siterecovery.windowsazure.com",
            "privatelink.sql.azuresynapse.net",
            "privatelink.table.core.windows.net",
            "privatelink.table.cosmos.azure.com",
            "privatelink.tip1.powerquery.microsoft.com",
            "privatelink.token.botframework.com",
            "privatelink.vaultcore.azure.net",
            "privatelink.web.core.windows.net",
            "privatelink.webpubsub.azure.com"
          ]
        },
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones",
        "identityRequired": false,
        "description": "Audits the deployment of Private Link Private DNS Zone resources in the Corp landing zone.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Private Link Private DNS Zone resources must be deployed in the Corp landing zone."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Audit-PeDnsZones",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-SqlAtp": {
        "managedIdentityLocation": "france",
        "name": "Deploy-MDFC-SqlAtp",
        "displayName": "Configure Azure Defender to be enabled on SQL Servers and SQL Managed Instances",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/9cb3cc7a-b39b-4b82-bc89-e5a5d9ff7b97",
        "identityRequired": true,
        "description": "Enable Azure Defender on your SQL Servers and SQL Managed Instances to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Azure Defender must be enabled on SQL Servers and SQL Managed Instances."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-SqlAtp",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-SqlAtp': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
            "roleDisplayName": "SQL Security Manager",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-Threat": {
        "managedIdentityLocation": "france",
        "name": "Deploy-SQL-Threat",
        "displayName": "Deploy Threat Detection on SQL servers",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/36d49e87-48c4-4f2e-beed-ba4ed02b71f5",
        "identityRequired": true,
        "description": "This policy ensures that Threat Detection is enabled on SQL Servers.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Threat Detection must be deployed on SQL servers."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-Threat",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-SQL-Threat': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
            "roleDisplayName": "SQL Security Manager",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring": {
        "managedIdentityLocation": "france",
        "name": "Deploy-VMSS-Monitoring",
        "displayName": "Enable Azure Monitor for Virtual Machine Scale Sets",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "bringYourOwnUserAssignedManagedIdentity": false,
          "dcrResourceId": ""
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/f5bf694c-cca7-4033-b883-3a23327d5485",
        "identityRequired": true,
        "description": "Enable Azure Monitor for the Virtual Machine Scale Sets in the specified scope (Management group, Subscription or resource group). Takes Log Analytics workspace as parameter. Note: if your scale set upgradePolicy is set to Manual, you need to apply the extension to the all VMs in the set by calling upgrade on them. In CLI this would be az vmss update-instances.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Azure Monitor must be enabled for Virtual Machine Scale Sets."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
            "roleDisplayName": "Virtual Machine Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
            "roleDisplayName": "User Access Administrator",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
            "roleDisplayName": "Monitoring Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VMSS-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "roleDisplayName": "Log Analytics Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring": {
        "managedIdentityLocation": "france",
        "name": "Deploy-VM-Monitoring",
        "displayName": "Enable Azure Monitor for VMs",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "bringYourOwnUserAssignedManagedIdentity": false,
          "dcrResourceId": ""
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/924bfe3a-762f-40e7-86dd-5c8b95eb09e6",
        "identityRequired": true,
        "description": "Enable Azure Monitor for the virtual machines (VMs) in the specified scope (management group, subscription or resource group). Takes Log Analytics workspace as parameter.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Azure Monitor must be enabled for Virtual Machines."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
            "roleDisplayName": "Virtual Machine Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
            "roleDisplayName": "User Access Administrator",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
            "roleDisplayName": "Monitoring Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Monitoring': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "roleDisplayName": "Log Analytics Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Audit-ZoneResiliency": {
        "name": "Audit-ZoneResiliency",
        "displayName": "Resources should be Zone Resilient",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/130fb88f-0fc9-4678-bfe1-31022d71c7d5",
        "identityRequired": false,
        "description": "Resources should be Zone Resilient.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Resources must be Zone Resilient."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Audit-ZoneResiliency",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Storage-http": {
        "name": "Deny-Storage-http",
        "displayName": "Secure transfer to storage accounts should be enabled",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "parameters": {
          "effect": "Deny"
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/404c3081-a854-4457-ae30-26a93ef643f9",
        "identityRequired": false,
        "description": "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Secure transfer to storage accounts must be enabled."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Storage-http",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet": {
        "name": "Deny-MgmtPorts-Internet",
        "displayName": "Management port access from the Internet should be blocked",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet",
        "identityRequired": false,
        "description": "This policy denies any network security rule that allows management port access from the Internet",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Management port access from the Internet must be blocked."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deny-MgmtPorts-Internet",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-identity",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault": {
        "name": "Enforce-GR-KeyVault",
        "displayName": "Enforce recommended guardrails for Azure Key Vault",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault",
        "identityRequired": false,
        "description": "This initiative assignment enables recommended ALZ guardrails for Azure Key Vault.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Recommended guardrails must be enforced for Azure Key Vault."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL": {
        "managedIdentityLocation": "france",
        "name": "Enforce-TLS-SSL",
        "displayName": "Deny or Deploy and append TLS requirements and SSL enforcement on resources without Encryption in transit",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit",
        "identityRequired": true,
        "description": "Choose either Deploy if not exist and append in combination with audit or Select Deny in the Policy effect. Deny polices shift left. Deploy if not exist and append enforce but can be changed, and because missing exsistense condition require then the combination of Audit.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "TLS and SSL must be enabled for on resources without encryption in transit."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
            "roleDisplayName": "Storage Account Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
            "roleDisplayName": "SQL Server Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-TLS-SSL': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
            "roleDisplayName": "SQL Managed Instance Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Privileged-AKS": {
        "name": "Deny-Privileged-AKS",
        "displayName": "Kubernetes cluster should not allow privileged containers",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/95edb821-ddaf-4404-9732-666045e056b4",
        "identityRequired": false,
        "description": "Do not allow privileged containers creation in a Kubernetes cluster. This recommendation is part of CIS 5.2.1 which is intended to improve the security of your Kubernetes environments. This policy is generally available for Kubernetes Service (AKS), and preview for AKS Engine and Azure Arc enabled Kubernetes. For more information, see https://aka.ms/kubepolicydoc.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Privileged-AKS",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-connectivity/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET": {
        "managedIdentityLocation": "france",
        "name": "Enable-DDoS-VNET",
        "displayName": "Virtual networks should be protected by Azure DDoS Network Protection",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "ddosPlan": "null"
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d",
        "identityRequired": true,
        "description": "Protect your virtual networks against volumetric and protocol attacks with Azure DDoS Network Protection. For more information, visit https://aka.ms/ddosprotectiondocs.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Virtual networks must be protected by Azure DDoS Network Protection."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-connectivity/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-connectivity",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-connectivity/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
            "roleDisplayName": "Network Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-connectivity",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP": {
        "name": "Deny-Public-IP",
        "displayName": "Deny the creation of public IP",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "parameters": {
          "listOfResourceTypesNotAllowed": [
            "Microsoft.Network/publicIPAddresses"
          ]
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749",
        "identityRequired": false,
        "description": "This policy denies creation of Public IPs under the assigned scope.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Public IPs must not be created under this scope."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-identity",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Enforce-ACSB": {
        "managedIdentityLocation": "france",
        "name": "Enforce-ACSB",
        "displayName": "Enforce Azure Compute Security Baseline compliance auditing",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB",
        "identityRequired": true,
        "description": "This initiative assignment enables Azure Compute Security Baseline compliance auditing for Windows and Linux virtual machines.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Azure Compute Security Baseline compliance auditing must be enforced."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Enforce-ACSB",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Enforce-ACSB': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-IP-forwarding": {
        "name": "Deny-IP-forwarding",
        "displayName": "Network interfaces should disable IP forwarding",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/88c0b9da-ce96-4b03-9635-f29a937e2900",
        "identityRequired": false,
        "description": "This policy denies the network interfaces which enabled IP forwarding. The setting of IP forwarding disables Azure's check of the source and destination for a network interface. This should be reviewed by the network security team.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Network interfaces must disable IP forwarding."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-IP-forwarding",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log": {
        "managedIdentityLocation": "france",
        "name": "Deploy-AzActivity-Log",
        "displayName": "Configure Azure Activity logs to stream to specified Log Analytics workspace",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "logAnalytics": ""
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2465583e-4e78-4c15-b6be-a36cbc7c8b0f",
        "identityRequired": true,
        "description": "Deploys the diagnostic settings for Azure Activity to stream subscriptions audit logs to a Log Analytics workspace to monitor subscription-level events",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Azure Activity logs must be configured to stream to specified Log Analytics workspace."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
            "roleDisplayName": "Monitoring Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-AzActivity-Log': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "roleDisplayName": "Log Analytics Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-platform/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault-PLT": {
        "name": "Enforce-GR-KeyVault-PLT",
        "displayName": "Enforce recommended guardrails for Azure Key Vault",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault",
        "identityRequired": false,
        "description": "This initiative assignment enables recommended ALZ guardrails for Azure Key Vault.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Recommended guardrails must be enforced for Azure Key Vault."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-platform/providers/Microsoft.Authorization/policyAssignments/Enforce-GR-KeyVault-PLT",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-platform",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deny-HybridNetworking": {
        "name": "Deny-HybridNetworking",
        "displayName": "Deny the deployment of vWAN/ER/VPN gateway resources",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "parameters": {
          "listOfResourceTypesNotAllowed": [
            "microsoft.network/expressroutecircuits",
            "microsoft.network/expressroutegateways",
            "microsoft.network/expressrouteports",
            "microsoft.network/virtualwans",
            "microsoft.network/vpngateways",
            "microsoft.network/p2svpngateways",
            "microsoft.network/vpnsites",
            "microsoft.network/virtualnetworkgateways"
          ]
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749",
        "identityRequired": false,
        "description": "Denies deployment of vWAN/ER/VPN gateway resources in the Corp landing zone.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "vWAN/ER/VPN gateway resources must not be deployed in the Corp landing zone."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deny-HybridNetworking",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-AKS-HTTPS": {
        "name": "Enforce-AKS-HTTPS",
        "displayName": "Kubernetes clusters should be accessible only over HTTPS",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d",
        "identityRequired": false,
        "description": "Use of HTTPS ensures authentication and protects data in transit from network layer eavesdropping attacks. This capability is currently generally available for Kubernetes Service (AKS), and in preview for AKS Engine and Azure Arc enabled Kubernetes. For more info, visit https://aka.ms/kubepolicydoc",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enforce-AKS-HTTPS",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones": {
        "managedIdentityLocation": "france",
        "name": "Deploy-Private-DNS-Zones",
        "displayName": "Configure Azure PaaS services to use private DNS zones",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "azureMonitorPrivateDnsZoneId5": "--DNSZonePrefix--privatelink.blob.core.windows.net",
          "azureStorageFilePrivateDnsZoneId": "--DNSZonePrefix--privatelink.file.core.windows.net",
          "azureBatchPrivateDnsZoneId": "--DNSZonePrefix--privatelink.batch.azure.com",
          "azureSynapseDevPrivateDnsZoneId": "--DNSZonePrefix--privatelink.dev.azuresynapse.net",
          "azureEventGridDomainsPrivateDnsZoneId": "--DNSZonePrefix--privatelink.eventgrid.azure.net",
          "azureMonitorPrivateDnsZoneId4": "--DNSZonePrefix--privatelink.agentsvc.azure-automation.net",
          "azureStorageDFSPrivateDnsZoneId": "--DNSZonePrefix--privatelink.dfs.core.windows.net",
          "azureFilePrivateDnsZoneId": "--DNSZonePrefix--privatelink.afs.azure.net",
          "azureCosmosMongoPrivateDnsZoneId": "--DNSZonePrefix--privatelink.mongo.cosmos.azure.com",
          "azureEventHubNamespacePrivateDnsZoneId": "--DNSZonePrefix--privatelink.servicebus.windows.net",
          "azureRedisCachePrivateDnsZoneId": "--DNSZonePrefix--privatelink.redis.cache.windows.net",
          "azureSignalRPrivateDnsZoneId": "--DNSZonePrefix--privatelink.service.signalr.net",
          "azureCosmosTablePrivateDnsZoneId": "--DNSZonePrefix--privatelink.table.cosmos.azure.com",
          "azureCognitiveServicesPrivateDnsZoneId": "--DNSZonePrefix--privatelink.cognitiveservices.azure.com",
          "azureMonitorPrivateDnsZoneId3": "--DNSZonePrefix--privatelink.ods.opinsights.azure.com",
          "azureMigratePrivateDnsZoneId": "--DNSZonePrefix--privatelink.prod.migration.windowsazure.com",
          "azureStorageBlobPrivateDnsZoneId": "--DNSZonePrefix--privatelink.blob.core.windows.net",
          "azureSynapseSQLODPrivateDnsZoneId": "--DNSZonePrefix--privatelink.sql.azuresynapse.net",
          "azureDatabricksPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azuredatabricks.net",
          "azureIotHubsPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azure-devices.net",
          "azureMonitorPrivateDnsZoneId1": "--DNSZonePrefix--privatelink.monitor.azure.com",
          "azureServiceBusNamespacePrivateDnsZoneId": "--DNSZonePrefix--privatelink.servicebus.windows.net",
          "azureStorageStaticWebPrivateDnsZoneId": "--DNSZonePrefix--privatelink.web.core.windows.net",
          "azureMediaServicesKeyPrivateDnsZoneId": "--DNSZonePrefix--privatelink.media.azure.net",
          "azureMachineLearningWorkspacePrivateDnsZoneId": "--DNSZonePrefix--privatelink.api.azureml.ms",
          "azureWebPrivateDnsZoneId": "--DNSZonePrefix--privatelink.webpubsub.azure.com",
          "azureStorageQueuePrivateDnsZoneId": "--DNSZonePrefix--privatelink.queue.core.windows.net",
          "azureCosmosCassandraPrivateDnsZoneId": "--DNSZonePrefix--privatelink.cassandra.cosmos.azure.com",
          "azureMonitorPrivateDnsZoneId2": "--DNSZonePrefix--privatelink.oms.opinsights.azure.com",
          "azureAutomationDSCHybridPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azure-automation.net",
          "azureStorageDFSSecPrivateDnsZoneId": "--DNSZonePrefix--privatelink.dfs.core.windows.net",
          "azureSynapseSQLPrivateDnsZoneId": "--DNSZonePrefix--privatelink.sql.azuresynapse.net",
          "azureAppServicesPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azurewebsites.net",
          "azureStorageStaticWebSecPrivateDnsZoneId": "--DNSZonePrefix--privatelink.web.core.windows.net",
          "azureAppPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azconfig.io",
          "azureStorageBlobSecPrivateDnsZoneId": "--DNSZonePrefix--privatelink.blob.core.windows.net",
          "azureStorageQueueSecPrivateDnsZoneId": "--DNSZonePrefix--privatelink.queue.core.windows.net",
          "azureDiskAccessPrivateDnsZoneId": "--DNSZonePrefix--privatelink.blob.core.windows.net",
          "azureEventGridTopicsPrivateDnsZoneId": "--DNSZonePrefix--privatelink.eventgrid.azure.net",
          "azureDataFactoryPortalPrivateDnsZoneId": "--DNSZonePrefix--privatelink.adf.azure.com",
          "azureIotPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azure-devices-provisioning.net",
          "azureHDInsightPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azurehdinsight.net",
          "azureAutomationWebhookPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azure-automation.net",
          "azureMediaServicesStreamPrivateDnsZoneId": "--DNSZonePrefix--privatelink.media.azure.net",
          "azureCosmosGremlinPrivateDnsZoneId": "--DNSZonePrefix--privatelink.gremlin.cosmos.azure.com",
          "azureKeyVaultPrivateDnsZoneId": "--DNSZonePrefix--privatelink.vaultcore.azure.net",
          "azureMediaServicesLivePrivateDnsZoneId": "--DNSZonePrefix--privatelink.media.azure.net",
          "azureCosmosSQLPrivateDnsZoneId": "--DNSZonePrefix--privatelink.documents.azure.com",
          "azureAcrPrivateDnsZoneId": "--DNSZonePrefix--privatelink.azurecr.io",
          "azureDataFactoryPrivateDnsZoneId": "--DNSZonePrefix--privatelink.datafactory.azure.net",
          "azureAsrPrivateDnsZoneId": "--DNSZonePrefix--privatelink.siterecovery.windowsazure.com",
          "azureCognitiveSearchPrivateDnsZoneId": "--DNSZonePrefix--privatelink.search.windows.net"
        },
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Private-DNS-Zones",
        "identityRequired": true,
        "description": "This policy initiative is a group of policies that ensures private endpoints to Azure PaaS services are integrated with Azure Private DNS zones.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Azure PaaS services must use private DNS zones."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
            "roleDisplayName": "Network Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
            "roleDisplayName": "Private DNS Zone Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deploy-Private-DNS-Zones': additional Role Assignment deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
            "roleDisplayName": "Network Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Audit-UnusedResources": {
        "name": "Audit-UnusedResources",
        "displayName": "Unused resources driving cost should be avoided",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization",
        "identityRequired": false,
        "description": "This Policy initiative is a group of Policy definitions that help optimize cost by detecting unused but chargeable resources. Leverage this Policy initiative as a cost control to reveal orphaned resources that are driving cost.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Unused resources driving cost must be avoided."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Audit-UnusedResources",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-sandbox/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Sandbox": {
        "name": "Enforce-ALZ-Sandbox",
        "displayName": "Enforce ALZ Sandbox Guardrails",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "parameters": {
          "listOfResourceTypesNotAllowed": [
            "microsoft.network/expressroutecircuits",
            "microsoft.network/expressroutegateways",
            "microsoft.network/expressrouteports",
            "microsoft.network/virtualwans",
            "microsoft.network/virtualhubs",
            "microsoft.network/vpngateways",
            "microsoft.network/p2svpngateways",
            "microsoft.network/vpnsites",
            "microsoft.network/virtualnetworkgateways"
          ]
        },
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Sandbox",
        "identityRequired": false,
        "description": "This initiative will help enforce and govern subscriptions that are placed within the Sandbox Management Group. See https://aka.ms/alz/policies for more information.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "ALZ Sandbox Guardrails must be enforced."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-sandbox/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Sandbox",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-sandbox",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-OssDb": {
        "managedIdentityLocation": "france",
        "name": "Deploy-MDFC-OssDb",
        "displayName": "Configure Advanced Threat Protection to be enabled on open-source relational databases",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/e77fc0b3-f7e9-4c58-bc13-cb753ed8e46e",
        "identityRequired": true,
        "description": "Enable Advanced Threat Protection on your non-Basic tier open-source relational databases to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases. See https://aka.ms/AzDforOpenSourceDBsDocu.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Advanced Threat Protection must be enabled on open-source relational databases."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-OssDb",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDFC-OssDb': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg": {
        "name": "Deny-Subnet-Without-Nsg",
        "displayName": "Subnets should have a Network Security Group",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg",
        "identityRequired": false,
        "description": "This policy denies the creation of a subnet without a Network Security Group to protect traffic across subnets.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Subnets must have a Network Security Group."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-identity",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Priv-Esc-AKS": {
        "name": "Deny-Priv-Esc-AKS",
        "displayName": "Kubernetes clusters should not allow container privilege escalation",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "parameters": {
          "effect": "Deny"
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1c6e92c9-99f0-4e55-9cf2-0c234dc48f99",
        "identityRequired": false,
        "description": "Do not allow containers to run with privilege escalation to root in a Kubernetes cluster. This recommendation is part of CIS 5.2.5 which is intended to improve the security of your Kubernetes environments. This policy is generally available for Kubernetes Service (AKS), and preview for AKS Engine and Azure Arc enabled Kubernetes. For more information, see https://aka.ms/kubepolicydoc.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Priv-Esc-AKS",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing": {
        "managedIdentityLocation": "france",
        "name": "Deploy-AzSqlDb-Auditing",
        "displayName": "Configure SQL servers to have auditing enabled to Log Analytics workspace",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "logAnalyticsWorkspaceId": ""
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/25da7dfb-0666-4a15-a8f5-402127efd8bb",
        "identityRequired": true,
        "description": "To ensure the operations performed against your SQL assets are captured, SQL servers should have auditing enabled. If auditing is not enabled, this policy will configure auditing events to flow to the specified Log Analytics workspace.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "SQL servers must have auditing enabled to Log Analytics workspace."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "roleDisplayName": "Log Analytics Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AzSqlDb-Auditing': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
            "roleDisplayName": "SQL Security Manager",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup": {
        "managedIdentityLocation": "france",
        "name": "Deploy-VM-Backup",
        "displayName": "Configure backup on virtual machines without a given tag to a new recovery services vault with a default policy",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/98d0b9f8-fd90-49c9-88e2-d3baf3b0dd86",
        "identityRequired": true,
        "description": "Enforce backup for all virtual machines by deploying a recovery services vault in the same location and resource group as the virtual machine. Doing this is useful when different application teams in your organization are allocated separate resource groups and need to manage their own backups and restores. You can optionally exclude virtual machines containing a specified tag to control the scope of assignment. See https://aka.ms/AzureVMAppCentricBackupExcludeTag.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Backup on virtual machines without a given tag must be configured to a new recovery services vault with a default policy."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-identity",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
            "roleDisplayName": "Virtual Machine Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-identity",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-identity/providers/Microsoft.Authorization/policyAssignments/Deploy-VM-Backup': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
            "roleDisplayName": "Backup Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-identity",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-decommissioned/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Decomm": {
        "managedIdentityLocation": "france",
        "name": "Enforce-ALZ-Decomm",
        "displayName": "Enforce ALZ Decommissioned Guardrails",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "listOfResourceTypesAllowed": [
            "microsoft.consumption/tags",
            "microsoft.authorization/roleassignments",
            "microsoft.authorization/roledefinitions",
            "microsoft.authorization/policyassignments",
            "microsoft.authorization/locks",
            "microsoft.authorization/policydefinitions",
            "microsoft.authorization/policysetdefinitions",
            "microsoft.resources/tags",
            "microsoft.authorization/roleeligibilityschedules",
            "microsoft.authorization/roleeligibilityscheduleinstances",
            "microsoft.authorization/roleassignmentschedules",
            "microsoft.authorization/roleassignmentscheduleinstances"
          ]
        },
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Decomm",
        "identityRequired": true,
        "description": "This initiative will help enforce and govern subscriptions that are placed within the decommissioned Management Group as part of your Subscription decommissioning process. See https://aka.ms/alz/policies for more information.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "ALZ Decommissioned Guardrails must be enforced."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-decommissioned/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Decomm",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-decommissioned",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-decommissioned/providers/Microsoft.Authorization/policyAssignments/Enforce-ALZ-Decomm': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
            "roleDisplayName": "Virtual Machine Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-decommissioned",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy": {
        "managedIdentityLocation": "france",
        "name": "Deploy-AKS-Policy",
        "displayName": "Deploy Azure Policy Add-on to Azure Kubernetes Service clusters",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7",
        "identityRequired": true,
        "description": "Use Azure Policy Add-on to manage and report on the compliance state of your Azure Kubernetes Service (AKS) clusters. For more information, see https://aka.ms/akspolicydoc.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
            "roleDisplayName": "Azure Kubernetes Service Contributor Role",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deploy-AKS-Policy': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/18ed5180-3e48-46fd-8541-4ea054d57064",
            "roleDisplayName": "Azure Kubernetes Service Policy Add-on Deployment",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET": {
        "managedIdentityLocation": "france",
        "name": "Enable-DDoS-VNET",
        "displayName": "Virtual networks should be protected by Azure DDoS Network Protection",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "ddosPlan": "null"
        },
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d",
        "identityRequired": true,
        "description": "Protect your virtual networks against volumetric and protocol attacks with Azure DDoS Network Protection. For more information, visit https://aka.ms/ddosprotectiondocs.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Virtual networks must be protected by Azure DDoS Network Protection."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Enable-DDoS-VNET': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
            "roleDisplayName": "Network Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpoints": {
        "managedIdentityLocation": "france",
        "name": "Deploy-MDEndpoints",
        "displayName": "[Preview]: Deploy Microsoft Defender for Endpoint agent",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/e20d08c5-6d64-656d-6465-ce9e37fd0ebc",
        "identityRequired": true,
        "description": "Deploy Microsoft Defender for Endpoint agent on applicable images.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Microsoft Defender for Endpoint agent must be deployed on applicable images."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpoints",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-MDEndpoints': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleDisplayName": "Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg": {
        "name": "Deny-Subnet-Without-Nsg",
        "displayName": "Subnets should have a Network Security Group",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg",
        "identityRequired": false,
        "description": "This policy denies the creation of a subnet without a Network Security Group to protect traffic across subnets.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Subnets must have a Network Security Group."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-landingzones/providers/Microsoft.Authorization/policyAssignments/Deny-Subnet-Without-Nsg",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-landingzones",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP-On-NIC": {
        "name": "Deny-Public-IP-On-NIC",
        "displayName": "Deny network interfaces having a public IP associated",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/83a86a26-fd1f-447c-b59d-e51f44264114",
        "identityRequired": false,
        "description": "This policy denies network interfaces from having a public IP associated to it under the assigned scope.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Network interfaces must not have a public IP associated."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/dev-corp/providers/Microsoft.Authorization/policyAssignments/Deny-Public-IP-On-NIC",
        "scope": "/providers/Microsoft.Management/managementGroups/dev-corp",
        "notScopes": []
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-Resource-Diag": {
        "managedIdentityLocation": "france",
        "name": "Deploy-Resource-Diag",
        "displayName": "Deploy-Resource-Diag",
        "identity": {
          "type": "SystemAssigned"
        },
        "enforcementMode": "Default",
        "parameters": {
          "logAnalytics": ""
        },
        "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Diagnostics-LogAnalytics",
        "identityRequired": true,
        "description": "Ensures that Azure resources are configured to forward diagnostic logs and metrics to an Azure Log Analytics workspace.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Diagnostic settings must be deployed to Azure services."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-Resource-Diag",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": [],
        "requiredRoleAssignments": [
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-Resource-Diag': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
            "roleDisplayName": "Monitoring Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          },
          {
            "description": "Policy Assignment '/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Deploy-Resource-Diag': Role Assignment required by Policy, deployed by: 'epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev'",
            "roleDefinitionId": "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "roleDisplayName": "Log Analytics Contributor",
            "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
            "crossTenant": false
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Audit-ResourceRGLocation": {
        "name": "Audit-ResourceRGLocation",
        "displayName": "Resource Group and Resource locations should match",
        "identity": {
          "type": "None"
        },
        "enforcementMode": "Default",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0a914e76-4921-4c19-b460-a2d36003525a",
        "identityRequired": false,
        "description": "Resource Group and Resource locations should match.",
        "metadata": {
          "assignedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev",
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6"
        },
        "nonComplianceMessages": [
          {
            "message": "Resources must be deployed in the same region as the Resource Group."
          }
        ],
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyAssignments/Audit-ResourceRGLocation",
        "scope": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "notScopes": []
      }
    }
  },
  "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
  "policyDefinitions": {
    "delete": {},
    "numberOfChanges": 132,
    "replace": {},
    "update": {},
    "numberUnchanged": 0,
    "new": {
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureAuth": {
        "metadata": {
          "version": "1.0.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the use of insecure authentication methods (NTLMv2) when using File Services on a storage account.",
        "name": "Deny-FileServices-InsecureAuth",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureAuth",
        "displayName": "File Services with insecure authentication methods should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          },
          "notAllowedAuthMethods": {
            "type": "String",
            "defaultValue": "NTLMv2",
            "allowedValues": [
              "NTLMv2",
              "Kerberos"
            ],
            "metadata": {
              "displayName": "Authentication methods supported by server. Valid values are NTLMv2, Kerberos.",
              "description": "The list of channelEncryption not allowed."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.authenticationMethods",
                "contains": "[parameters('notAllowedAuthMethods')]"
              },
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts/fileServices"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicNetworkAccess": {
        "metadata": {
          "version": "1.0.0-deprecated",
          "category": "Machine Learning",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "deprecated": true,
          "supersededBy": "438c38d2-3772-465a-a9cc-7a6666a275ce",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Denies public network access for Azure Machine Learning workspaces. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/438c38d2-3772-465a-a9cc-7a6666a275ce.html",
        "name": "Deny-MachineLearning-PublicNetworkAccess",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicNetworkAccess",
        "displayName": "[Deprecated] Azure Machine Learning should have disabled public network access",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces"
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/publicNetworkAccess",
                "notEquals": "Disabled"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-FrontDoor": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Front Door to stream to a Log Analytics workspace when any Front Door which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-FrontDoor",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-FrontDoor",
        "displayName": "Deploy Diagnostic Settings for Front Door to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/frontDoors"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/frontDoors/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "FrontdoorAccessLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "FrontdoorWebApplicationFirewallLog",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbVersions": {
        "metadata": {
          "version": "1.0.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the use of insecure versions of SMB (2.1 & 3.0) when using File Services on a storage account.",
        "name": "Deny-FileServices-InsecureSmbVersions",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbVersions",
        "displayName": "File Services with insecure SMB versions should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          },
          "allowedSmbVersion": {
            "type": "String",
            "defaultValue": "SMB3.1.1",
            "allowedValues": [
              "SMB2.1",
              "SMB3.0",
              "SMB3.1.1"
            ],
            "metadata": {
              "displayName": "Allowed SMB Version",
              "description": "The allowed SMB version for maximum security"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts/fileServices"
              },
              {
                "not": {
                  "field": "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.versions",
                  "contains": "[parameters('allowedSmbVersion')]"
                }
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-VNET-HubSpoke": {
        "metadata": {
          "version": "1.1.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy deploys virtual network and peer to the hub",
        "name": "Deploy-VNET-HubSpoke",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-VNET-HubSpoke",
        "displayName": "Deploy Virtual Network with peering to the hub",
        "parameters": {
          "vNetName": {
            "type": "String",
            "metadata": {
              "displayName": "vNetName",
              "description": "Name of the landing zone vNet"
            }
          },
          "vNetRgName": {
            "type": "String",
            "metadata": {
              "displayName": "vNetRgName",
              "description": "Name of the landing zone vNet RG"
            }
          },
          "vNetLocation": {
            "type": "String",
            "metadata": {
              "displayName": "vNetLocation",
              "description": "Location for the vNet"
            }
          },
          "vNetCidrRange": {
            "type": "String",
            "metadata": {
              "displayName": "vNetCidrRange",
              "description": "CIDR Range for the vNet"
            }
          },
          "hubResourceId": {
            "type": "String",
            "metadata": {
              "displayName": "hubResourceId",
              "description": "Resource ID for the HUB vNet"
            }
          },
          "dnsServers": {
            "type": "Array",
            "metadata": {
              "displayName": "DNSServers",
              "description": "Default domain servers for the vNET."
            },
            "defaultValue": []
          },
          "vNetPeerUseRemoteGateway": {
            "type": "Boolean",
            "metadata": {
              "displayName": "vNetPeerUseRemoteGateway",
              "description": "Enable gateway transit for the LZ network"
            },
            "defaultValue": false
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Resources/subscriptions"
              }
            ]
          },
          "then": {
            "effect": "deployIfNotExists",
            "details": {
              "type": "Microsoft.Network/virtualNetworks",
              "name": "[parameters('vNetName')]",
              "deploymentScope": "subscription",
              "existenceScope": "resourceGroup",
              "ResourceGroupName": "[parameters('vNetRgName')]",
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "name",
                    "like": "[parameters('vNetName')]"
                  },
                  {
                    "field": "location",
                    "equals": "[parameters('vNetLocation')]"
                  }
                ]
              },
              "deployment": {
                "location": "northeurope",
                "properties": {
                  "mode": "Incremental",
                  "parameters": {
                    "vNetRgName": {
                      "value": "[parameters('vNetRgName')]"
                    },
                    "vNetName": {
                      "value": "[parameters('vNetName')]"
                    },
                    "vNetLocation": {
                      "value": "[parameters('vNetLocation')]"
                    },
                    "vNetCidrRange": {
                      "value": "[parameters('vNetCidrRange')]"
                    },
                    "hubResourceId": {
                      "value": "[parameters('hubResourceId')]"
                    },
                    "dnsServers": {
                      "value": "[parameters('dnsServers')]"
                    },
                    "vNetPeerUseRemoteGateway": {
                      "value": "[parameters('vNetPeerUseRemoteGateway')]"
                    }
                  },
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "vNetRgName": {
                        "type": "String"
                      },
                      "vNetName": {
                        "type": "String"
                      },
                      "vNetLocation": {
                        "type": "String"
                      },
                      "vNetCidrRange": {
                        "type": "String"
                      },
                      "vNetPeerUseRemoteGateway": {
                        "type": "bool",
                        "defaultValue": false
                      },
                      "hubResourceId": {
                        "type": "String"
                      },
                      "dnsServers": {
                        "type": "Array",
                        "defaultValue": []
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2021-04-01",
                        "name": "[concat('alz-vnet-rg-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]",
                        "location": "[parameters('vNetLocation')]",
                        "dependsOn": [],
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {},
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.Resources/resourceGroups",
                                "apiVersion": "2021-04-01",
                                "name": "[parameters('vNetRgName')]",
                                "location": "[parameters('vNetLocation')]",
                                "properties": {}
                              }
                            ],
                            "outputs": {}
                          }
                        }
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2021-04-01",
                        "name": "[concat('alz-vnet-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]",
                        "dependsOn": [
                          "[concat('alz-vnet-rg-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {},
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.Network/virtualNetworks",
                                "apiVersion": "2021-02-01",
                                "name": "[parameters('vNetName')]",
                                "location": "[parameters('vNetLocation')]",
                                "dependsOn": [],
                                "properties": {
                                  "addressSpace": {
                                    "addressPrefixes": [
                                      "[parameters('vNetCidrRange')]"
                                    ]
                                  },
                                  "dhcpOptions": {
                                    "dnsServers": "[parameters('dnsServers')]"
                                  }
                                }
                              },
                              {
                                "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                "apiVersion": "2021-02-01",
                                "name": "[concat(parameters('vNetName'), '/peerToHub')]",
                                "dependsOn": [
                                  "[parameters('vNetName')]"
                                ],
                                "properties": {
                                  "remoteVirtualNetwork": {
                                    "id": "[parameters('hubResourceId')]"
                                  },
                                  "allowVirtualNetworkAccess": true,
                                  "allowForwardedTraffic": true,
                                  "allowGatewayTransit": false,
                                  "useRemoteGateways": "[parameters('vNetPeerUseRemoteGateway')]"
                                }
                              },
                              {
                                "type": "Microsoft.Resources/deployments",
                                "apiVersion": "2021-04-01",
                                "name": "[concat('alz-hub-peering-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]",
                                "subscriptionId": "[split(parameters('hubResourceId'),'/')[2]]",
                                "resourceGroup": "[split(parameters('hubResourceId'),'/')[4]]",
                                "dependsOn": [
                                  "[parameters('vNetName')]"
                                ],
                                "properties": {
                                  "mode": "Incremental",
                                  "expressionEvaluationOptions": {
                                    "scope": "inner"
                                  },
                                  "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                      "remoteVirtualNetwork": {
                                        "type": "String",
                                        "defaultValue": false
                                      },
                                      "hubName": {
                                        "type": "String",
                                        "defaultValue": false
                                      }
                                    },
                                    "variables": {},
                                    "resources": [
                                      {
                                        "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                        "name": "[[concat(parameters('hubName'),'/',last(split(parameters('remoteVirtualNetwork'),'/')))]",
                                        "apiVersion": "2021-02-01",
                                        "properties": {
                                          "allowVirtualNetworkAccess": true,
                                          "allowForwardedTraffic": true,
                                          "allowGatewayTransit": true,
                                          "useRemoteGateways": false,
                                          "remoteVirtualNetwork": {
                                            "id": "[[parameters('remoteVirtualNetwork')]"
                                          }
                                        }
                                      }
                                    ],
                                    "outputs": {}
                                  },
                                  "parameters": {
                                    "remoteVirtualNetwork": {
                                      "value": "[concat(subscription().id,'/resourceGroups/',parameters('vNetRgName'), '/providers/','Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
                                    },
                                    "hubName": {
                                      "value": "[split(parameters('hubResourceId'),'/')[8]]"
                                    }
                                  }
                                }
                              }
                            ],
                            "outputs": {}
                          }
                        },
                        "resourceGroup": "[parameters('vNetRgName')]"
                      }
                    ],
                    "outputs": {}
                  }
                }
              }
            }
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AnalysisService": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Analysis Services to stream to a Log Analytics workspace when any Analysis Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-AnalysisService",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AnalysisService",
        "displayName": "Deploy Diagnostic Settings for Analysis Services to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.AnalysisServices/servers"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.AnalysisServices/servers/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "Engine",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Service",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-SecurityContacts": {
        "metadata": {
          "version": "1.1.0",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy Microsoft Defender for Cloud Security Contacts",
        "name": "Deploy-ASC-SecurityContacts",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-SecurityContacts",
        "displayName": "Deploy Microsoft Defender for Cloud Security Contacts",
        "parameters": {
          "emailSecurityContact": {
            "type": "string",
            "metadata": {
              "displayName": "Security contacts email address",
              "description": "Provide email address for Azure Security Center contact details"
            }
          },
          "effect": {
            "type": "string",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "minimalSeverity": {
            "type": "string",
            "defaultValue": "High",
            "allowedValues": [
              "High",
              "Medium",
              "Low"
            ],
            "metadata": {
              "displayName": "Minimal severity",
              "description": "Defines the minimal alert severity which will be sent as email notifications"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Resources/subscriptions"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Security/securityContacts",
              "deploymentScope": "subscription",
              "existenceScope": "subscription",
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd"
              ],
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Security/securityContacts/email",
                    "contains": "[parameters('emailSecurityContact')]"
                  },
                  {
                    "field": "Microsoft.Security/securityContacts/alertNotifications.minimalSeverity",
                    "contains": "[parameters('minimalSeverity')]"
                  },
                  {
                    "field": "type",
                    "equals": "Microsoft.Security/securityContacts"
                  },
                  {
                    "field": "Microsoft.Security/securityContacts/alertNotifications",
                    "equals": "On"
                  },
                  {
                    "field": "Microsoft.Security/securityContacts/alertsToAdmins",
                    "equals": "On"
                  }
                ]
              },
              "deployment": {
                "location": "northeurope",
                "properties": {
                  "mode": "incremental",
                  "parameters": {
                    "emailSecurityContact": {
                      "value": "[parameters('emailSecurityContact')]"
                    },
                    "minimalSeverity": {
                      "value": "[parameters('minimalSeverity')]"
                    }
                  },
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "emailSecurityContact": {
                        "type": "string",
                        "metadata": {
                          "description": "Security contacts email address"
                        }
                      },
                      "minimalSeverity": {
                        "type": "string",
                        "metadata": {
                          "description": "Minimal severity level reported"
                        }
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Security/securityContacts",
                        "name": "default",
                        "apiVersion": "2020-01-01-preview",
                        "properties": {
                          "emails": "[parameters('emailSecurityContact')]",
                          "notificationsByRole": {
                            "state": "On",
                            "roles": [
                              "Owner"
                            ]
                          },
                          "alertNotifications": {
                            "state": "On",
                            "minimalSeverity": "[parameters('minimalSeverity')]"
                          }
                        }
                      }
                    ],
                    "outputs": {}
                  }
                }
              }
            }
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MlWorkspace": {
        "metadata": {
          "version": "1.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Machine Learning workspace to stream to a Log Analytics workspace when any Machine Learning workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-MlWorkspace",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MlWorkspace",
        "displayName": "Deploy Diagnostic Settings for Machine Learning workspace to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.MachineLearningServices/workspaces"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.MachineLearningServices/workspaces/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "enabled": false,
                                "days": 0
                              }
                            }
                          ],
                          "logs": [
                            {
                              "category": "AmlComputeClusterEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AmlComputeClusterNodeEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AmlComputeJobEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AmlComputeCpuGpuUtilization",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AmlRunStatusChangedEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ModelsChangeEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ModelsReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ModelsActionEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DeploymentReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DeploymentEventACI",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DeploymentEventAKS",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "InferencingOperationAKS",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "InferencingOperationACI",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DataLabelChangeEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DataLabelReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ComputeInstanceEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DataStoreChangeEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DataStoreReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DataSetChangeEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DataSetReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "PipelineChangeEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "PipelineReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "RunEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "RunReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "EnvironmentChangeEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "EnvironmentReadEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LoadBalancer": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Load Balancer to stream to a Log Analytics workspace when any Load Balancer which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-LoadBalancer",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LoadBalancer",
        "displayName": "Deploy Diagnostic Settings for Load Balancer to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/loadBalancers"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/loadBalancers/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "timeGrain": null,
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "enabled": false,
                                "days": 0
                              }
                            }
                          ],
                          "logs": [
                            {
                              "category": "LoadBalancerAlertEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "LoadBalancerProbeHealthStatus",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicEndpoint-MariaDB": {
        "metadata": {
          "version": "1.0.0-deprecated",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "deprecated": true,
          "supersededBy": "fdccbe47-f3e3-4213-ad5d-ea459b2fa077",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of Maria DB accounts with exposed public endpoints. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/fdccbe47-f3e3-4213-ad5d-ea459b2fa077.html",
        "name": "Deny-PublicEndpoint-MariaDB",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicEndpoint-MariaDB",
        "displayName": "[Deprecated] Public network access should be disabled for MariaDB",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.DBforMariaDB/servers"
              },
              {
                "field": "Microsoft.DBforMariaDB/servers/publicNetworkAccess",
                "notequals": "Disabled"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization": {
        "metadata": {
          "version": "1.0.0",
          "category": "Cost Optimization",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Public IP addresses that are driving cost.",
        "name": "Audit-PublicIpAddresses-UnusedResourcesCostOptimization",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization",
        "displayName": "Unused Public IP addresses driving cost should be avoided",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "defaultValue": "Audit"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "microsoft.network/publicIpAddresses"
              },
              {
                "field": "Microsoft.Network/publicIPAddresses/sku.name",
                "notEquals": "Basic"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Network/publicIPAddresses/natGateway",
                    "exists": false
                  },
                  {
                    "value": "[equals(length(field('Microsoft.Network/publicIPAddresses/natGateway')), 0)]",
                    "equals": true
                  }
                ]
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Network/publicIPAddresses/ipConfiguration",
                    "exists": false
                  },
                  {
                    "value": "[equals(length(field('Microsoft.Network/publicIPAddresses/ipConfiguration')), 0)]",
                    "equals": true
                  }
                ]
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Network/publicIPAddresses/publicIPPrefix",
                    "exists": false
                  },
                  {
                    "value": "[equals(length(field('Microsoft.Network/publicIPAddresses/publicIPPrefix')), 0)]",
                    "equals": true
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peering-To-Non-Approved-VNETs": {
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of vNet Peerings to non-approved vNets under the assigned scope.",
        "name": "Deny-VNET-Peering-To-Non-Approved-VNETs",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peering-To-Non-Approved-VNETs",
        "displayName": "Deny vNet peering to non-approved vNets",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "allowedVnets": {
            "type": "Array",
            "metadata": {
              "displayName": "Allowed vNets to peer with",
              "description": "Array of allowed vNets that can be peered with. Must be entered using their resource ID. Example: /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}"
            },
            "defaultValue": []
          }
        },
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                  },
                  {
                    "not": {
                      "field": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id",
                      "in": "[parameters('allowedVnets')]"
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/virtualNetworks"
                  },
                  {
                    "not": {
                      "field": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id",
                      "in": "[parameters('allowedVnets')]"
                    }
                  },
                  {
                    "not": {
                      "field": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id",
                      "exists": false
                    }
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Function": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Azure Function App to stream to a Log Analytics workspace when any function app which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-Function",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Function",
        "displayName": "Deploy Diagnostic Settings for Azure Function App to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/sites"
              },
              {
                "value": "[field('kind')]",
                "contains": "functionapp"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Web/sites/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "FunctionAppLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataFactory": {
        "metadata": {
          "version": "1.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Data Factory to stream to a Log Analytics workspace when any Data Factory which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-DataFactory",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataFactory",
        "displayName": "Deploy Diagnostic Settings for Data Factory to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DataFactory/factories"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DataFactory/factories/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "ActivityRuns",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "PipelineRuns",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "TriggerRuns",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SSISPackageEventMessages",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SSISPackageExecutableStatistics",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SSISPackageEventMessageContext",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SSISPackageExecutionComponentPhases",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SSISPackageExecutionDataStatistics",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SSISIntegrationRuntimeLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SandboxPipelineRuns",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SandboxActivityRuns",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs": {
        "metadata": {
          "deprecated": true,
          "supersededBy": "e920df7f-9a64-4066-9b58-52684c02a091",
          "version": "1.0.0-deprecated",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "[Deprecated] Deprecated by built-in policy. Deploys NSG flow logs and traffic analytics to a storageaccountid with a specified retention period. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/e920df7f-9a64-4066-9b58-52684c02a091.html",
        "name": "Deploy-Nsg-FlowLogs",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs",
        "displayName": "[Deprecated] Deploys NSG flow logs and traffic analytics",
        "parameters": {
          "retention": {
            "type": "Integer",
            "metadata": {
              "displayName": "Retention"
            },
            "defaultValue": 5
          },
          "storageAccountResourceId": {
            "type": "String",
            "metadata": {
              "displayName": "Storage Account Resource Id",
              "strongType": "Microsoft.Storage/storageAccounts"
            }
          },
          "trafficAnalyticsInterval": {
            "type": "Integer",
            "metadata": {
              "displayName": "Traffic Analytics processing interval mins (10/60)"
            },
            "defaultValue": 60
          },
          "flowAnalyticsEnabled": {
            "type": "Boolean",
            "metadata": {
              "displayName": "Enable Traffic Analytics"
            },
            "defaultValue": false
          },
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "strongType": "omsWorkspace",
              "displayName": "Resource ID of Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
            },
            "defaultValue": ""
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/networkSecurityGroups"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Network/networkWatchers/flowLogs",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "resourceGroupName": "NetworkWatcherRG",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Network/networkWatchers/flowLogs/enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Network/networkWatchers/flowLogs/flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled",
                    "equals": "[parameters('flowAnalyticsEnabled')]"
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "parameters": {
                    "networkSecurityGroupName": {
                      "value": "[field('name')]"
                    },
                    "resourceGroupName": {
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "storageAccountResourceId": {
                      "value": "[parameters('storageAccountResourceId')]"
                    },
                    "retention": {
                      "value": "[parameters('retention')]"
                    },
                    "flowAnalyticsEnabled": {
                      "value": "[parameters('flowAnalyticsEnabled')]"
                    },
                    "trafficAnalyticsInterval": {
                      "value": "[parameters('trafficAnalyticsInterval')]"
                    },
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    }
                  },
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "networkSecurityGroupName": {
                        "type": "String"
                      },
                      "resourceGroupName": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "storageAccountResourceId": {
                        "type": "String"
                      },
                      "retention": {
                        "type": "int"
                      },
                      "flowAnalyticsEnabled": {
                        "type": "bool"
                      },
                      "trafficAnalyticsInterval": {
                        "type": "int"
                      },
                      "logAnalytics": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/networkWatchers/flowLogs",
                        "apiVersion": "2020-05-01",
                        "name": "[take(concat('NetworkWatcher_', toLower(parameters('location')),  '/', parameters('networkSecurityGroupName'), '-', parameters('resourceGroupName'), '-flowlog' ), 80)]",
                        "location": "[parameters('location')]",
                        "properties": {
                          "targetResourceId": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
                          "storageId": "[parameters('storageAccountResourceId')]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('retention')]"
                          },
                          "format": {
                            "type": "JSON",
                            "version": 2
                          },
                          "flowAnalyticsConfiguration": {
                            "networkWatcherFlowAnalyticsConfiguration": {
                              "enabled": "[bool(parameters('flowAnalyticsEnabled'))]",
                              "trafficAnalyticsInterval": "[parameters('trafficAnalyticsInterval')]",
                              "workspaceId": "[if(not(empty(parameters('logAnalytics'))), reference(parameters('logAnalytics'), '2020-03-01-preview', 'Full').properties.customerId, json('null')) ]",
                              "workspaceRegion": "[if(not(empty(parameters('logAnalytics'))), reference(parameters('logAnalytics'), '2020-03-01-preview', 'Full').location, json('null')) ]",
                              "workspaceResourceId": "[if(not(empty(parameters('logAnalytics'))), parameters('logAnalytics'), json('null'))]"
                            }
                          }
                        }
                      }
                    ],
                    "outputs": {}
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VMSS": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Virtual Machine Scale Sets  to stream to a Log Analytics workspace when any Virtual Machine Scale Sets  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-VMSS",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VMSS",
        "displayName": "Deploy Diagnostic Settings for Virtual Machine Scale Sets to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Compute/virtualMachineScaleSets"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Compute/virtualMachineScaleSets/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "enabled": false,
                                "days": 0
                              }
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Aks": {
        "metadata": {
          "version": "1.0.0",
          "category": "Machine Learning",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deny AKS cluster creation in Azure Machine Learning and enforce connecting to existing clusters.",
        "name": "Deny-MachineLearning-Aks",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Aks",
        "displayName": "Deny AKS cluster creation in Azure Machine Learning",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces/computes"
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/computes/computeType",
                "equals": "AKS"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/computes/resourceId",
                    "exists": false
                  },
                  {
                    "value": "[empty(field('Microsoft.MachineLearningServices/workspaces/computes/resourceId'))]",
                    "equals": true
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Udr": {
        "metadata": {
          "version": "2.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of a subnet without a User Defined Route (UDR).",
        "name": "Deny-Subnet-Without-Udr",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Udr",
        "displayName": "Subnets should have a User Defined Route",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "excludedSubnets": {
            "type": "Array",
            "metadata": {
              "displayName": "Excluded Subnets",
              "description": "Array of subnet names that are excluded from this policy"
            },
            "defaultValue": [
              "AzureBastionSubnet"
            ]
          }
        },
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "equals": "Microsoft.Network/virtualNetworks",
                    "field": "type"
                  },
                  {
                    "count": {
                      "field": "Microsoft.Network/virtualNetworks/subnets[*]",
                      "where": {
                        "allOf": [
                          {
                            "exists": "false",
                            "field": "Microsoft.Network/virtualNetworks/subnets[*].routeTable.id"
                          },
                          {
                            "field": "Microsoft.Network/virtualNetworks/subnets[*].name",
                            "notIn": "[parameters('excludedSubnets')]"
                          }
                        ]
                      }
                    },
                    "notEquals": 0
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/virtualNetworks/subnets"
                  },
                  {
                    "field": "name",
                    "notIn": "[parameters('excludedSubnets')]"
                  },
                  {
                    "field": "Microsoft.Network/virtualNetworks/subnets/routeTable.id",
                    "exists": "false"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-APIMgmt": {
        "metadata": {
          "version": "1.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for API Management to stream to a Log Analytics workspace when any API Management which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-APIMgmt",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-APIMgmt",
        "displayName": "Deploy Diagnostic Settings for API Management to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "logAnalyticsDestinationType": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics destination type",
              "description": "Select destination type for Log Analytics. Allowed values are 'Dedicated' (resource specific) and 'AzureDiagnostics'. Default is 'AzureDiagnostics'"
            },
            "defaultValue": "AzureDiagnostics",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ]
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.ApiManagement/service"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "logAnalyticsDestinationType": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.ApiManagement/service/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "GatewayLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "WebSocketConnectionLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ],
                          "logAnalyticsDestinationType": "[parameters('logAnalyticsDestinationType')]"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "logAnalyticsDestinationType": {
                      "value": "[parameters('logAnalyticsDestinationType')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DLAnalytics": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Data Lake Analytics to stream to a Log Analytics workspace when any Data Lake Analytics which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-DLAnalytics",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DLAnalytics",
        "displayName": "Deploy Diagnostic Settings for Data Lake Analytics to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DataLakeAnalytics/accounts"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DataLakeAnalytics/accounts/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "Audit",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Requests",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VM": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-VM",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VM",
        "displayName": "Deploy Diagnostic Settings for Virtual Machines to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Compute/virtualMachines"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Compute/virtualMachines/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "enabled": false,
                                "days": 0
                              }
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MySQL": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Database for MySQL to stream to a Log Analytics workspace when any Database for MySQL which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-MySQL",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MySQL",
        "displayName": "Deploy Diagnostic Settings for Database for MySQL to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DBforMySQL/servers"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DBforMySQL/servers/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "MySqlSlowLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "MySqlAuditLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-NoPublicIp": {
        "metadata": {
          "version": "1.0.0",
          "category": "Databricks",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Denies the deployment of workspaces that do not use the noPublicIp feature to host Databricks clusters without public IPs.",
        "name": "Deny-Databricks-NoPublicIp",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-NoPublicIp",
        "displayName": "Deny public IPs for Databricks cluster",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Databricks/workspaces"
              },
              {
                "field": "Microsoft.DataBricks/workspaces/parameters.enableNoPublicIp.value",
                "notEquals": true
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACI": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Container Instances to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. The Policy willset the diagnostic with all metrics enabled.",
        "name": "Deploy-Diagnostics-ACI",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACI",
        "displayName": "Deploy Diagnostic Settings for Container Instances to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.ContainerInstance/containerGroups"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.ContainerInstance/containerGroups/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicAccessWhenBehindVnet": {
        "metadata": {
          "version": "1.0.1",
          "category": "Machine Learning",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deny public access behind vnet to Azure Machine Learning workspaces.",
        "name": "Deny-MachineLearning-PublicAccessWhenBehindVnet",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicAccessWhenBehindVnet",
        "displayName": "Deny public access behind vnet to Azure Machine Learning workspace",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet",
                    "exists": false
                  },
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet",
                    "notEquals": false
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageAccount-CustomDomain": {
        "metadata": {
          "version": "1.0.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of Storage Accounts with custom domains assigned as communication cannot be encrypted, and always uses HTTP.",
        "name": "Deny-StorageAccount-CustomDomain",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageAccount-CustomDomain",
        "displayName": "Storage Accounts with custom domains assigned should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Storage/storageAccounts/customDomain",
                    "exists": "true"
                  },
                  {
                    "field": "Microsoft.Storage/storageAccounts/customDomain.useSubDomainName",
                    "equals": "true"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AA": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Automation to stream to a Log Analytics workspace when any Automation which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-AA",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AA",
        "displayName": "Deploy Diagnostic Settings for Automation to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Automation/automationAccounts"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Automation/automationAccounts/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "timeGrain": null,
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "enabled": false,
                                "days": 0
                              }
                            }
                          ],
                          "logs": [
                            {
                              "category": "JobLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "JobStreams",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DscNodeStatus",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AuditEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MariaDB": {
        "metadata": {
          "version": "1.1.0-deprecated",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "deprecated": true,
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for MariaDB to stream to a Log Analytics workspace when any MariaDB  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled. Deprecating due to service retirement, https://learn.microsoft.com/en-us/azure/mariadb/whats-happening-to-mariadb",
        "name": "Deploy-Diagnostics-MariaDB",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MariaDB",
        "displayName": "[Deprecated] Diagnostic Settings for MariaDB to Log Analytics Workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DBforMariaDB/servers"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DBforMariaDB/servers/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "MySqlSlowLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "MySqlAuditLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization": {
        "metadata": {
          "version": "1.0.0",
          "category": "Cost Optimization",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned App Service plans that are driving cost.",
        "name": "Audit-ServerFarms-UnusedResourcesCostOptimization",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization",
        "displayName": "Unused App Service plans driving cost should be avoided",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "defaultValue": "Audit"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/serverfarms"
              },
              {
                "field": "Microsoft.Web/serverFarms/sku.tier",
                "notEquals": "Free"
              },
              {
                "field": "Microsoft.Web/serverFarms/numberOfSites",
                "equals": 0
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogicAppsISE": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Logic Apps integration service environment to stream to a Log Analytics workspace when any Logic Apps integration service environment which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-LogicAppsISE",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogicAppsISE",
        "displayName": "Deploy Diagnostic Settings for Logic Apps integration service environment to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Logic/integrationAccounts"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Logic/integrationAccounts/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [],
                          "logs": [
                            {
                              "category": "IntegrationAccountTrackingEvents",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-AuditingSettings": {
        "metadata": {
          "version": "1.0.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy auditing settings to SQL Database when it not exist in the deployment",
        "name": "Deploy-Sql-AuditingSettings",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-AuditingSettings",
        "displayName": "Deploy SQL database auditing settings",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Sql/servers/databases"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Sql/servers/databases/auditingSettings",
              "name": "default",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Sql/servers/databases/auditingSettings/state",
                    "equals": "enabled"
                  },
                  {
                    "field": "Microsoft.Sql/servers/databases/auditingSettings/isAzureMonitorTargetEnabled",
                    "equals": "true"
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "location": {
                        "type": "String"
                      },
                      "sqlServerName": {
                        "type": "String"
                      },
                      "sqlServerDataBaseName": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "name": "[concat( parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]",
                        "type": "Microsoft.Sql/servers/databases/auditingSettings",
                        "apiVersion": "2017-03-01-preview",
                        "properties": {
                          "state": "enabled",
                          "auditActionsAndGroups": [
                            "BATCH_COMPLETED_GROUP",
                            "DATABASE_OBJECT_CHANGE_GROUP",
                            "SCHEMA_OBJECT_CHANGE_GROUP",
                            "BACKUP_RESTORE_GROUP",
                            "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP",
                            "DATABASE_PRINCIPAL_CHANGE_GROUP",
                            "DATABASE_PRINCIPAL_IMPERSONATION_GROUP",
                            "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
                            "USER_CHANGE_PASSWORD_GROUP",
                            "DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP",
                            "DATABASE_OBJECT_PERMISSION_CHANGE_GROUP",
                            "DATABASE_PERMISSION_CHANGE_GROUP",
                            "SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP",
                            "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                            "FAILED_DATABASE_AUTHENTICATION_GROUP"
                          ],
                          "isAzureMonitorTargetEnabled": true
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "location": {
                      "value": "[field('location')]"
                    },
                    "sqlServerName": {
                      "value": "[first(split(field('fullname'),'/'))]"
                    },
                    "sqlServerDataBaseName": {
                      "value": "[field('name')]"
                    }
                  }
                }
              },
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3"
              ]
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Custom-Route-Table": {
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys a route table with specific user defined routes when one does not exist. The route table deployed by the policy must be manually associated to subnet(s)",
        "name": "Deploy-Custom-Route-Table",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Custom-Route-Table",
        "displayName": "Deploy a route table with specific user defined routes",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "requiredRoutes": {
            "type": "Array",
            "metadata": {
              "displayName": "requiredRoutes",
              "description": "Routes that must exist in compliant route tables deployed by this policy"
            }
          },
          "vnetRegion": {
            "type": "String",
            "metadata": {
              "displayName": "vnetRegion",
              "description": "Only VNets in this region will be evaluated against this policy"
            }
          },
          "routeTableName": {
            "type": "String",
            "metadata": {
              "displayName": "routeTableName",
              "description": "Name of the route table automatically deployed by this policy"
            }
          },
          "disableBgpPropagation": {
            "type": "Boolean",
            "metadata": {
              "displayName": "DisableBgpPropagation",
              "description": "Disable BGP Propagation"
            },
            "defaultValue": false
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Network/virtualNetworks"
              },
              {
                "field": "location",
                "equals": "[parameters('vnetRegion')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Network/routeTables",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "name",
                    "equals": "[parameters('routeTableName')]"
                  },
                  {
                    "count": {
                      "field": "Microsoft.Network/routeTables/routes[*]",
                      "where": {
                        "value": "[concat(current('Microsoft.Network/routeTables/routes[*].addressPrefix'), ';', current('Microsoft.Network/routeTables/routes[*].nextHopType'), if(equals(toLower(current('Microsoft.Network/routeTables/routes[*].nextHopType')),'virtualappliance'), concat(';', current('Microsoft.Network/routeTables/routes[*].nextHopIpAddress')), ''))]",
                        "in": "[parameters('requiredRoutes')]"
                      }
                    },
                    "equals": "[length(parameters('requiredRoutes'))]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/subscriptions/e867a45d-e513-44ac-931e-4741cef80b24/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7"
              ],
              "deployment": {
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "routeTableName": {
                        "type": "string"
                      },
                      "vnetRegion": {
                        "type": "string"
                      },
                      "requiredRoutes": {
                        "type": "array"
                      },
                      "disableBgpPropagation": {
                        "type": "bool"
                      }
                    },
                    "variables": {
                      "copyLoop": [
                        {
                          "name": "routes",
                          "count": "[[length(parameters('requiredRoutes'))]",
                          "input": {
                            "name": "[[concat('route-',copyIndex('routes'))]",
                            "properties": {
                              "addressPrefix": "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[0]]",
                              "nextHopType": "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]]",
                              "nextHopIpAddress": "[[if(equals(toLower(split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]),'virtualappliance'),split(parameters('requiredRoutes')[copyIndex('routes')], ';')[2], null())]"
                            }
                          }
                        }
                      ]
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2021-04-01",
                        "name": "routeTableDepl",
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "routeTableName": {
                                "type": "string"
                              },
                              "vnetRegion": {
                                "type": "string"
                              },
                              "requiredRoutes": {
                                "type": "array"
                              },
                              "disableBgpPropagation": {
                                "type": "bool"
                              }
                            },
                            "resources": [
                              {
                                "type": "Microsoft.Network/routeTables",
                                "apiVersion": "2021-02-01",
                                "name": "[[parameters('routeTableName')]",
                                "location": "[[parameters('vnetRegion')]",
                                "properties": {
                                  "disableBgpRoutePropagation": "[[parameters('disableBgpPropagation')]",
                                  "copy": "[variables('copyLoop')]"
                                }
                              }
                            ]
                          },
                          "parameters": {
                            "routeTableName": {
                              "value": "[parameters('routeTableName')]"
                            },
                            "vnetRegion": {
                              "value": "[parameters('vnetRegion')]"
                            },
                            "requiredRoutes": {
                              "value": "[parameters('requiredRoutes')]"
                            },
                            "disableBgpPropagation": {
                              "value": "[parameters('disableBgpPropagation')]"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "parameters": {
                    "routeTableName": {
                      "value": "[parameters('routeTableName')]"
                    },
                    "vnetRegion": {
                      "value": "[parameters('vnetRegion')]"
                    },
                    "requiredRoutes": {
                      "value": "[parameters('requiredRoutes')]"
                    },
                    "disableBgpPropagation": {
                      "value": "[parameters('disableBgpPropagation')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments": {
        "metadata": {
          "version": "1.0.1-deprecated",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "deprecated": true,
          "supersededBy": "Deploy-Sql-vulnerabilityAssessments_20230706",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy SQL Database vulnerability Assessments when it not exist in the deployment. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/Deploy-Sql-vulnerabilityAssessments_20230706.html",
        "name": "Deploy-Sql-vulnerabilityAssessments",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments",
        "displayName": "[Deprecated]: Deploy SQL Database vulnerability Assessments",
        "parameters": {
          "vulnerabilityAssessmentsEmail": {
            "type": "String",
            "metadata": {
              "description": "The email address to send alerts. For multiple emails, format in the following 'email1@contoso.com;email2@contoso.com'",
              "displayName": "The email address to send alerts. For multiple emails, format in the following 'email1@contoso.com;email2@contoso.com'"
            }
          },
          "vulnerabilityAssessmentsStorageID": {
            "type": "String",
            "metadata": {
              "description": "The storage account ID to store assessments",
              "displayName": "The storage account ID to store assessments"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Sql/servers/databases"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails",
                    "equals": "[parameters('vulnerabilityAssessmentsEmail')]"
                  },
                  {
                    "field": "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.isEnabled",
                    "equals": true
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "location": {
                        "type": "String"
                      },
                      "sqlServerName": {
                        "type": "String"
                      },
                      "sqlServerDataBaseName": {
                        "type": "String"
                      },
                      "vulnerabilityAssessmentsEmail": {
                        "type": "String"
                      },
                      "vulnerabilityAssessmentsStorageID": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "name": "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]",
                        "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
                        "apiVersion": "2017-03-01-preview",
                        "properties": {
                          "storageContainerPath": "[concat('https://', last( split(parameters('vulnerabilityAssessmentsStorageID') ,  '/') ) , '.blob.core.windows.net/vulneraabilitylogs')]",
                          "storageAccountAccessKey": "[listkeys(parameters('vulnerabilityAssessmentsStorageID'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
                          "recurringScans": {
                            "isEnabled": true,
                            "emailSubscriptionAdmins": false,
                            "emails": [
                              "[parameters('vulnerabilityAssessmentsEmail')]"
                            ]
                          }
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "location": {
                      "value": "[field('location')]"
                    },
                    "sqlServerName": {
                      "value": "[first(split(field('fullname'),'/'))]"
                    },
                    "sqlServerDataBaseName": {
                      "value": "[field('name')]"
                    },
                    "vulnerabilityAssessmentsEmail": {
                      "value": "[parameters('vulnerabilityAssessmentsEmail')]"
                    },
                    "vulnerabilityAssessmentsStorageID": {
                      "value": "[parameters('vulnerabilityAssessmentsStorageID')]"
                    }
                  }
                }
              },
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab"
              ]
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-sslEnforcement": {
        "metadata": {
          "version": "1.0.0",
          "category": "Cache",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Append a specific min TLS version requirement and enforce SSL on Azure Cache for Redis. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Append-Redis-sslEnforcement",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-sslEnforcement",
        "displayName": "Azure Cache for Redis Append a specific min TLS version requirement and enforce TLS.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect Azure Cache for Redis",
              "description": "Enable or disable the execution of the policy minimum TLS version Azure Cache for Redis"
            }
          },
          "minimumTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.1",
              "1.0"
            ],
            "metadata": {
              "displayName": "Select version for Redis server",
              "description": "Select version minimum TLS version Azure Cache for Redis to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Cache/redis"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Cache/Redis/minimumTlsVersion",
                    "notequals": "[parameters('minimumTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": [
              {
                "field": "Microsoft.Cache/Redis/minimumTlsVersion",
                "value": "[parameters('minimumTlsVersion')]"
              }
            ]
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACR": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Container Registry to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics  enabled.",
        "name": "Deploy-Diagnostics-ACR",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACR",
        "displayName": "Deploy Diagnostic Settings for Container Registry to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.ContainerRegistry/registries"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.ContainerRegistry/registries/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "ContainerRegistryLoginEvents",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ContainerRegistryRepositoryEvents",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-KV-SoftDelete": {
        "metadata": {
          "version": "1.0.0",
          "category": "Key Vault",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy enables you to ensure when a Key Vault is created with out soft delete enabled it will be added.",
        "name": "Append-KV-SoftDelete",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-KV-SoftDelete",
        "displayName": "KeyVault SoftDelete should be enabled",
        "parameters": {},
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.KeyVault/vaults"
                  },
                  {
                    "field": "Microsoft.KeyVault/vaults/enableSoftDelete",
                    "notEquals": true
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "append",
            "details": [
              {
                "field": "Microsoft.KeyVault/vaults/enableSoftDelete",
                "value": true
              }
            ]
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-VNet-Peering": {
        "metadata": {
          "version": "1.0.1",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of vNet Peerings under the assigned scope.",
        "name": "Deny-VNet-Peering",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-VNet-Peering",
        "displayName": "Deny vNet peering ",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet": {
        "metadata": {
          "version": "2.1.1",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "replacesPolicy": "Deny-RDP-From-Internet",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies any network security rule that allows management port access from the Internet, by default blocking SSH/RDP ports.",
        "name": "Deny-MgmtPorts-From-Internet",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MgmtPorts-From-Internet",
        "displayName": "Management port access from the Internet should be blocked",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "ports": {
            "type": "Array",
            "metadata": {
              "displayName": "Ports",
              "description": "Ports to be blocked"
            },
            "defaultValue": [
              "22",
              "3389"
            ]
          }
        },
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/networkSecurityGroups/securityRules"
                  },
                  {
                    "allOf": [
                      {
                        "field": "Microsoft.Network/networkSecurityGroups/securityRules/access",
                        "equals": "Allow"
                      },
                      {
                        "field": "Microsoft.Network/networkSecurityGroups/securityRules/direction",
                        "equals": "Inbound"
                      },
                      {
                        "anyOf": [
                          {
                            "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange",
                            "equals": "*"
                          },
                          {
                            "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange",
                            "in": "[parameters('ports')]"
                          },
                          {
                            "count": {
                              "value": "[parameters('ports')]",
                              "where": {
                                "value": "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current())),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current()))), 'false')]",
                                "equals": "true"
                              }
                            },
                            "greater": 0
                          },
                          {
                            "count": {
                              "value": "[parameters('ports')]",
                              "name": "ports",
                              "where": {
                                "count": {
                                  "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
                                  "where": {
                                    "value": "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]",
                                    "equals": "true"
                                  }
                                },
                                "greater": 0
                              }
                            },
                            "greater": 0
                          },
                          {
                            "not": {
                              "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
                              "notEquals": "*"
                            }
                          },
                          {
                            "not": {
                              "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
                              "notIn": "[parameters('ports')]"
                            }
                          }
                        ]
                      },
                      {
                        "anyOf": [
                          {
                            "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix",
                            "equals": "*"
                          },
                          {
                            "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix",
                            "equals": "Internet"
                          },
                          {
                            "not": {
                              "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]",
                              "notEquals": "*"
                            }
                          },
                          {
                            "not": {
                              "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]",
                              "notEquals": "Internet"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/networkSecurityGroups"
                  },
                  {
                    "count": {
                      "field": "Microsoft.Network/networkSecurityGroups/securityRules[*]",
                      "where": {
                        "allOf": [
                          {
                            "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].access",
                            "equals": "Allow"
                          },
                          {
                            "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].direction",
                            "equals": "Inbound"
                          },
                          {
                            "anyOf": [
                              {
                                "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange",
                                "equals": "*"
                              },
                              {
                                "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange",
                                "in": "[parameters('ports')]"
                              },
                              {
                                "count": {
                                  "value": "[parameters('ports')]",
                                  "name": "ports",
                                  "where": {
                                    "value": "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports')))), 'false')]",
                                    "equals": "true"
                                  }
                                },
                                "greater": 0
                              },
                              {
                                "count": {
                                  "value": "[parameters('ports')]",
                                  "name": "ports",
                                  "where": {
                                    "count": {
                                      "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]",
                                      "where": {
                                        "value": "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]",
                                        "equals": "true"
                                      }
                                    },
                                    "greater": 0
                                  }
                                },
                                "greater": 0
                              },
                              {
                                "not": {
                                  "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]",
                                  "notEquals": "*"
                                }
                              },
                              {
                                "not": {
                                  "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]",
                                  "notIn": "[parameters('ports')]"
                                }
                              }
                            ]
                          },
                          {
                            "anyOf": [
                              {
                                "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix",
                                "equals": "*"
                              },
                              {
                                "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix",
                                "equals": "Internet"
                              },
                              {
                                "not": {
                                  "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]",
                                  "notEquals": "*"
                                }
                              },
                              {
                                "not": {
                                  "field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]",
                                  "notEquals": "Internet"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "greater": 0
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-minTLS": {
        "metadata": {
          "version": "1.0.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Setting minimal TLS version to 1.2 improves security by ensuring your Azure SQL Database can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not reccomended since they have well documented security vunerabilities.",
        "name": "Deny-Sql-minTLS",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-minTLS",
        "displayName": "Azure SQL Database should have the minimal TLS version set to the highest version",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Audit"
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.1",
              "1.0"
            ],
            "metadata": {
              "displayName": "Select version for SQL server",
              "description": "Select version minimum TLS version SQL servers to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Sql/servers"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Sql/servers/minimalTlsVersion",
                    "exists": "false"
                  },
                  {
                    "field": "Microsoft.Sql/servers/minimalTlsVersion",
                    "notequals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridTopic": {
        "metadata": {
          "version": "1.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Event Grid Topic to stream to a Log Analytics workspace when any Event Grid Topic which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-EventGridTopic",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridTopic",
        "displayName": "Deploy Diagnostic Settings for Event Grid Topic to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.EventGrid/topics"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.EventGrid/topics/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "DeliveryFailures",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "PublishFailures",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DataPlaneRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Private-DNS-Zones": {
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of a private DNS in the current scope, used in combination with policies that create centralized private DNS in connectivity subscription",
        "name": "Deny-Private-DNS-Zones",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Private-DNS-Zones",
        "displayName": "Deny the creation of private DNS",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/privateDnsZones"
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSub": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Event Grid subscriptions to stream to a Log Analytics workspace when any Event Grid subscriptions which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-EventGridSub",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSub",
        "displayName": "Deploy Diagnostic Settings for Event Grid subscriptions to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.EventGrid/eventSubscriptions"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.EventGrid/eventSubscriptions/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Storage-sslEnforcement": {
        "metadata": {
          "version": "1.2.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy a specific min TLS version requirement and enforce SSL on Azure Storage. Enables secure server to client by enforce minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your Azure Storage.",
        "name": "Deploy-Storage-sslEnforcement",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Storage-sslEnforcement",
        "displayName": "Azure Storage deploy a specific min TLS version requirement and enforce SSL/HTTPS ",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect Azure Storage",
              "description": "Enable or disable the execution of the policy minimum TLS version Azure STorage"
            }
          },
          "minimumTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_1",
              "TLS1_0"
            ],
            "metadata": {
              "displayName": "Select TLS version for Azure Storage server",
              "description": "Select version minimum TLS version Azure STorage to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly",
                    "notEquals": "true"
                  },
                  {
                    "field": "Microsoft.Storage/storageAccounts/minimumTlsVersion",
                    "notEquals": "[parameters('minimumTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Storage/storageAccounts",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Storage/storageAccounts/minimumTlsVersion",
                    "equals": "[parameters('minimumTlsVersion')]"
                  }
                ]
              },
              "name": "current",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "minimumTlsVersion": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Storage/storageAccounts",
                        "apiVersion": "2019-06-01",
                        "name": "[concat(parameters('resourceName'))]",
                        "location": "[parameters('location')]",
                        "properties": {
                          "supportsHttpsTrafficOnly": true,
                          "minimumTlsVersion": "[parameters('minimumTlsVersion')]"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "minimumTlsVersion": {
                      "value": "[parameters('minimumTlsVersion')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-Sku": {
        "metadata": {
          "version": "1.0.0",
          "category": "Databricks",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforces the use of Premium Databricks workspaces to make sure appropriate security features are available including Databricks Access Controls, Credential Passthrough and SCIM provisioning for Microsoft Entra ID.",
        "name": "Deny-Databricks-Sku",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-Sku",
        "displayName": "Deny non-premium Databricks sku",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Databricks/workspaces"
              },
              {
                "field": "Microsoft.DataBricks/workspaces/sku.name",
                "notEquals": "premium"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-VmSize": {
        "metadata": {
          "version": "1.0.0",
          "category": "Budget",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances.",
        "name": "Deny-MachineLearning-Compute-VmSize",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-VmSize",
        "displayName": "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          },
          "allowedVmSizes": {
            "type": "Array",
            "metadata": {
              "displayName": "Allowed VM Sizes for Aml Compute Clusters and Instances",
              "description": "Specifies the allowed VM Sizes for Aml Compute Clusters and Instances"
            },
            "defaultValue": [
              "Standard_D1_v2",
              "Standard_D2_v2",
              "Standard_D3_v2",
              "Standard_D4_v2",
              "Standard_D11_v2",
              "Standard_D12_v2",
              "Standard_D13_v2",
              "Standard_D14_v2",
              "Standard_DS1_v2",
              "Standard_DS2_v2",
              "Standard_DS3_v2",
              "Standard_DS4_v2",
              "Standard_DS5_v2",
              "Standard_DS11_v2",
              "Standard_DS12_v2",
              "Standard_DS13_v2",
              "Standard_DS14_v2",
              "Standard_M8-2ms",
              "Standard_M8-4ms",
              "Standard_M8ms",
              "Standard_M16-4ms",
              "Standard_M16-8ms",
              "Standard_M16ms",
              "Standard_M32-8ms",
              "Standard_M32-16ms",
              "Standard_M32ls",
              "Standard_M32ms",
              "Standard_M32ts",
              "Standard_M64-16ms",
              "Standard_M64-32ms",
              "Standard_M64ls",
              "Standard_M64ms",
              "Standard_M64s",
              "Standard_M128-32ms",
              "Standard_M128-64ms",
              "Standard_M128ms",
              "Standard_M128s",
              "Standard_M64",
              "Standard_M64m",
              "Standard_M128",
              "Standard_M128m",
              "Standard_D1",
              "Standard_D2",
              "Standard_D3",
              "Standard_D4",
              "Standard_D11",
              "Standard_D12",
              "Standard_D13",
              "Standard_D14",
              "Standard_DS15_v2",
              "Standard_NV6",
              "Standard_NV12",
              "Standard_NV24",
              "Standard_F2s_v2",
              "Standard_F4s_v2",
              "Standard_F8s_v2",
              "Standard_F16s_v2",
              "Standard_F32s_v2",
              "Standard_F64s_v2",
              "Standard_F72s_v2",
              "Standard_NC6s_v3",
              "Standard_NC12s_v3",
              "Standard_NC24rs_v3",
              "Standard_NC24s_v3",
              "Standard_NC6",
              "Standard_NC12",
              "Standard_NC24",
              "Standard_NC24r",
              "Standard_ND6s",
              "Standard_ND12s",
              "Standard_ND24rs",
              "Standard_ND24s",
              "Standard_NC6s_v2",
              "Standard_NC12s_v2",
              "Standard_NC24rs_v2",
              "Standard_NC24s_v2",
              "Standard_ND40rs_v2",
              "Standard_NV12s_v3",
              "Standard_NV24s_v3",
              "Standard_NV48s_v3"
            ]
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces/computes"
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/computes/computeType",
                "in": [
                  "AmlCompute",
                  "ComputeInstance"
                ]
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/computes/vmSize",
                "notIn": "[parameters('allowedVmSizes')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-SQL-minTLS": {
        "metadata": {
          "version": "1.1.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Deploy-SQL-minTLS",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-SQL-minTLS",
        "displayName": "SQL servers deploys a specific min TLS version requirement.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect SQL servers",
              "description": "Enable or disable the execution of the policy minimum TLS version SQL servers"
            }
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.1",
              "1.0"
            ],
            "metadata": {
              "displayName": "Select version for SQL server",
              "description": "Select version minimum TLS version SQL servers to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Sql/servers"
              },
              {
                "field": "Microsoft.Sql/servers/minimalTlsVersion",
                "notequals": "[parameters('minimalTlsVersion')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Sql/servers",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Sql/servers/minimalTlsVersion",
                    "equals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              },
              "name": "current",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "minimalTlsVersion": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Sql/servers",
                        "apiVersion": "2019-06-01-preview",
                        "name": "[concat(parameters('resourceName'))]",
                        "location": "[parameters('location')]",
                        "properties": {
                          "minimalTlsVersion": "[parameters('minimalTlsVersion')]"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "minimalTlsVersion": {
                      "value": "[parameters('minimalTlsVersion')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-SubnetId": {
        "metadata": {
          "version": "1.0.0",
          "category": "Machine Learning",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforce subnet connectivity for Azure Machine Learning compute clusters and compute instances.",
        "name": "Deny-MachineLearning-Compute-SubnetId",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Compute-SubnetId",
        "displayName": "Enforce subnet connectivity for Azure Machine Learning compute clusters and compute instances",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces/computes"
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/computes/computeType",
                "in": [
                  "AmlCompute",
                  "ComputeInstance"
                ]
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/computes/subnet.id",
                    "exists": false
                  },
                  {
                    "value": "[empty(field('Microsoft.MachineLearningServices/workspaces/computes/subnet.id'))]",
                    "equals": true
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CognitiveServices": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Cognitive Services to stream to a Log Analytics workspace when any Cognitive Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-CognitiveServices",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CognitiveServices",
        "displayName": "Deploy Diagnostic Settings for Cognitive Services to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.CognitiveServices/accounts"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.CognitiveServices/accounts/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "Audit",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "RequestResponse",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Trace",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PostgreSQL": {
        "metadata": {
          "version": "2.0.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Database for PostgreSQL to stream to a Log Analytics workspace when any Database for PostgreSQL which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-PostgreSQL",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PostgreSQL",
        "displayName": "Deploy Diagnostic Settings for Database for PostgreSQL to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "field": "type",
                "equals": "Microsoft.DBforPostgreSQL/flexibleServers"
              },
              {
                "field": "type",
                "equals": "Microsoft.DBforPostgreSQL/servers"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "resourceType": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "condition": "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/flexibleServers')]",
                        "type": "Microsoft.DBforPostgreSQL/flexibleServers/providers/diagnosticSettings",
                        "apiVersion": "2021-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "PostgreSQLLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      },
                      {
                        "condition": "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/servers')]",
                        "type": "Microsoft.DBforPostgreSQL/servers/providers/diagnosticSettings",
                        "apiVersion": "2021-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "PostgreSQLLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "QueryStoreRuntimeStatistics",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "QueryStoreWaitStatistics",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "resourceType": {
                      "value": "[field('type')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Firewall": {
        "metadata": {
          "version": "1.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Firewall to stream to a Log Analytics workspace when any Firewall which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-Firewall",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Firewall",
        "displayName": "Deploy Diagnostic Settings for Firewall to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "logAnalyticsDestinationType": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics destination type",
              "description": "Select destination type for Log Analytics. Allowed values are 'Dedicated' (resource specific) and 'AzureDiagnostics'. Default is 'AzureDiagnostics'"
            },
            "defaultValue": "AzureDiagnostics",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ]
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/azureFirewalls"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "logAnalyticsDestinationType": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/azureFirewalls/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "logAnalyticsDestinationType": "[parameters('logAnalyticsDestinationType')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "AzureFirewallApplicationRule",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AzureFirewallNetworkRule",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AzureFirewallDnsProxy",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWNetworkRule",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWApplicationRule",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWNatRule",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWThreatIntel",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWIdpsSignature",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWDnsQuery",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWFqdnResolveFailure",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWApplicationRuleAggregation",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWNetworkRuleAggregation",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWNatRuleAggregation",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWFatFlow",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AZFWFlowTrace",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "logAnalyticsDestinationType": {
                      "value": "[parameters('logAnalyticsDestinationType')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-Disks-UnusedResourcesCostOptimization": {
        "metadata": {
          "version": "1.0.0",
          "category": "Cost Optimization",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Disks that are driving cost.",
        "name": "Audit-Disks-UnusedResourcesCostOptimization",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-Disks-UnusedResourcesCostOptimization",
        "displayName": "Unused Disks driving cost should be avoided",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "defaultValue": "Audit"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Compute/disks"
              },
              {
                "field": "Microsoft.Compute/disks/diskState",
                "equals": "Unattached"
              },
              {
                "allof": [
                  {
                    "field": "name",
                    "notlike": "*-ASRReplica"
                  },
                  {
                    "field": "name",
                    "notlike": "ms-asr-*"
                  },
                  {
                    "field": "name",
                    "notlike": "asrseeddisk-*"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-Scale": {
        "metadata": {
          "version": "1.0.0",
          "category": "Budget",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforce scale settings for Azure Machine Learning compute clusters.",
        "name": "Deny-MachineLearning-ComputeCluster-Scale",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-Scale",
        "displayName": "Enforce scale settings for Azure Machine Learning compute clusters",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          },
          "maxNodeCount": {
            "type": "Integer",
            "metadata": {
              "displayName": "Maximum Node Count",
              "description": "Specifies the maximum node count of AML Clusters"
            },
            "defaultValue": 10
          },
          "minNodeCount": {
            "type": "Integer",
            "metadata": {
              "displayName": "Minimum Node Count",
              "description": "Specifies the minimum node count of AML Clusters"
            },
            "defaultValue": 0
          },
          "maxNodeIdleTimeInSecondsBeforeScaleDown": {
            "type": "Integer",
            "metadata": {
              "displayName": "Maximum Node Idle Time in Seconds Before Scaledown",
              "description": "Specifies the maximum node idle time in seconds before scaledown"
            },
            "defaultValue": 900
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces/computes"
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/computes/computeType",
                "equals": "AmlCompute"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.maxNodeCount",
                    "greater": "[parameters('maxNodeCount')]"
                  },
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.minNodeCount",
                    "greater": "[parameters('minNodeCount')]"
                  },
                  {
                    "value": "[int(last(split(replace(replace(replace(replace(replace(replace(replace(field('Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.nodeIdleTimeBeforeScaleDown'), 'P', '/'), 'Y', '/'), 'M', '/'), 'D', '/'), 'T', '/'), 'H', '/'), 'S', ''), '/')))]",
                    "greater": "[parameters('maxNodeIdleTimeInSecondsBeforeScaleDown')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Relay": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Relay to stream to a Log Analytics workspace when any Relay which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-Relay",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Relay",
        "displayName": "Deploy Diagnostic Settings for Relay to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Relay/namespaces"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Relay/namespaces/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "HybridConnectionsEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Bastion": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Azure Bastion to stream to a Log Analytics workspace when any Azure Bastion which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-Bastion",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Bastion",
        "displayName": "Deploy Diagnostic Settings for Azure Bastion to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/bastionHosts"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/bastionHosts/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "BastionAuditLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NetworkSecurityGroups": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-NetworkSecurityGroups",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NetworkSecurityGroups",
        "displayName": "Deploy Diagnostic Settings for Network Security Groups to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/networkSecurityGroups"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [],
                          "logs": [
                            {
                              "category": "NetworkSecurityGroupEvent",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "NetworkSecurityGroupRuleCounter",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Windows-DomainJoin": {
        "metadata": {
          "version": "1.0.0",
          "category": "Guest Configuration",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy Windows Domain Join Extension with keyvault configuration when the extension does not exist on a given windows Virtual Machine",
        "name": "Deploy-Windows-DomainJoin",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Windows-DomainJoin",
        "displayName": "Deploy Windows Domain Join Extension with keyvault configuration",
        "parameters": {
          "domainUsername": {
            "type": "String",
            "metadata": {
              "displayName": "domainUsername"
            }
          },
          "domainPassword": {
            "type": "String",
            "metadata": {
              "displayName": "domainPassword"
            }
          },
          "domainFQDN": {
            "type": "String",
            "metadata": {
              "displayName": "domainFQDN"
            }
          },
          "domainOUPath": {
            "type": "String",
            "metadata": {
              "displayName": "domainOUPath"
            }
          },
          "keyVaultResourceId": {
            "type": "String",
            "metadata": {
              "displayName": "keyVaultResourceId"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Compute/virtualMachines"
              },
              {
                "field": "Microsoft.Compute/imagePublisher",
                "equals": "MicrosoftWindowsServer"
              },
              {
                "field": "Microsoft.Compute/imageOffer",
                "equals": "WindowsServer"
              },
              {
                "field": "Microsoft.Compute/imageSKU",
                "in": [
                  "2008-R2-SP1",
                  "2008-R2-SP1-smalldisk",
                  "2008-R2-SP1-zhcn",
                  "2012-Datacenter",
                  "2012-datacenter-gensecond",
                  "2012-Datacenter-smalldisk",
                  "2012-datacenter-smalldisk-g2",
                  "2012-Datacenter-zhcn",
                  "2012-datacenter-zhcn-g2",
                  "2012-R2-Datacenter",
                  "2012-r2-datacenter-gensecond",
                  "2012-R2-Datacenter-smalldisk",
                  "2012-r2-datacenter-smalldisk-g2",
                  "2012-R2-Datacenter-zhcn",
                  "2012-r2-datacenter-zhcn-g2",
                  "2016-Datacenter",
                  "2016-datacenter-gensecond",
                  "2016-datacenter-gs",
                  "2016-Datacenter-Server-Core",
                  "2016-datacenter-server-core-g2",
                  "2016-Datacenter-Server-Core-smalldisk",
                  "2016-datacenter-server-core-smalldisk-g2",
                  "2016-Datacenter-smalldisk",
                  "2016-datacenter-smalldisk-g2",
                  "2016-Datacenter-with-Containers",
                  "2016-datacenter-with-containers-g2",
                  "2016-Datacenter-with-RDSH",
                  "2016-Datacenter-zhcn",
                  "2016-datacenter-zhcn-g2",
                  "2019-Datacenter",
                  "2019-Datacenter-Core",
                  "2019-datacenter-core-g2",
                  "2019-Datacenter-Core-smalldisk",
                  "2019-datacenter-core-smalldisk-g2",
                  "2019-Datacenter-Core-with-Containers",
                  "2019-datacenter-core-with-containers-g2",
                  "2019-Datacenter-Core-with-Containers-smalldisk",
                  "2019-datacenter-core-with-containers-smalldisk-g2",
                  "2019-datacenter-gensecond",
                  "2019-datacenter-gs",
                  "2019-Datacenter-smalldisk",
                  "2019-datacenter-smalldisk-g2",
                  "2019-Datacenter-with-Containers",
                  "2019-datacenter-with-containers-g2",
                  "2019-Datacenter-with-Containers-smalldisk",
                  "2019-datacenter-with-containers-smalldisk-g2",
                  "2019-Datacenter-zhcn",
                  "2019-datacenter-zhcn-g2",
                  "Datacenter-Core-1803-with-Containers-smalldisk",
                  "datacenter-core-1803-with-containers-smalldisk-g2",
                  "Datacenter-Core-1809-with-Containers-smalldisk",
                  "datacenter-core-1809-with-containers-smalldisk-g2",
                  "Datacenter-Core-1903-with-Containers-smalldisk",
                  "datacenter-core-1903-with-containers-smalldisk-g2",
                  "datacenter-core-1909-with-containers-smalldisk",
                  "datacenter-core-1909-with-containers-smalldisk-g1",
                  "datacenter-core-1909-with-containers-smalldisk-g2"
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
              ],
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/type",
                    "equals": "JsonADDomainExtension"
                  },
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/publisher",
                    "equals": "Microsoft.Compute"
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "parameters": {
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "domainUsername": {
                      "reference": {
                        "keyVault": {
                          "id": "[parameters('keyVaultResourceId')]"
                        },
                        "secretName": "[parameters('domainUsername')]"
                      }
                    },
                    "domainPassword": {
                      "reference": {
                        "keyVault": {
                          "id": "[parameters('keyVaultResourceId')]"
                        },
                        "secretName": "[parameters('domainPassword')]"
                      }
                    },
                    "domainOUPath": {
                      "value": "[parameters('domainOUPath')]"
                    },
                    "domainFQDN": {
                      "value": "[parameters('domainFQDN')]"
                    },
                    "keyVaultResourceId": {
                      "value": "[parameters('keyVaultResourceId')]"
                    }
                  },
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "vmName": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "domainUsername": {
                        "type": "String"
                      },
                      "domainPassword": {
                        "type": "securestring"
                      },
                      "domainFQDN": {
                        "type": "String"
                      },
                      "domainOUPath": {
                        "type": "String"
                      },
                      "keyVaultResourceId": {
                        "type": "String"
                      }
                    },
                    "variables": {
                      "domainJoinOptions": 3,
                      "vmName": "[parameters('vmName')]"
                    },
                    "resources": [
                      {
                        "apiVersion": "2015-06-15",
                        "type": "Microsoft.Compute/virtualMachines/extensions",
                        "name": "[concat(variables('vmName'),'/joindomain')]",
                        "location": "[resourceGroup().location]",
                        "properties": {
                          "publisher": "Microsoft.Compute",
                          "type": "JsonADDomainExtension",
                          "typeHandlerVersion": "1.3",
                          "autoUpgradeMinorVersion": true,
                          "settings": {
                            "Name": "[parameters('domainFQDN')]",
                            "User": "[parameters('domainUserName')]",
                            "Restart": "true",
                            "Options": "[variables('domainJoinOptions')]",
                            "OUPath": "[parameters('domainOUPath')]"
                          },
                          "protectedSettings": {
                            "Password": "[parameters('domainPassword')]"
                          }
                        }
                      }
                    ],
                    "outputs": {}
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDHostPools": {
        "metadata": {
          "version": "1.3.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for AVD Host Pools to stream to a Log Analytics workspace when any Host Pools which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.",
        "name": "Deploy-Diagnostics-WVDHostPools",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDHostPools",
        "displayName": "Deploy Diagnostic Settings for AVD Host Pools to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DesktopVirtualization/hostpools"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DesktopVirtualization/hostpools/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "logs": [
                            {
                              "category": "Checkpoint",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Error",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Management",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Connection",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "HostRegistration",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "AgentHealthStatus",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "NetworkData",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SessionHostManagement",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ConnectionGraphicsData",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDAppGroup": {
        "metadata": {
          "version": "1.1.1",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for AVD Application group to stream to a Log Analytics workspace when any application group which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.",
        "name": "Deploy-Diagnostics-WVDAppGroup",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDAppGroup",
        "displayName": "Deploy Diagnostic Settings for AVD Application group to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DesktopVirtualization/applicationGroups"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DesktopVirtualization/applicationGroups/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "logs": [
                            {
                              "category": "Checkpoint",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Error",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Management",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbChannel": {
        "metadata": {
          "version": "1.0.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the use of insecure channel encryption (AES-128-CCM) when using File Services on a storage account.",
        "name": "Deny-FileServices-InsecureSmbChannel",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureSmbChannel",
        "displayName": "File Services with insecure SMB channel encryption should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          },
          "notAllowedChannelEncryption": {
            "type": "String",
            "defaultValue": "AES-128-CCM",
            "allowedValues": [
              "AES-128-CCM",
              "AES-128-GCM",
              "AES-256-GCM"
            ],
            "metadata": {
              "displayName": "SMB channel encryption supported by server. Valid values are AES-128-CCM, AES-128-GCM, AES-256-GCM.",
              "description": "The list of channelEncryption not allowed."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts/fileServices"
              },
              {
                "field": "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.channelEncryption",
                "contains": "[parameters('notAllowedChannelEncryption')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataExplorerCluster": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Azure Data Explorer Cluster to stream to a Log Analytics workspace when any Azure Data Explorer Cluster which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-DataExplorerCluster",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataExplorerCluster",
        "displayName": "Deploy Diagnostic Settings for Azure Data Explorer Cluster to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Kusto/Clusters"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Kusto/Clusters/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "SucceededIngestion",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "FailedIngestion",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "IngestionBatching",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Command",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Query",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "TableUsageStatistics",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "TableDetails",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peer-Cross-Sub": {
        "metadata": {
          "version": "1.0.1",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of vNet Peerings outside of the same subscriptions under the assigned scope.",
        "name": "Deny-VNET-Peer-Cross-Sub",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peer-Cross-Sub",
        "displayName": "Deny vNet peering cross subscription.",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
              },
              {
                "field": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id",
                "notcontains": "[subscription().id]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSystemTopic": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Event Grid System Topic to stream to a Log Analytics workspace when any Event Grid System Topic which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-EventGridSystemTopic",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSystemTopic",
        "displayName": "Deploy Diagnostic Settings for Event Grid System Topic to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.EventGrid/systemTopics"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.EventGrid/systemTopics/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "DeliveryFailures",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs-to-LA": {
        "metadata": {
          "deprecated": true,
          "supersededBy": "e920df7f-9a64-4066-9b58-52684c02a091",
          "version": "1.1.0-deprecated",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "[Deprecated] Deprecated by built-in policy. Deploys NSG flow logs and traffic analytics to Log Analytics with a specified retention period. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/e920df7f-9a64-4066-9b58-52684c02a091.html",
        "name": "Deploy-Nsg-FlowLogs-to-LA",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs-to-LA",
        "displayName": "[Deprecated] Deploys NSG flow logs and traffic analytics to Log Analytics",
        "parameters": {
          "retention": {
            "type": "Integer",
            "metadata": {
              "displayName": "Retention"
            },
            "defaultValue": 5
          },
          "interval": {
            "type": "Integer",
            "metadata": {
              "displayName": "Traffic Analytics processing interval mins (10/60)"
            },
            "defaultValue": 60
          },
          "workspace": {
            "type": "String",
            "metadata": {
              "strongType": "omsWorkspace",
              "displayName": "Resource ID of Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
            },
            "defaultValue": "<workspace resource ID>"
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Network/networkSecurityGroups"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Network/networkWatchers/flowlogs",
              "name": "[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id'))), 'null/null', concat(split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[8], '/', split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[10]))]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Network/networkWatchers/flowLogs/enabled",
                    "equals": "true"
                  }
                ]
              },
              "existenceScope": "resourceGroup",
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "resourceGroupName": "[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs'))), 'NetworkWatcherRG', split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[4])]",
              "deploymentScope": "subscription",
              "deployment": {
                "location": "northeurope",
                "properties": {
                  "mode": "Incremental",
                  "parameters": {
                    "location": {
                      "value": "[field('location')]"
                    },
                    "networkSecurityGroup": {
                      "value": "[field('id')]"
                    },
                    "workspace": {
                      "value": "[parameters('workspace')]"
                    },
                    "retention": {
                      "value": "[parameters('retention')]"
                    },
                    "interval": {
                      "value": "[parameters('interval')]"
                    }
                  },
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "location": {
                        "type": "String"
                      },
                      "networkSecurityGroup": {
                        "type": "String"
                      },
                      "workspace": {
                        "type": "String"
                      },
                      "retention": {
                        "type": "int"
                      },
                      "interval": {
                        "type": "int"
                      },
                      "time": {
                        "type": "String",
                        "defaultValue": "[utcNow()]"
                      }
                    },
                    "variables": {
                      "resourceGroupName": "[split(parameters('networkSecurityGroup'), '/')[4]]",
                      "securityGroupName": "[split(parameters('networkSecurityGroup'), '/')[8]]",
                      "storageAccountName": "[concat('es', uniqueString(variables('securityGroupName'), parameters('time')))]"
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2019-10-01",
                        "name": "[concat(variables('resourceGroupName'), '.', variables('securityGroupName'))]",
                        "resourceGroup": "[variables('resourceGroupName')]",
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "resources": [
                              {
                                "type": "Microsoft.Storage/storageAccounts",
                                "apiVersion": "2019-06-01",
                                "name": "[variables('storageAccountName')]",
                                "location": "[parameters('location')]",
                                "properties": {},
                                "kind": "StorageV2",
                                "sku": {
                                  "name": "Standard_LRS",
                                  "tier": "Standard"
                                }
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2019-10-01",
                        "name": "[concat('NetworkWatcherRG', '.', variables('securityGroupName'))]",
                        "resourceGroup": "NetworkWatcherRG",
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "resources": [
                              {
                                "type": "Microsoft.Network/networkWatchers",
                                "apiVersion": "2020-05-01",
                                "name": "[concat('NetworkWatcher_', toLower(parameters('location')))]",
                                "location": "[parameters('location')]",
                                "properties": {},
                                "resources": [
                                  {
                                    "type": "flowLogs",
                                    "apiVersion": "2019-11-01",
                                    "name": "[concat(variables('securityGroupName'), '-Network-flowlog')]",
                                    "location": "[parameters('location')]",
                                    "properties": {
                                      "enabled": true,
                                      "format": {
                                        "type": "JSON",
                                        "version": 2
                                      },
                                      "retentionPolicy": {
                                        "days": "[parameters('retention')]",
                                        "enabled": true
                                      },
                                      "flowAnalyticsConfiguration": {
                                        "networkWatcherFlowAnalyticsConfiguration": {
                                          "enabled": true,
                                          "trafficAnalyticsInterval": "[parameters('interval')]",
                                          "workspaceResourceId": "[parameters('workspace')]"
                                        }
                                      },
                                      "storageId": "[concat(subscription().id, '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                                      "targetResourceId": "[parameters('networkSecurityGroup')]"
                                    },
                                    "dependsOn": [
                                      "[concat('NetworkWatcher_', toLower(parameters('location')))]"
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "dependsOn": [
                          "[concat(variables('resourceGroupName'), '.', variables('securityGroupName'))]"
                        ]
                      }
                    ],
                    "outputs": {}
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceFunctionApp-http": {
        "metadata": {
          "version": "1.0.0",
          "category": "App Service",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks.",
        "name": "Deny-AppServiceFunctionApp-http",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceFunctionApp-http",
        "displayName": "Function App should only be accessible over HTTPS",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/sites"
              },
              {
                "field": "kind",
                "like": "functionapp*"
              },
              {
                "field": "Microsoft.Web/sites/httpsOnly",
                "equals": "false"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-FirewallPolicy": {
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys Azure Firewall Manager policy in subscription where the policy is assigned.",
        "name": "Deploy-FirewallPolicy",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-FirewallPolicy",
        "displayName": "Deploy Azure Firewall Manager policy in the subscription",
        "parameters": {
          "fwpolicy": {
            "type": "Object",
            "metadata": {
              "displayName": "fwpolicy",
              "description": "Object describing Azure Firewall Policy"
            },
            "defaultValue": {}
          },
          "fwPolicyRegion": {
            "type": "String",
            "metadata": {
              "displayName": "fwPolicyRegion",
              "description": "Select Azure region for Azure Firewall Policy",
              "strongType": "location"
            }
          },
          "rgName": {
            "type": "String",
            "metadata": {
              "displayName": "rgName",
              "description": "Provide name for resource group."
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Resources/subscriptions"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Network/firewallPolicies",
              "deploymentScope": "subscription",
              "existenceScope": "resourceGroup",
              "resourceGroupName": "[parameters('rgName')]",
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "deployment": {
                "location": "northeurope",
                "properties": {
                  "mode": "Incremental",
                  "parameters": {
                    "rgName": {
                      "value": "[parameters('rgName')]"
                    },
                    "fwPolicy": {
                      "value": "[parameters('fwPolicy')]"
                    },
                    "fwPolicyRegion": {
                      "value": "[parameters('fwPolicyRegion')]"
                    }
                  },
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "rgName": {
                        "type": "String"
                      },
                      "fwPolicy": {
                        "type": "object"
                      },
                      "fwPolicyRegion": {
                        "type": "String"
                      }
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Resources/resourceGroups",
                        "apiVersion": "2018-05-01",
                        "name": "[parameters('rgName')]",
                        "location": "[deployment().location]",
                        "properties": {}
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2018-05-01",
                        "name": "fwpolicies",
                        "resourceGroup": "[parameters('rgName')]",
                        "dependsOn": [
                          "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
                            "contentVersion": "1.0.0.0",
                            "parameters": {},
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.Network/firewallPolicies",
                                "apiVersion": "2019-09-01",
                                "name": "[parameters('fwpolicy').firewallPolicyName]",
                                "location": "[parameters('fwpolicy').location]",
                                "dependsOn": [],
                                "tags": {},
                                "properties": {},
                                "resources": [
                                  {
                                    "type": "ruleGroups",
                                    "apiVersion": "2019-09-01",
                                    "name": "[parameters('fwpolicy').ruleGroups.name]",
                                    "dependsOn": [
                                      "[resourceId('Microsoft.Network/firewallPolicies',parameters('fwpolicy').firewallPolicyName)]"
                                    ],
                                    "properties": {
                                      "priority": "[parameters('fwpolicy').ruleGroups.properties.priority]",
                                      "rules": "[parameters('fwpolicy').ruleGroups.properties.rules]"
                                    }
                                  }
                                ]
                              }
                            ],
                            "outputs": {}
                          }
                        }
                      }
                    ],
                    "outputs": {}
                  }
                }
              }
            }
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TrafficManager": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Traffic Manager to stream to a Log Analytics workspace when any Traffic Manager which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-TrafficManager",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TrafficManager",
        "displayName": "Deploy Diagnostic Settings for Traffic Manager to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/trafficManagerProfiles"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/trafficManagerProfiles/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "ProbeHealthStatusEvents",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-HDInsight": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for HDInsight to stream to a Log Analytics workspace when any HDInsight which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-HDInsight",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-HDInsight",
        "displayName": "Deploy Diagnostic Settings for HDInsight to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.HDInsight/clusters"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.HDInsight/clusters/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MediaService": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Azure Media Service to stream to a Log Analytics workspace when any Azure Media Service which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-MediaService",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MediaService",
        "displayName": "Deploy Diagnostic Settings for Azure Media Service to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Media/mediaServices"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Media/mediaServices/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "KeyDeliveryRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MySql-http": {
        "metadata": {
          "version": "1.0.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Deny-MySql-http",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MySql-http",
        "displayName": "MySQL database servers enforce SSL connections.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_0",
              "TLS1_1",
              "TLSEnforcementDisabled"
            ],
            "metadata": {
              "displayName": "Select version minimum TLS for MySQL server",
              "description": "Select version  minimum TLS version Azure Database for MySQL server to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.DBforMySQL/servers"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.DBforMySQL/servers/sslEnforcement",
                    "exists": "false"
                  },
                  {
                    "field": "Microsoft.DBforMySQL/servers/sslEnforcement",
                    "notEquals": "Enabled"
                  },
                  {
                    "field": "Microsoft.DBforMySQL/servers/minimalTlsVersion",
                    "notequals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-AzureHybridBenefit": {
        "metadata": {
          "version": "1.0.0",
          "category": "Cost Optimization",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Optimize cost by enabling Azure Hybrid Benefit. Leverage this Policy definition as a cost control to reveal Virtual Machines not using AHUB.",
        "name": "Audit-AzureHybridBenefit",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-AzureHybridBenefit",
        "displayName": "Audit AHUB for eligible VMs",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "defaultValue": "Audit"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "in": [
                  "Microsoft.Compute/virtualMachines",
                  "Microsoft.Compute/virtualMachineScaleSets"
                ]
              },
              {
                "equals": "MicrosoftWindowsServer",
                "field": "Microsoft.Compute/imagePublisher"
              },
              {
                "equals": "WindowsServer",
                "field": "Microsoft.Compute/imageOffer"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Compute/imageSKU",
                    "like": "2008-R2-SP1*"
                  },
                  {
                    "field": "Microsoft.Compute/imageSKU",
                    "like": "2012-*"
                  },
                  {
                    "field": "Microsoft.Compute/imageSKU",
                    "like": "2016-*"
                  },
                  {
                    "field": "Microsoft.Compute/imageSKU",
                    "like": "2019-*"
                  },
                  {
                    "field": "Microsoft.Compute/imageSKU",
                    "like": "2022-*"
                  }
                ]
              },
              {
                "field": "Microsoft.Compute/licenseType",
                "notEquals": "Windows_Server"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Budget": {
        "metadata": {
          "version": "1.1.0",
          "category": "Budget",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy a default budget on all subscriptions under the assigned scope",
        "name": "Deploy-Budget",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Budget",
        "displayName": "Deploy a default budget on all subscriptions under the assigned scope",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "AuditIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "description": "Enable or disable the execution of the policy"
            }
          },
          "budgetName": {
            "type": "String",
            "defaultValue": "budget-set-by-policy",
            "metadata": {
              "description": "The name for the budget to be created"
            }
          },
          "amount": {
            "type": "String",
            "defaultValue": "1000",
            "metadata": {
              "description": "The total amount of cost or usage to track with the budget"
            }
          },
          "timeGrain": {
            "type": "String",
            "defaultValue": "Monthly",
            "allowedValues": [
              "Monthly",
              "Quarterly",
              "Annually",
              "BillingMonth",
              "BillingQuarter",
              "BillingAnnual"
            ],
            "metadata": {
              "description": "The time covered by a budget. Tracking of the amount will be reset based on the time grain."
            }
          },
          "firstThreshold": {
            "type": "String",
            "defaultValue": "90",
            "metadata": {
              "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
            }
          },
          "secondThreshold": {
            "type": "String",
            "defaultValue": "100",
            "metadata": {
              "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
            }
          },
          "contactRoles": {
            "type": "Array",
            "defaultValue": [
              "Owner",
              "Contributor"
            ],
            "metadata": {
              "description": "The list of contact RBAC roles, in an array, to send the budget notification to when the threshold is exceeded."
            }
          },
          "contactEmails": {
            "type": "Array",
            "defaultValue": [],
            "metadata": {
              "description": "The list of email addresses, in an array, to send the budget notification to when the threshold is exceeded."
            }
          },
          "contactGroups": {
            "type": "Array",
            "defaultValue": [],
            "metadata": {
              "description": "The list of action groups, in an array, to send the budget notification to when the threshold is exceeded. It accepts array of strings."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Resources/subscriptions"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Consumption/budgets",
              "deploymentScope": "subscription",
              "existenceScope": "subscription",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Consumption/budgets/amount",
                    "equals": "[parameters('amount')]"
                  },
                  {
                    "field": "Microsoft.Consumption/budgets/timeGrain",
                    "equals": "[parameters('timeGrain')]"
                  },
                  {
                    "field": "Microsoft.Consumption/budgets/category",
                    "equals": "Cost"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "deployment": {
                "location": "northeurope",
                "properties": {
                  "mode": "Incremental",
                  "parameters": {
                    "budgetName": {
                      "value": "[parameters('budgetName')]"
                    },
                    "amount": {
                      "value": "[parameters('amount')]"
                    },
                    "timeGrain": {
                      "value": "[parameters('timeGrain')]"
                    },
                    "firstThreshold": {
                      "value": "[parameters('firstThreshold')]"
                    },
                    "secondThreshold": {
                      "value": "[parameters('secondThreshold')]"
                    },
                    "contactEmails": {
                      "value": "[parameters('contactEmails')]"
                    },
                    "contactRoles": {
                      "value": "[parameters('contactRoles')]"
                    },
                    "contactGroups": {
                      "value": "[parameters('contactGroups')]"
                    }
                  },
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "budgetName": {
                        "type": "String"
                      },
                      "amount": {
                        "type": "String"
                      },
                      "timeGrain": {
                        "type": "String"
                      },
                      "firstThreshold": {
                        "type": "String"
                      },
                      "secondThreshold": {
                        "type": "String"
                      },
                      "contactEmails": {
                        "type": "Array"
                      },
                      "contactRoles": {
                        "type": "Array"
                      },
                      "contactGroups": {
                        "type": "Array"
                      },
                      "startDate": {
                        "type": "String",
                        "defaultValue": "[concat(utcNow('MM'), '/01/', utcNow('yyyy'))]"
                      }
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Consumption/budgets",
                        "apiVersion": "2019-10-01",
                        "name": "[parameters('budgetName')]",
                        "properties": {
                          "timePeriod": {
                            "startDate": "[parameters('startDate')]"
                          },
                          "timeGrain": "[parameters('timeGrain')]",
                          "amount": "[parameters('amount')]",
                          "category": "Cost",
                          "notifications": {
                            "NotificationForExceededBudget1": {
                              "enabled": true,
                              "operator": "GreaterThan",
                              "threshold": "[parameters('firstThreshold')]",
                              "contactEmails": "[parameters('contactEmails')]",
                              "contactRoles": "[parameters('contactRoles')]",
                              "contactGroups": "[parameters('contactGroups')]"
                            },
                            "NotificationForExceededBudget2": {
                              "enabled": true,
                              "operator": "GreaterThan",
                              "threshold": "[parameters('secondThreshold')]",
                              "contactEmails": "[parameters('contactEmails')]",
                              "contactRoles": "[parameters('contactRoles')]",
                              "contactGroups": "[parameters('contactGroups')]"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Website": {
        "metadata": {
          "version": "1.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Web App to stream to a Log Analytics workspace when any Web App which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-Website",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Website",
        "displayName": "Deploy Diagnostic Settings for App Service to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/sites"
              },
              {
                "value": "[field('kind')]",
                "notContains": "functionapp"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "[parameters('logsEnabled')]"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "[parameters('metricsEnabled')]"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      },
                      "serverFarmId": {
                        "type": "String"
                      }
                    },
                    "variables": {
                      "logs": {
                        "premiumTierLogs": [
                          {
                            "category": "AppServiceAntivirusScanAuditLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceHTTPLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceConsoleLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceAppLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceFileAuditLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceAuditLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceIPSecAuditLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServicePlatformLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          }
                        ],
                        "otherTierLogs": [
                          {
                            "category": "AppServiceHTTPLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceConsoleLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceAppLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceAuditLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServiceIPSecAuditLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          },
                          {
                            "category": "AppServicePlatformLogs",
                            "enabled": "[parameters('logsEnabled')]"
                          }
                        ]
                      }
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Web/sites/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": "[if(startsWith(reference(parameters('serverFarmId'), '2021-03-01', 'Full').sku.tier, 'Premium'), variables('logs').premiumTierLogs, variables('logs').otherTierLogs)]"
                        }
                      }
                    ],
                    "outputs": {
                      "policy": {
                        "type": "string",
                        "value": "[concat(parameters('logAnalytics'), 'configured for diagnostic logs for ', ': ', parameters('resourceName'))]"
                      }
                    }
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    },
                    "serverFarmId": {
                      "value": "[field('Microsoft.Web/sites/serverFarmId')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Vm-autoShutdown": {
        "metadata": {
          "version": "1.0.0",
          "category": "Compute",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys an auto shutdown schedule to a virtual machine",
        "name": "Deploy-Vm-autoShutdown",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Vm-autoShutdown",
        "displayName": "Deploy Virtual Machine Auto Shutdown Schedule",
        "parameters": {
          "time": {
            "type": "String",
            "metadata": {
              "displayName": "Scheduled Shutdown Time",
              "description": "Daily Scheduled shutdown time. i.e. 2300 = 11:00 PM"
            },
            "defaultValue": "0000"
          },
          "timeZoneId": {
            "type": "string",
            "defaultValue": "UTC",
            "metadata": {
              "displayName": "Time zone",
              "description": "The time zone ID (e.g. Pacific Standard time)."
            }
          },
          "EnableNotification": {
            "type": "string",
            "defaultValue": "Disabled",
            "metadata": {
              "displayName": "Send Notification before auto-shutdown",
              "description": "If notifications are enabled for this schedule (i.e. Enabled, Disabled)."
            },
            "allowedValues": [
              "Disabled",
              "Enabled"
            ]
          },
          "NotificationEmailRecipient": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "Email Address",
              "description": "Email address to be used for notification"
            }
          },
          "NotificationWebhookUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "Webhook URL",
              "description": "A notification will be posted to the specified webhook endpoint when the auto-shutdown is about to happen."
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Compute/virtualMachines"
          },
          "then": {
            "effect": "deployIfNotExists",
            "details": {
              "type": "Microsoft.DevTestLab/schedules",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.DevTestLab/schedules/taskType",
                    "equals": "ComputeVmShutdownTask"
                  },
                  {
                    "field": "Microsoft.DevTestLab/schedules/targetResourceId",
                    "equals": "[concat(resourceGroup().id,'/providers/Microsoft.Compute/virtualMachines/',field('name'))]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
              ],
              "deployment": {
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "vmName": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "time": {
                        "type": "string",
                        "defaultValue": "",
                        "metadata": {
                          "description": "Daily Scheduled shutdown time. i.e. 2300 = 11:00 PM"
                        }
                      },
                      "timeZoneId": {
                        "type": "string",
                        "defaultValue": "",
                        "metadata": {
                          "description": "The time zone ID (e.g. Pacific Standard time)."
                        }
                      },
                      "EnableNotification": {
                        "type": "string",
                        "defaultValue": "",
                        "metadata": {
                          "description": "If notifications are enabled for this schedule (i.e. Enabled, Disabled)."
                        }
                      },
                      "NotificationEmailRecipient": {
                        "type": "string",
                        "defaultValue": "",
                        "metadata": {
                          "description": "Email address to be used for notification"
                        }
                      },
                      "NotificationWebhookUrl": {
                        "type": "string",
                        "defaultValue": "",
                        "metadata": {
                          "description": "A notification will be posted to the specified webhook endpoint when the auto-shutdown is about to happen."
                        }
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "name": "[concat('shutdown-computevm-',parameters('vmName'))]",
                        "type": "Microsoft.DevTestLab/schedules",
                        "location": "[parameters('location')]",
                        "apiVersion": "2018-09-15",
                        "properties": {
                          "status": "Enabled",
                          "taskType": "ComputeVmShutdownTask",
                          "dailyRecurrence": {
                            "time": "[parameters('time')]"
                          },
                          "timeZoneId": "[parameters('timeZoneId')]",
                          "notificationSettings": {
                            "status": "[parameters('EnableNotification')]",
                            "timeInMinutes": 30,
                            "webhookUrl": "[parameters('NotificationWebhookUrl')]",
                            "emailRecipient": "[parameters('NotificationEmailRecipient')]",
                            "notificationLocale": "en"
                          },
                          "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "time": {
                      "value": "[parameters('time')]"
                    },
                    "timeZoneId": {
                      "value": "[parameters('timeZoneId')]"
                    },
                    "EnableNotification": {
                      "value": "[parameters('EnableNotification')]"
                    },
                    "NotificationEmailRecipient": {
                      "value": "[parameters('NotificationEmailRecipient')]"
                    },
                    "NotificationWebhookUrl": {
                      "value": "[parameters('NotificationWebhookUrl')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGW-Without-WAF": {
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy enables you to restrict that Application Gateways is always deployed with WAF enabled",
        "name": "Deny-AppGW-Without-WAF",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGW-Without-WAF",
        "displayName": "Application Gateway should be deployed with WAF enabled",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Network/applicationGateways"
              },
              {
                "field": "Microsoft.Network/applicationGateways/sku.name",
                "notequals": "WAF_v2"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-http": {
        "metadata": {
          "version": "1.0.1",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Deny-PostgreSql-http",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-http",
        "displayName": "PostgreSQL database servers enforce SSL connection.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_0",
              "TLS1_1",
              "TLSEnforcementDisabled"
            ],
            "metadata": {
              "displayName": "Select version minimum TLS for PostgreSQL server",
              "description": "Select version  minimum TLS version Azure Database for PostgreSQL server to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.DBforPostgreSQL/servers"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.DBforPostgreSQL/servers/sslEnforcement",
                    "exists": "false"
                  },
                  {
                    "field": "Microsoft.DBforPostgreSQL/servers/sslEnforcement",
                    "notEquals": "Enabled"
                  },
                  {
                    "field": "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion",
                    "notequals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg": {
        "metadata": {
          "version": "2.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of a subnet without a Network Security Group. NSG help to protect traffic across subnet-level.",
        "name": "Deny-Subnet-Without-Nsg",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg",
        "displayName": "Subnets should have a Network Security Group",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "excludedSubnets": {
            "type": "Array",
            "metadata": {
              "displayName": "Excluded Subnets",
              "description": "Array of subnet names that are excluded from this policy"
            },
            "defaultValue": [
              "GatewaySubnet",
              "AzureFirewallSubnet",
              "AzureFirewallManagementSubnet"
            ]
          }
        },
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "equals": "Microsoft.Network/virtualNetworks",
                    "field": "type"
                  },
                  {
                    "count": {
                      "field": "Microsoft.Network/virtualNetworks/subnets[*]",
                      "where": {
                        "allOf": [
                          {
                            "exists": "false",
                            "field": "Microsoft.Network/virtualNetworks/subnets[*].networkSecurityGroup.id"
                          },
                          {
                            "field": "Microsoft.Network/virtualNetworks/subnets[*].name",
                            "notIn": "[parameters('excludedSubnets')]"
                          }
                        ]
                      }
                    },
                    "notEquals": 0
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/virtualNetworks/subnets"
                  },
                  {
                    "field": "name",
                    "notIn": "[parameters('excludedSubnets')]"
                  },
                  {
                    "field": "Microsoft.Network/virtualNetworks/subnets/networkSecurityGroup.id",
                    "exists": "false"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VWanS2SVPNGW": {
        "metadata": {
          "version": "1.0.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for VWAN S2S VPN Gateway to stream to a Log Analytics workspace when any VWAN S2S VPN Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled.",
        "name": "Deploy-Diagnostics-VWanS2SVPNGW",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VWanS2SVPNGW",
        "displayName": "Deploy Diagnostic Settings for VWAN S2S VPN Gateway to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/vpnGateways"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/vpnGateways/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "GatewayDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "IKEDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "RouteDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "TunnelDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-minTLS": {
        "metadata": {
          "version": "1.0.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Setting minimal TLS version to 1.2 improves security by ensuring your SQL Managed Instance can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not reccomended since they have well documented security vunerabilities.",
        "name": "Deny-SqlMi-minTLS",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-minTLS",
        "displayName": "SQL Managed Instance should have the minimal TLS version set to the highest version",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Audit"
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.1",
              "1.0"
            ],
            "metadata": {
              "displayName": "Select version for SQL server",
              "description": "Select version minimum TLS version SQL servers to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Sql/managedInstances"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Sql/managedInstances/minimalTlsVersion",
                    "exists": "false"
                  },
                  {
                    "field": "Microsoft.Sql/managedInstances/minimalTlsVersion",
                    "notequals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-latestTLS": {
        "metadata": {
          "version": "1.1.0",
          "category": "App Service",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Append the AppService sites object to ensure that min Tls version is set to required minimum TLS version. Please note Append does not enforce compliance use then deny.",
        "name": "Append-AppService-latestTLS",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-latestTLS",
        "displayName": "AppService append sites with minimum TLS version to enforce.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "minTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.0",
              "1.1"
            ],
            "metadata": {
              "displayName": "Select version minimum TLS Web App config",
              "description": "Select version  minimum TLS version for a  Web App config to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "Microsoft.Web/sites/config/minTlsVersion",
                "exists": "true"
              },
              {
                "field": "Microsoft.Web/sites/config/minTlsVersion",
                "notEquals": "[parameters('minTlsVersion')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": [
              {
                "field": "Microsoft.Web/sites/config/minTlsVersion",
                "value": "[parameters('minTlsVersion')]"
              }
            ]
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceWebApp-http": {
        "metadata": {
          "version": "1.0.0",
          "category": "App Service",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks.",
        "name": "Deny-AppServiceWebApp-http",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceWebApp-http",
        "displayName": "Web Application should only be accessible over HTTPS",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/sites"
              },
              {
                "field": "kind",
                "like": "app*"
              },
              {
                "field": "Microsoft.Web/sites/httpsOnly",
                "equals": "false"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-SQL-DCR-Association": {
        "metadata": {
          "version": "1.0.0",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Configure association between Arc-enabled SQL Servers and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this Arc-enabled SQL Servers.",
        "name": "Deploy-MDFC-Arc-SQL-DCR-Association",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-SQL-DCR-Association",
        "displayName": "Configure Arc-enabled SQL Servers with Data Collection Rule Association to Microsoft Defender for SQL user-defined DCR",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "workspaceRegion": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace region",
              "description": "Region of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "location"
            }
          },
          "dcrName": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Name",
              "description": "Name of the Data Collection Rule."
            }
          },
          "dcrResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Resource Group",
              "description": "Resource Group of the Data Collection Rule."
            }
          },
          "dcrId": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Id",
              "description": "Id of the Data Collection Rule."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.HybridCompute/machines"
              },
              {
                "field": "Microsoft.HybridCompute/machines/osName",
                "equals": "Windows"
              },
              {
                "field": "Microsoft.HybridCompute/machines/mssqlDiscovered",
                "equals": "true"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
              "name": "MicrosoftDefenderForSQL-RulesAssociation",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceGroup": {
                        "type": "string"
                      },
                      "vmName": {
                        "type": "string"
                      },
                      "workspaceRegion": {
                        "type": "string"
                      },
                      "dcrName": {
                        "type": "string"
                      },
                      "dcrResourceGroup": {
                        "type": "string"
                      },
                      "dcrId": {
                        "type": "string"
                      }
                    },
                    "variables": {
                      "locationLongNameToShortMap": {
                        "australiacentral": "CAU",
                        "australiaeast": "EAU",
                        "australiasoutheast": "SEAU",
                        "brazilsouth": "CQ",
                        "canadacentral": "CCA",
                        "canadaeast": "CCA",
                        "centralindia": "CIN",
                        "centralus": "CUS",
                        "eastasia": "EA",
                        "eastus2euap": "eus2p",
                        "eastus": "EUS",
                        "eastus2": "EUS2",
                        "francecentral": "PAR",
                        "germanywestcentral": "DEWC",
                        "japaneast": "EJP",
                        "jioindiawest": "CIN",
                        "koreacentral": "SE",
                        "koreasouth": "SE",
                        "northcentralus": "NCUS",
                        "northeurope": "NEU",
                        "norwayeast": "NOE",
                        "southafricanorth": "JNB",
                        "southcentralus": "SCUS",
                        "southeastasia": "SEA",
                        "southindia": "CIN",
                        "swedencentral": "SEC",
                        "switzerlandnorth": "CHN",
                        "switzerlandwest": "CHW",
                        "uaenorth": "DXB",
                        "uksouth": "SUK",
                        "ukwest": "WUK",
                        "westcentralus": "WCUS",
                        "westeurope": "WEU",
                        "westindia": "CIN",
                        "westus": "WUS",
                        "westus2": "WUS2"
                      },
                      "locationCode": "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "defaultRGName": "[parameters('resourceGroup')]",
                      "dcrName": "[parameters('dcrName')]",
                      "dcrId": "[parameters('dcrId')]",
                      "dcraName": "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                    },
                    "resources": [
                      {
                        "type": "Microsoft.HybridCompute/machines/providers/dataCollectionRuleAssociations",
                        "name": "[variables('dcraName')]",
                        "apiVersion": "2021-04-01",
                        "properties": {
                          "description": "Configure association between Arc-enabled SQL Server and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this Arc-enabled SQL Server.",
                          "dataCollectionRuleId": "[variables('dcrId')]"
                        }
                      }
                    ]
                  },
                  "parameters": {
                    "resourceGroup": {
                      "value": "[parameters('dcrResourceGroup')]"
                    },
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "workspaceRegion": {
                      "value": "[parameters('workspaceRegion')]"
                    },
                    "dcrName": {
                      "value": "[parameters('dcrName')]"
                    },
                    "dcrResourceGroup": {
                      "value": "[parameters('dcrResourceGroup')]"
                    },
                    "dcrId": {
                      "value": "[parameters('dcrId')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP": {
        "metadata": {
          "deprecated": true,
          "supersededBy": "6c112d4e-5bc7-47ae-a041-ea2d9dccd749",
          "version": "1.0.0-deprecated",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "[Deprecated] This policy denies creation of Public IPs under the assigned scope. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/6c112d4e-5bc7-47ae-a041-ea2d9dccd749.html using appropriate assignment parameters.",
        "name": "Deny-PublicIP",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP",
        "displayName": "[Deprecated] Deny the creation of public IP",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/publicIPAddresses"
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-httpsonly": {
        "metadata": {
          "version": "1.0.0",
          "category": "App Service",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Appends the AppService sites object to ensure that  HTTPS only is enabled for  server/service authentication and protects data in transit from network layer eavesdropping attacks. Please note Append does not enforce compliance use then deny.",
        "name": "Append-AppService-httpsonly",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-httpsonly",
        "displayName": "AppService append enable https only setting to enforce https setting.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/sites"
              },
              {
                "field": "Microsoft.Web/sites/httpsOnly",
                "notequals": true
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": [
              {
                "field": "Microsoft.Web/sites/httpsOnly",
                "value": true
              }
            ]
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-SecurityAlertPolicies": {
        "metadata": {
          "version": "1.1.1",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration",
        "name": "Deploy-Sql-SecurityAlertPolicies",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-SecurityAlertPolicies",
        "displayName": "Deploy SQL Database security Alert Policies configuration with email admin accounts",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "emailAddresses": {
            "type": "Array",
            "defaultValue": [
              "admin@contoso.com",
              "admin@fabrikam.com"
            ]
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Sql/servers/databases"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Sql/servers/databases/securityAlertPolicies",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Sql/servers/databases/securityAlertPolicies/state",
                    "equals": "Enabled"
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "location": {
                        "type": "String"
                      },
                      "sqlServerName": {
                        "type": "String"
                      },
                      "sqlServerDataBaseName": {
                        "type": "String"
                      },
                      "emailAddresses": {
                        "type": "Array"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "name": "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]",
                        "type": "Microsoft.Sql/servers/databases/securityAlertPolicies",
                        "apiVersion": "2018-06-01-preview",
                        "properties": {
                          "state": "Enabled",
                          "disabledAlerts": [
                            ""
                          ],
                          "emailAddresses": "[parameters('emailAddresses')]",
                          "emailAccountAdmins": true,
                          "storageEndpoint": null,
                          "storageAccountAccessKey": "",
                          "retentionDays": 0
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "location": {
                      "value": "[field('location')]"
                    },
                    "sqlServerName": {
                      "value": "[first(split(field('fullname'),'/'))]"
                    },
                    "sqlServerDataBaseName": {
                      "value": "[field('name')]"
                    },
                    "emailAddresses": {
                      "value": "[parameters('emailAddresses')]"
                    }
                  }
                }
              },
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3"
              ]
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLMI": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for SQL Managed Instances to stream to a Log Analytics workspace when any SQL Managed Instances which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-SQLMI",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLMI",
        "displayName": "Deploy Diagnostic Settings for SQL Managed Instances to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Sql/managedInstances"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Sql/managedInstances/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "logs": [
                            {
                              "category": "ResourceUsageStats",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "SQLSecurityAuditEvents",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DevOpsOperationsAudit",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-iotHub": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for IoT Hub to stream to a Log Analytics workspace when any IoT Hub which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-iotHub",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-iotHub",
        "displayName": "Deploy Diagnostic Settings for IoT Hub to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Devices/IotHubs"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Devices/IotHubs/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "Connections",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DeviceTelemetry",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "C2DCommands",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DeviceIdentityOperations",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "FileUploadOperations",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Routes",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "D2CTwinOperations",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "C2DTwinOperations",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "TwinQueries",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "JobsOperations",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DirectMethods",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DistributedTracing",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Configurations",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "DeviceStreams",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-UserAssignedManagedIdentity-VMInsights": {
        "metadata": {
          "version": "1.0.0",
          "category": "Managed Identity",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Create and assign a User Assigned Managed Identity to Virtual Machines for VM Insights",
        "name": "Deploy-UserAssignedManagedIdentity-VMInsights",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-UserAssignedManagedIdentity-VMInsights",
        "displayName": "Deploy User Assigned Managed Identity for VM Insights",
        "parameters": {
          "bringYourOwnUserAssignedManagedIdentity": {
            "type": "Boolean",
            "metadata": {
              "displayName": "Bring Your Own User-Assigned Identity",
              "description": "Enable this to use your pre-created user-assigned managed identity. The pre-created identity MUST exist within the subscription otherwise the policy deployment will fail. If enabled, ensure that the User-Assigned Identity Name and Identity Resource Group Name parameters match the pre-created identity. If not enabled, the policy will create per subscription, per resource user-assigned managed identities in a new resource group named 'Built-In-Identity-RG'."
            },
            "allowedValues": [
              true,
              false
            ]
          },
          "userAssignedIdentityName": {
            "type": "String",
            "metadata": {
              "displayName": "User-Assigned Managed Identity Name",
              "description": "The name of the pre-created user-assigned managed identity."
            },
            "defaultValue": ""
          },
          "identityResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "User-Assigned Managed Identity Resource Group Name",
              "description": "The resource group in which the pre-created user-assigned managed identity resides."
            },
            "defaultValue": ""
          },
          "builtInIdentityResourceGroupLocation": {
            "type": "String",
            "metadata": {
              "displayName": "Built-In-Identity-RG Location",
              "description": "The location of the resource group 'Built-In-Identity-RG' created by the policy. This parameter is only used when 'Bring Your Own User Assigned Identity' parameter is false."
            },
            "defaultValue": "eastus"
          },
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Policy Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match."
            },
            "allowedValues": [
              "AuditIfNotExists",
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Compute/virtualMachines"
              },
              {
                "value": "[requestContext().apiVersion]",
                "greaterOrEquals": "2018-10-01"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Compute/virtualMachines",
              "name": "[field('name')]",
              "evaluationDelay": "AfterProvisioning",
              "deploymentScope": "subscription",
              "existenceCondition": {
                "anyOf": [
                  {
                    "allOf": [
                      {
                        "field": "identity.type",
                        "contains": "UserAssigned"
                      },
                      {
                        "field": "identity.userAssignedIdentities",
                        "containsKey": "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('userAssignedIdentityName'))), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/Built-In-Identity-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Built-In-Identity-', field('location')))]"
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "field": "identity.type",
                        "equals": "UserAssigned"
                      },
                      {
                        "value": "[string(length(field('identity.userAssignedIdentities')))]",
                        "equals": "1"
                      }
                    ]
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "deployment": {
                "location": "eastus",
                "properties": {
                  "mode": "incremental",
                  "parameters": {
                    "bringYourOwnUserAssignedManagedIdentity": {
                      "value": "[parameters('bringYourOwnUserAssignedManagedIdentity')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "uaName": {
                      "value": "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), parameters('userAssignedIdentityName'), 'Built-In-Identity')]"
                    },
                    "identityResourceGroup": {
                      "value": "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), parameters('identityResourceGroup'), 'Built-In-Identity-RG')]"
                    },
                    "builtInIdentityResourceGroupLocation": {
                      "value": "[parameters('builtInIdentityResourceGroupLocation')]"
                    },
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "vmResourceGroup": {
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "value": "[field('id')]"
                    }
                  },
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.1",
                    "parameters": {
                      "bringYourOwnUserAssignedManagedIdentity": {
                        "type": "bool"
                      },
                      "location": {
                        "type": "string"
                      },
                      "uaName": {
                        "type": "string"
                      },
                      "identityResourceGroup": {
                        "type": "string"
                      },
                      "builtInIdentityResourceGroupLocation": {
                        "type": "string"
                      },
                      "vmName": {
                        "type": "string"
                      },
                      "vmResourceGroup": {
                        "type": "string"
                      },
                      "resourceId": {
                        "type": "string"
                      }
                    },
                    "variables": {
                      "uaNameWithLocation": "[concat(parameters('uaName'),'-', parameters('location'))]",
                      "precreatedUaId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('uaName')))]",
                      "autocreatedUaId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('uaName')), '-', parameters('location'))]",
                      "deployUALockName": "[concat('deployUALock-', uniqueString(deployment().name))]",
                      "deployUAName": "[concat('deployUA-', uniqueString(deployment().name))]",
                      "deployGetResourceProperties": "[concat('deployGetResourceProperties-', uniqueString(deployment().name))]",
                      "deployAssignUAName": "[concat('deployAssignUA-', uniqueString(deployment().name))]"
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Resources/resourceGroups",
                        "apiVersion": "2020-06-01",
                        "name": "[parameters('identityResourceGroup')]",
                        "location": "[parameters('builtInIdentityResourceGroupLocation')]"
                      },
                      {
                        "condition": "[parameters('bringYourOwnUserAssignedManagedIdentity')]",
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2020-06-01",
                        "name": "[variables('deployUALockName')]",
                        "resourceGroup": "[parameters('identityResourceGroup')]",
                        "dependsOn": [
                          "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "uaName": {
                              "value": "[parameters('uaName')]"
                            },
                            "location": {
                              "value": "[parameters('location')]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "uaName": {
                                "type": "string"
                              },
                              "location": {
                                "type": "string"
                              }
                            },
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                                "name": "[parameters('uaName')]",
                                "apiVersion": "2018-11-30",
                                "location": "[parameters('location')]"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "condition": "[not(parameters('bringYourOwnUserAssignedManagedIdentity'))]",
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2020-06-01",
                        "name": "[variables('deployUAName')]",
                        "resourceGroup": "[parameters('identityResourceGroup')]",
                        "dependsOn": [
                          "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "uaName": {
                              "value": "[variables('uaNameWithLocation')]"
                            },
                            "location": {
                              "value": "[parameters('location')]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "uaName": {
                                "type": "string"
                              },
                              "location": {
                                "type": "string"
                              }
                            },
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                                "name": "[parameters('uaName')]",
                                "apiVersion": "2018-11-30",
                                "location": "[parameters('location')]"
                              },
                              {
                                "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/locks",
                                "apiVersion": "2016-09-01",
                                "name": "[concat(parameters('uaName'), '/Microsoft.Authorization/', 'CanNotDeleteLock-', parameters('uaName'))]",
                                "dependsOn": [
                                  "[parameters('uaName')]"
                                ],
                                "properties": {
                                  "level": "CanNotDelete",
                                  "notes": "Please do not delete this User-Assigned Identity since extensions enabled by Azure Policy are relying on their existence."
                                }
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2020-06-01",
                        "name": "[variables('deployGetResourceProperties')]",
                        "location": "[parameters('location')]",
                        "dependsOn": [
                          "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                          "[variables('deployUAName')]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "resources": [],
                            "outputs": {
                              "resource": {
                                "type": "object",
                                "value": "[reference(parameters('resourceId'), '2019-07-01', 'Full')]"
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2020-06-01",
                        "name": "[concat(variables('deployAssignUAName'))]",
                        "resourceGroup": "[parameters('vmResourceGroup')]",
                        "dependsOn": [
                          "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                          "[variables('deployUAName')]",
                          "[variables('deployGetResourceProperties')]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "uaId": {
                              "value": "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), variables('precreatedUaId'), variables('autocreatedUaId'))]"
                            },
                            "vmName": {
                              "value": "[parameters('vmName')]"
                            },
                            "location": {
                              "value": "[parameters('location')]"
                            },
                            "identityType": {
                              "value": "[if(contains(reference(variables('deployGetResourceProperties')).outputs.resource.value, 'identity'), reference(variables('deployGetResourceProperties')).outputs.resource.value.identity.type, '')]"
                            },
                            "userAssignedIdentities": {
                              "value": "[if(and(contains(reference(variables('deployGetResourceProperties')).outputs.resource.value, 'identity'), contains(reference(variables('deployGetResourceProperties')).outputs.resource.value.identity, 'userAssignedIdentities')), reference(variables('deployGetResourceProperties')).outputs.resource.value.identity.userAssignedIdentities, createObject())]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "uaId": {
                                "type": "string"
                              },
                              "vmName": {
                                "type": "string"
                              },
                              "location": {
                                "type": "string"
                              },
                              "identityType": {
                                "type": "string"
                              },
                              "userAssignedIdentities": {
                                "type": "object"
                              }
                            },
                            "variables": {
                              "identityTypeValue": "[if(contains(parameters('identityType'), 'SystemAssigned'), 'SystemAssigned,UserAssigned', 'UserAssigned')]",
                              "userAssignedIdentitiesValue": "[union(parameters('userAssignedIdentities'), createObject(parameters('uaId'), createObject()))]",
                              "resourceWithSingleUAI": "[and(equals(parameters('identityType'), 'UserAssigned'), equals(string(length(parameters('userAssignedIdentities'))), '1'))]"
                            },
                            "resources": [
                              {
                                "condition": "[not(variables('resourceWithSingleUAI'))]",
                                "apiVersion": "2019-07-01",
                                "type": "Microsoft.Compute/virtualMachines",
                                "name": "[parameters('vmName')]",
                                "location": "[parameters('location')]",
                                "identity": {
                                  "type": "[variables('identityTypeValue')]",
                                  "userAssignedIdentities": "[variables('userAssignedIdentitiesValue')]"
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ExpressRoute": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for ExpressRoute to stream to a Log Analytics workspace when any ExpressRoute which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-ExpressRoute",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ExpressRoute",
        "displayName": "Deploy Diagnostic Settings for ExpressRoute to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/expressRouteCircuits"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/expressRouteCircuits/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "PeeringRouteLog",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-HbiWorkspace": {
        "metadata": {
          "version": "1.0.0",
          "category": "Machine Learning",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforces high business impact Azure Machine Learning workspaces.",
        "name": "Deny-MachineLearning-HbiWorkspace",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-HbiWorkspace",
        "displayName": "Enforces high business impact Azure Machine Learning Workspaces",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/hbiWorkspace",
                    "exists": false
                  },
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/hbiWorkspace",
                    "notEquals": true
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureKerberos": {
        "metadata": {
          "version": "1.0.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the use of insecure Kerberos ticket encryption (RC4-HMAC) when using File Services on a storage account.",
        "name": "Deny-FileServices-InsecureKerberos",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-FileServices-InsecureKerberos",
        "displayName": "File Services with insecure Kerberos ticket encryption should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          },
          "notAllowedKerberosTicketEncryption": {
            "type": "String",
            "defaultValue": "RC4-HMAC",
            "allowedValues": [
              "RC4-HMAC",
              "AES-256"
            ],
            "metadata": {
              "displayName": "Kerberos ticket encryption supported by server. Valid values are RC4-HMAC, AES-256.",
              "description": "The list of kerberosTicketEncryption not allowed."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts/fileServices"
              },
              {
                "field": "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.kerberosTicketEncryption",
                "contains": "[parameters('notAllowedKerberosTicketEncryption')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-AMA": {
        "metadata": {
          "version": "1.0.0",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Automate the deployment of Azure Monitor Agent extension on your Windows SQL Virtual Machines. Learn more: https://aka.ms/AMAOverview.",
        "name": "Deploy-MDFC-SQL-AMA",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-AMA",
        "displayName": "Configure SQL Virtual Machines to automatically install Azure Monitor Agent",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "identityResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "Identity Resource Group",
              "description": "The name of the resource group created by the policy."
            },
            "defaultValue": ""
          },
          "userAssignedIdentityName": {
            "type": "String",
            "metadata": {
              "displayName": "User Assigned Managed Identity Name",
              "description": "The name of the user assigned managed identity."
            },
            "defaultValue": ""
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Compute/virtualMachines"
              },
              {
                "field": "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType",
                "like": "Windows*"
              },
              {
                "field": "Microsoft.Compute/imagePublisher",
                "equals": "microsoftsqlserver"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "evaluationDelay": "AfterProvisioning",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
              ],
              "name": "[concat(field('fullName'), '/AzureMonitorWindowsAgent')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/type",
                    "equals": "AzureMonitorWindowsAgent"
                  },
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/publisher",
                    "equals": "Microsoft.Azure.Monitor"
                  },
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/provisioningState",
                    "in": [
                      "Succeeded",
                      "Provisioning succeeded"
                    ]
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "vmName": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "userAssignedManagedIdentity": {
                        "type": "string"
                      },
                      "userAssignedIdentityName": {
                        "type": "string"
                      },
                      "identityResourceGroup": {
                        "type": "string"
                      }
                    },
                    "variables": {
                      "extensionName": "AzureMonitorWindowsAgent",
                      "extensionPublisher": "Microsoft.Azure.Monitor",
                      "extensionType": "AzureMonitorWindowsAgent",
                      "extensionTypeHandlerVersion": "1.2"
                    },
                    "resources": [
                      {
                        "name": "[concat(parameters('vmName'), '/', variables('extensionName'))]",
                        "type": "Microsoft.Compute/virtualMachines/extensions",
                        "location": "[parameters('location')]",
                        "tags": {
                          "createdBy": "MicrosoftDefenderForSQL"
                        },
                        "apiVersion": "2023-03-01",
                        "properties": {
                          "publisher": "[variables('extensionPublisher')]",
                          "type": "[variables('extensionType')]",
                          "typeHandlerVersion": "[variables('extensionTypeHandlerVersion')]",
                          "autoUpgradeMinorVersion": true,
                          "enableAutomaticUpgrade": true,
                          "settings": {
                            "authentication": {
                              "managedIdentity": {
                                "identifier-name": "mi_res_id",
                                "identifier-value": "[parameters('userAssignedManagedIdentity')]"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "parameters": {
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "userAssignedManagedIdentity": {
                      "value": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('userAssignedIdentityName')))]"
                    },
                    "userAssignedIdentityName": {
                      "value": "[parameters('userAssignedIdentityName')]"
                    },
                    "identityResourceGroup": {
                      "value": "[parameters('identityResourceGroup')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VirtualNetwork": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-VirtualNetwork",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VirtualNetwork",
        "displayName": "Deploy Diagnostic Settings for Virtual Network to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/virtualNetworks"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/virtualNetworks/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "enabled": false,
                                "days": 0
                              }
                            }
                          ],
                          "logs": [
                            {
                              "category": "VMProtectionAlerts",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL-DCR": {
        "metadata": {
          "version": "1.0.1",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Microsoft Defender for SQL collects events from the agent and uses them to provide security alerts and tailored hardening tasks (recommendations). Create a resource group and a Data Collection Rule in the same region as the user-defined Log Analytics workspace.",
        "name": "Deploy-MDFC-SQL-DefenderSQL-DCR",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL-DCR",
        "displayName": "Configure SQL Virtual Machines to automatically install Microsoft Defender for SQL and DCR with a user-defined LA workspace",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "userWorkspaceResourceId": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace Resource Id",
              "description": "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "omsWorkspace"
            }
          },
          "workspaceRegion": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace region",
              "description": "Region of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "location"
            }
          },
          "enableCollectionOfSqlQueriesForSecurityResearch": {
            "type": "Boolean",
            "metadata": {
              "displayName": "Enable collection of SQL queries for security research",
              "description": "Enable or disable the collection of SQL queries for security research."
            },
            "allowedValues": [
              true,
              false
            ],
            "defaultValue": false
          },
          "dcrName": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Name",
              "description": "Name of the Data Collection Rule."
            }
          },
          "dcrResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Resource Group",
              "description": "Resource Group of the Data Collection Rule."
            }
          },
          "dcrId": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Id",
              "description": "Id of the Data Collection Rule."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Compute/virtualMachines"
              },
              {
                "field": "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType",
                "like": "Windows*"
              },
              {
                "field": "Microsoft.Compute/imagePublisher",
                "equals": "microsoftsqlserver"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/dataCollectionRules",
              "evaluationDelay": "AfterProvisioning",
              "deploymentScope": "subscription",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "existenceScope": "subscription",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "location",
                    "equals": "[parameters('workspaceRegion')]"
                  },
                  {
                    "field": "name",
                    "equals": "[parameters('dcrName')]"
                  }
                ]
              },
              "deployment": {
                "location": "eastus",
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceGroup": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "vmName": {
                        "type": "string"
                      },
                      "userWorkspaceResourceId": {
                        "type": "string"
                      },
                      "workspaceRegion": {
                        "type": "string"
                      },
                      "enableCollectionOfSqlQueriesForSecurityResearch": {
                        "type": "bool"
                      },
                      "dcrName": {
                        "type": "string"
                      },
                      "dcrResourceGroup": {
                        "type": "string"
                      },
                      "dcrId": {
                        "type": "string"
                      }
                    },
                    "variables": {
                      "locationLongNameToShortMap": {
                        "australiacentral": "CAU",
                        "australiaeast": "EAU",
                        "australiasoutheast": "SEAU",
                        "brazilsouth": "CQ",
                        "canadacentral": "CCA",
                        "canadaeast": "CCA",
                        "centralindia": "CIN",
                        "centralus": "CUS",
                        "eastasia": "EA",
                        "eastus2euap": "eus2p",
                        "eastus": "EUS",
                        "eastus2": "EUS2",
                        "francecentral": "PAR",
                        "germanywestcentral": "DEWC",
                        "japaneast": "EJP",
                        "jioindiawest": "CIN",
                        "koreacentral": "SE",
                        "koreasouth": "SE",
                        "northcentralus": "NCUS",
                        "northeurope": "NEU",
                        "norwayeast": "NOE",
                        "southafricanorth": "JNB",
                        "southcentralus": "SCUS",
                        "southeastasia": "SEA",
                        "southindia": "CIN",
                        "swedencentral": "SEC",
                        "switzerlandnorth": "CHN",
                        "switzerlandwest": "CHW",
                        "uaenorth": "DXB",
                        "uksouth": "SUK",
                        "ukwest": "WUK",
                        "westcentralus": "WCUS",
                        "westeurope": "WEU",
                        "westindia": "CIN",
                        "westus": "WUS",
                        "westus2": "WUS2"
                      },
                      "locationCode": "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "defaultRGName": "[parameters('dcrResourceGroup')]",
                      "defaultRGLocation": "[parameters('workspaceRegion')]",
                      "dcrName": "[parameters('dcrName')]",
                      "dcrId": "[parameters('dcrId')]",
                      "dcraName": "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]",
                      "deployDataCollectionRules": "[concat('deployDataCollectionRules-', uniqueString(deployment().name))]",
                      "deployDataCollectionRulesAssociation": "[concat('deployDataCollectionRulesAssociation-', uniqueString(deployment().name))]",
                      "deployDefenderForSQL": "[concat('deployDefenderForSQL-', uniqueString(deployment().name))]"
                    },
                    "resources": [
                      {
                        "condition": "[empty(parameters('dcrResourceGroup'))]",
                        "type": "Microsoft.Resources/resourceGroups",
                        "name": "[variables('defaultRGName')]",
                        "apiVersion": "2022-09-01",
                        "location": "[variables('defaultRGLocation')]",
                        "tags": {
                          "createdBy": "MicrosoftDefenderForSQL"
                        }
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "name": "[variables('deployDefenderForSQL')]",
                        "apiVersion": "2022-09-01",
                        "resourceGroup": "[parameters('resourceGroup')]",
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "location": {
                              "value": "[parameters('location')]"
                            },
                            "vmName": {
                              "value": "[parameters('vmName')]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "location": {
                                "type": "string"
                              },
                              "vmName": {
                                "type": "string"
                              }
                            },
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.Compute/virtualMachines/extensions",
                                "name": "[concat(parameters('vmName'), '/', 'MicrosoftDefenderForSQL')]",
                                "apiVersion": "2023-03-01",
                                "location": "[parameters('location')]",
                                "tags": {
                                  "createdBy": "MicrosoftDefenderForSQL"
                                },
                                "properties": {
                                  "publisher": "Microsoft.Azure.AzureDefenderForSQL",
                                  "type": "AdvancedThreatProtection.Windows",
                                  "typeHandlerVersion": "2.0",
                                  "autoUpgradeMinorVersion": true,
                                  "enableAutomaticUpgrade": true
                                }
                              }
                            ]
                          }
                        }
                      },
                      {
                        "condition": "[empty(parameters('dcrId'))]",
                        "type": "Microsoft.Resources/deployments",
                        "name": "[variables('deployDataCollectionRules')]",
                        "apiVersion": "2022-09-01",
                        "resourceGroup": "[variables('defaultRGName')]",
                        "dependsOn": [
                          "[variables('defaultRGName')]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "defaultRGLocation": {
                              "value": "[variables('defaultRGLocation')]"
                            },
                            "workspaceResourceId": {
                              "value": "[parameters('userWorkspaceResourceId')]"
                            },
                            "dcrName": {
                              "value": "[variables('dcrName')]"
                            },
                            "dcrId": {
                              "value": "[variables('dcrId')]"
                            },
                            "enableCollectionOfSqlQueriesForSecurityResearch": {
                              "value": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "defaultRGLocation": {
                                "type": "string"
                              },
                              "workspaceResourceId": {
                                "type": "string"
                              },
                              "dcrName": {
                                "type": "string"
                              },
                              "dcrId": {
                                "type": "string"
                              },
                              "enableCollectionOfSqlQueriesForSecurityResearch": {
                                "type": "bool"
                              }
                            },
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.Insights/dataCollectionRules",
                                "name": "[parameters('dcrName')]",
                                "apiVersion": "2021-04-01",
                                "location": "[parameters('defaultRGLocation')]",
                                "tags": {
                                  "createdBy": "MicrosoftDefenderForSQL"
                                },
                                "properties": {
                                  "description": "Data collection rule for Microsoft Defender for SQL. Deleting this rule will break the detection of security vulnerabilities.",
                                  "dataSources": {
                                    "extensions": [
                                      {
                                        "extensionName": "MicrosoftDefenderForSQL",
                                        "name": "MicrosoftDefenderForSQL",
                                        "streams": [
                                          "Microsoft-DefenderForSqlAlerts",
                                          "Microsoft-DefenderForSqlLogins",
                                          "Microsoft-DefenderForSqlTelemetry",
                                          "Microsoft-DefenderForSqlScanEvents",
                                          "Microsoft-DefenderForSqlScanResults"
                                        ],
                                        "extensionSettings": {
                                          "enableCollectionOfSqlQueriesForSecurityResearch": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                        }
                                      }
                                    ]
                                  },
                                  "destinations": {
                                    "logAnalytics": [
                                      {
                                        "workspaceResourceId": "[parameters('workspaceResourceId')]",
                                        "name": "LogAnalyticsDest"
                                      }
                                    ]
                                  },
                                  "dataFlows": [
                                    {
                                      "streams": [
                                        "Microsoft-DefenderForSqlAlerts",
                                        "Microsoft-DefenderForSqlLogins",
                                        "Microsoft-DefenderForSqlTelemetry",
                                        "Microsoft-DefenderForSqlScanEvents",
                                        "Microsoft-DefenderForSqlScanResults"
                                      ],
                                      "destinations": [
                                        "LogAnalyticsDest"
                                      ]
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "name": "[variables('deployDataCollectionRulesAssociation')]",
                        "apiVersion": "2022-09-01",
                        "resourceGroup": "[parameters('resourceGroup')]",
                        "dependsOn": [
                          "[variables('deployDataCollectionRules')]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "dcrId": {
                              "value": "[variables('dcrId')]"
                            },
                            "dcraName": {
                              "value": "[variables('dcraName')]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "dcrId": {
                                "type": "string"
                              },
                              "dcraName": {
                                "type": "string"
                              }
                            },
                            "resources": [
                              {
                                "type": "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations",
                                "name": "[parameters('dcraName')]",
                                "apiVersion": "2021-04-01",
                                "properties": {
                                  "description": "Configure association between SQL Virtual Machine and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this SQL Virtual Machine.",
                                  "dataCollectionRuleId": "[parameters('dcrId')]"
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "parameters": {
                    "resourceGroup": {
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "userWorkspaceResourceId": {
                      "value": "[parameters('userWorkspaceResourceId')]"
                    },
                    "workspaceRegion": {
                      "value": "[parameters('workspaceRegion')]"
                    },
                    "enableCollectionOfSqlQueriesForSecurityResearch": {
                      "value": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    },
                    "dcrName": {
                      "value": "[parameters('dcrName')]"
                    },
                    "dcrResourceGroup": {
                      "value": "[parameters('dcrResourceGroup')]"
                    },
                    "dcrId": {
                      "value": "[parameters('dcrId')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SignalR": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for SignalR to stream to a Log Analytics workspace when any SignalR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-SignalR",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SignalR",
        "displayName": "Deploy Diagnostic Settings for SignalR to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.SignalRService/SignalR"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.SignalRService/SignalR/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "AllLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Redis-http": {
        "metadata": {
          "version": "1.0.0",
          "category": "Cache",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Audit enabling of only connections via SSL to Azure Cache for Redis. Validate both minimum TLS version and enableNonSslPort is disabled. Use of secure connections ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking",
        "name": "Deny-Redis-http",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Redis-http",
        "displayName": "Azure Cache for Redis only secure connections should be enabled",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          },
          "minimumTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.1",
              "1.0"
            ],
            "metadata": {
              "displayName": "Select minumum TLS version for Azure Cache for Redis.",
              "description": "Select minimum TLS version for Azure Cache for Redis."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Cache/redis"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Cache/Redis/enableNonSslPort",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Cache/Redis/minimumTlsVersion",
                    "notequals": "[parameters('minimumTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-Tde": {
        "metadata": {
          "deprecated": true,
          "supersededBy": "86a912f6-9a06-4e26-b447-11b16ba8659f",
          "version": "1.1.1-deprecated",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy the Transparent Data Encryption when it is not enabled in the deployment. Please use this policy instead https://www.azadvertizer.net/azpolicyadvertizer/86a912f6-9a06-4e26-b447-11b16ba8659f.html",
        "name": "Deploy-Sql-Tde",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-Tde",
        "displayName": "[Deprecated] Deploy SQL Database Transparent Data Encryption",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "excludedDatabases": {
            "type": "Array",
            "metadata": {
              "displayName": "Excluded Databases",
              "description": "Array of databases that are excluded from this policy"
            },
            "defaultValue": [
              "master",
              "model",
              "tempdb",
              "msdb",
              "resource"
            ]
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Sql/servers/databases"
              },
              {
                "field": "name",
                "notIn": "[parameters('excludedDatabases')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Sql/transparentDataEncryption.status",
                    "equals": "Enabled"
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "location": {
                        "type": "String"
                      },
                      "sqlServerName": {
                        "type": "String"
                      },
                      "sqlServerDataBaseName": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "name": "[concat( parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/current')]",
                        "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
                        "apiVersion": "2014-04-01",
                        "properties": {
                          "status": "Enabled"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "location": {
                      "value": "[field('location')]"
                    },
                    "sqlServerName": {
                      "value": "[first(split(field('fullname'),'/'))]"
                    },
                    "sqlServerDataBaseName": {
                      "value": "[field('name')]"
                    }
                  }
                }
              },
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3"
              ]
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL": {
        "metadata": {
          "version": "1.0.0",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Configure Windows SQL Virtual Machines to automatically install the Microsoft Defender for SQL extension. Microsoft Defender for SQL collects events from the agent and uses them to provide security alerts and tailored hardening tasks (recommendations).",
        "name": "Deploy-MDFC-SQL-DefenderSQL",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL",
        "displayName": "Configure SQL Virtual Machines to automatically install Microsoft Defender for SQL",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "workspaceRegion": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace region",
              "description": "Region of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "location"
            }
          },
          "dcrName": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Name",
              "description": "Name of the Data Collection Rule."
            }
          },
          "dcrResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Resource Group",
              "description": "Resource Group of the Data Collection Rule."
            }
          },
          "dcrId": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Id",
              "description": "Id of the Data Collection Rule."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Compute/virtualMachines"
              },
              {
                "field": "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType",
                "like": "Windows*"
              },
              {
                "field": "Microsoft.Compute/imagePublisher",
                "equals": "microsoftsqlserver"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "name": "[concat(field('fullName'), '/MicrosoftDefenderForSQL')]",
              "evaluationDelay": "AfterProvisioning",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/type",
                    "equals": "AdvancedThreatProtection.Windows"
                  },
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/publisher",
                    "equals": "Microsoft.Azure.AzureDefenderForSQL"
                  },
                  {
                    "field": "Microsoft.Compute/virtualMachines/extensions/provisioningState",
                    "in": [
                      "Succeeded",
                      "Provisioning succeeded"
                    ]
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "location": {
                        "type": "string"
                      },
                      "vmName": {
                        "type": "string"
                      },
                      "workspaceRegion": {
                        "type": "string"
                      },
                      "dcrResourceGroup": {
                        "type": "string"
                      },
                      "dcrName": {
                        "type": "string"
                      },
                      "dcrId": {
                        "type": "string"
                      }
                    },
                    "variables": {
                      "locationLongNameToShortMap": {
                        "australiacentral": "CAU",
                        "australiaeast": "EAU",
                        "australiasoutheast": "SEAU",
                        "brazilsouth": "CQ",
                        "canadacentral": "CCA",
                        "canadaeast": "CCA",
                        "centralindia": "CIN",
                        "centralus": "CUS",
                        "eastasia": "EA",
                        "eastus2euap": "eus2p",
                        "eastus": "EUS",
                        "eastus2": "EUS2",
                        "francecentral": "PAR",
                        "germanywestcentral": "DEWC",
                        "japaneast": "EJP",
                        "jioindiawest": "CIN",
                        "koreacentral": "SE",
                        "koreasouth": "SE",
                        "northcentralus": "NCUS",
                        "northeurope": "NEU",
                        "norwayeast": "NOE",
                        "southafricanorth": "JNB",
                        "southcentralus": "SCUS",
                        "southeastasia": "SEA",
                        "southindia": "CIN",
                        "swedencentral": "SEC",
                        "switzerlandnorth": "CHN",
                        "switzerlandwest": "CHW",
                        "uaenorth": "DXB",
                        "uksouth": "SUK",
                        "ukwest": "WUK",
                        "westcentralus": "WCUS",
                        "westeurope": "WEU",
                        "westindia": "CIN",
                        "westus": "WUS",
                        "westus2": "WUS2"
                      },
                      "actualLocation": "[if(empty(parameters('workspaceRegion')), parameters('location'), parameters('workspaceRegion'))]",
                      "locationCode": "[if(contains(variables('locationLongNameToShortMap'), variables('actualLocation')), variables('locationLongNameToShortMap')[variables('actualLocation')], variables('actualLocation'))]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "defaultRGName": "[parameters('dcrResourceGroup')]",
                      "dcrName": "[parameters('dcrName')]",
                      "dcrId": "[parameters('dcrId')]",
                      "dcraName": "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Compute/virtualMachines/extensions",
                        "name": "[concat(parameters('vmName'), '/', 'MicrosoftDefenderForSQL')]",
                        "apiVersion": "2023-03-01",
                        "location": "[parameters('location')]",
                        "tags": {
                          "createdBy": "MicrosoftDefenderForSQL"
                        },
                        "properties": {
                          "publisher": "Microsoft.Azure.AzureDefenderForSQL",
                          "type": "AdvancedThreatProtection.Windows",
                          "typeHandlerVersion": "2.0",
                          "autoUpgradeMinorVersion": true,
                          "enableAutomaticUpgrade": true
                        },
                        "dependsOn": [
                          "[extensionResourceId(concat('/subscriptions/', variables('subscriptionId'), '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Compute/virtualMachines/', parameters('vmName')), 'Microsoft.Insights/dataCollectionRuleAssociations','MicrosoftDefenderForSQL-RulesAssociation')]"
                        ]
                      },
                      {
                        "type": "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations",
                        "name": "[variables('dcraName')]",
                        "apiVersion": "2021-04-01",
                        "properties": {
                          "description": "Configure association between SQL Virtual Machine and the Microsoft Defender for SQL DCR. Deleting this association will break the detection of security vulnerabilities for this SQL Virtual Machine.",
                          "dataCollectionRuleId": "[variables('dcrId')]"
                        }
                      }
                    ]
                  },
                  "parameters": {
                    "location": {
                      "value": "[field('location')]"
                    },
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "workspaceRegion": {
                      "value": "[parameters('workspaceRegion')]"
                    },
                    "dcrResourceGroup": {
                      "value": "[parameters('dcrResourceGroup')]"
                    },
                    "dcrName": {
                      "value": "[parameters('dcrName')]"
                    },
                    "dcrId": {
                      "value": "[parameters('dcrId')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-RDP-From-Internet": {
        "metadata": {
          "deprecated": true,
          "supersededBy": "Deny-MgmtPorts-From-Internet",
          "version": "1.0.1-deprecated",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies any network security rule that allows RDP access from Internet. This policy is superseded by https://www.azadvertizer.net/azpolicyadvertizer/Deny-MgmtPorts-From-Internet.html",
        "name": "Deny-RDP-From-Internet",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-RDP-From-Internet",
        "displayName": "[Deprecated] RDP access from the Internet should be blocked",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Network/networkSecurityGroups/securityRules"
              },
              {
                "allOf": [
                  {
                    "field": "Microsoft.Network/networkSecurityGroups/securityRules/access",
                    "equals": "Allow"
                  },
                  {
                    "field": "Microsoft.Network/networkSecurityGroups/securityRules/direction",
                    "equals": "Inbound"
                  },
                  {
                    "anyOf": [
                      {
                        "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange",
                        "equals": "*"
                      },
                      {
                        "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange",
                        "equals": "3389"
                      },
                      {
                        "value": "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389)), 'false')]",
                        "equals": "true"
                      },
                      {
                        "count": {
                          "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
                          "where": {
                            "value": "[if(and(not(empty(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')))), contains(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')),'-')), and(lessOrEquals(int(first(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389),greaterOrEquals(int(last(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389)) , 'false')]",
                            "equals": "true"
                          }
                        },
                        "greater": 0
                      },
                      {
                        "not": {
                          "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
                          "notEquals": "*"
                        }
                      },
                      {
                        "not": {
                          "field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
                          "notEquals": "3389"
                        }
                      }
                    ]
                  },
                  {
                    "anyOf": [
                      {
                        "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix",
                        "equals": "*"
                      },
                      {
                        "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix",
                        "equals": "Internet"
                      },
                      {
                        "not": {
                          "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]",
                          "notEquals": "*"
                        }
                      },
                      {
                        "not": {
                          "field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]",
                          "notEquals": "Internet"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApiForFHIR": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Azure API for FHIR to stream to a Log Analytics workspace when any Azure API for FHIR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-ApiForFHIR",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApiForFHIR",
        "displayName": "Deploy Diagnostic Settings for Azure API for FHIR to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.HealthcareApis/services"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.HealthcareApis/services/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "AuditLogs",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-RedisCache": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Redis Cache to stream to a Log Analytics workspace when any Redis Cache which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-RedisCache",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-RedisCache",
        "displayName": "Deploy Diagnostic Settings for Redis Cache to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Cache/redis"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Cache/redis/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-DDoSProtection": {
        "metadata": {
          "version": "1.0.1",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys an Azure DDoS Network Protection",
        "name": "Deploy-DDoSProtection",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-DDoSProtection",
        "displayName": "Deploy an Azure DDoS Network Protection",
        "parameters": {
          "ddosName": {
            "type": "String",
            "metadata": {
              "displayName": "ddosName",
              "description": "DDoSVnet"
            }
          },
          "ddosRegion": {
            "type": "String",
            "metadata": {
              "displayName": "ddosRegion",
              "description": "DDoSVnet location",
              "strongType": "location"
            }
          },
          "rgName": {
            "type": "String",
            "metadata": {
              "displayName": "rgName",
              "description": "Provide name for resource group."
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Resources/subscriptions"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Network/ddosProtectionPlans",
              "deploymentScope": "subscription",
              "existenceScope": "resourceGroup",
              "resourceGroupName": "[parameters('rgName')]",
              "name": "[parameters('ddosName')]",
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7"
              ],
              "deployment": {
                "location": "northeurope",
                "properties": {
                  "mode": "Incremental",
                  "parameters": {
                    "rgName": {
                      "value": "[parameters('rgName')]"
                    },
                    "ddosname": {
                      "value": "[parameters('ddosname')]"
                    },
                    "ddosregion": {
                      "value": "[parameters('ddosRegion')]"
                    }
                  },
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "rgName": {
                        "type": "String"
                      },
                      "ddosname": {
                        "type": "String"
                      },
                      "ddosRegion": {
                        "type": "String"
                      }
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Resources/resourceGroups",
                        "apiVersion": "2018-05-01",
                        "name": "[parameters('rgName')]",
                        "location": "[deployment().location]",
                        "properties": {}
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "apiVersion": "2018-05-01",
                        "name": "ddosprotection",
                        "resourceGroup": "[parameters('rgName')]",
                        "dependsOn": [
                          "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "template": {
                            "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
                            "contentVersion": "1.0.0.0",
                            "parameters": {},
                            "resources": [
                              {
                                "type": "Microsoft.Network/ddosProtectionPlans",
                                "apiVersion": "2019-12-01",
                                "name": "[parameters('ddosName')]",
                                "location": "[parameters('ddosRegion')]",
                                "properties": {}
                              }
                            ],
                            "outputs": {}
                          }
                        }
                      }
                    ],
                    "outputs": {}
                  }
                }
              }
            }
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MySQL-sslEnforcement": {
        "metadata": {
          "version": "1.1.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for MySQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Deploy-MySQL-sslEnforcement",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MySQL-sslEnforcement",
        "displayName": "Azure Database for MySQL server deploy a specific min TLS version and enforce SSL.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect minimum TLS version Azure Database for MySQL server",
              "description": "Enable or disable the execution of the policy minimum TLS version Azure Database for MySQL server"
            }
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_0",
              "TLS1_1",
              "TLSEnforcementDisabled"
            ],
            "metadata": {
              "displayName": "Select version minimum TLS for MySQL server",
              "description": "Select version  minimum TLS version Azure Database for MySQL server to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.DBforMySQL/servers"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.DBforMySQL/servers/sslEnforcement",
                    "notEquals": "Enabled"
                  },
                  {
                    "field": "Microsoft.DBforMySQL/servers/minimalTlsVersion",
                    "notequals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.DBforMySQL/servers",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.DBforMySQL/servers/sslEnforcement",
                    "equals": "Enabled"
                  },
                  {
                    "field": "Microsoft.DBforMySQL/servers/minimalTlsVersion",
                    "equals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "minimalTlsVersion": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DBforMySQL/servers",
                        "apiVersion": "2017-12-01",
                        "name": "[concat(parameters('resourceName'))]",
                        "location": "[parameters('location')]",
                        "properties": {
                          "sslEnforcement": "[if(equals(parameters('minimalTlsVersion'), 'TLSEnforcementDisabled'),'Disabled', 'Enabled')]",
                          "minimalTlsVersion": "[parameters('minimalTlsVersion')]"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "minimalTlsVersion": {
                      "value": "[parameters('minimalTlsVersion')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApplicationGateway": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Application Gateway to stream to a Log Analytics workspace when any Application Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-ApplicationGateway",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApplicationGateway",
        "displayName": "Deploy Diagnostic Settings for Application Gateway to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/applicationGateways"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/applicationGateways/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "ApplicationGatewayAccessLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ApplicationGatewayPerformanceLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ApplicationGatewayFirewallLog",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Databricks": {
        "metadata": {
          "version": "1.3.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Databricks to stream to a Log Analytics workspace when any Databricks which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-Databricks",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Databricks",
        "displayName": "Deploy Diagnostic Settings for Databricks to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Databricks/workspaces"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Databricks/workspaces/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "logs": [
                            {
                              "category": "dbfs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "clusters",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "accounts",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "jobs",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "notebook",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ssh",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "workspace",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "secrets",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "sqlPermissions",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "instancePools",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "sqlanalytics",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "genie",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "globalInitScripts",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "iamRole",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "mlflowExperiment",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "featureStore",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "RemoteHistoryService",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "mlflowAcledArtifact",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "databrickssql",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "deltaPipelines",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "modelRegistry",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "repos",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "unityCatalog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "gitCredentials",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "webTerminal",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "serverlessRealTimeInference",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "clusterLibraries",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "partnerHub",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "clamAVScan",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "capsule8Dataplane",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLElasticPools": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for SQL Elastic Pools to stream to a Log Analytics workspace when any SQL Elastic Pools which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-SQLElasticPools",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLElasticPools",
        "displayName": "Deploy Diagnostic Settings for SQL Elastic Pools to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Sql/servers/elasticPools"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Sql/servers/elasticPools/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('fullName')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AA-child-resources": {
        "metadata": {
          "version": "1.0.0",
          "category": "Automation",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of child resources on the Automation Account",
        "name": "Deny-AA-child-resources",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AA-child-resources",
        "displayName": "No child resources in Automation Account",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "in": [
                  "Microsoft.Automation/automationAccounts/runbooks",
                  "Microsoft.Automation/automationAccounts/variables",
                  "Microsoft.Automation/automationAccounts/modules",
                  "Microsoft.Automation/automationAccounts/credentials",
                  "Microsoft.Automation/automationAccounts/connections",
                  "Microsoft.Automation/automationAccounts/certificates"
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Penp": {
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of a subnet without Private Endpoint Netwotk Policies enabled. This policy is intended for 'workload' subnets, not 'central infrastructure' (aka, 'hub') subnets.",
        "name": "Deny-Subnet-Without-Penp",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Penp",
        "displayName": "Subnets without Private Endpoint Network Policies enabled should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny",
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          },
          "excludedSubnets": {
            "type": "Array",
            "metadata": {
              "displayName": "Excluded Subnets",
              "description": "Array of subnet names that are excluded from this policy"
            },
            "defaultValue": [
              "GatewaySubnet",
              "AzureFirewallSubnet",
              "AzureFirewallManagementSubnet",
              "AzureBastionSubnet"
            ]
          }
        },
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "equals": "Microsoft.Network/virtualNetworks",
                    "field": "type"
                  },
                  {
                    "count": {
                      "field": "Microsoft.Network/virtualNetworks/subnets[*]",
                      "where": {
                        "allOf": [
                          {
                            "field": "Microsoft.Network/virtualNetworks/subnets[*].privateEndpointNetworkPolicies",
                            "notEquals": "Enabled"
                          },
                          {
                            "field": "Microsoft.Network/virtualNetworks/subnets[*].name",
                            "notIn": "[parameters('excludedSubnets')]"
                          }
                        ]
                      }
                    },
                    "notEquals": 0
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/virtualNetworks/subnets"
                  },
                  {
                    "field": "name",
                    "notIn": "[parameters('excludedSubnets')]"
                  },
                  {
                    "field": "Microsoft.Network/virtualNetworks/subnets/privateEndpointNetworkPolicies",
                    "notEquals": "Enabled"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-PostgreSQL-sslEnforcement": {
        "metadata": {
          "version": "1.1.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for PostgreSQL server. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Deploy-PostgreSQL-sslEnforcement",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-PostgreSQL-sslEnforcement",
        "displayName": "Azure Database for PostgreSQL server deploy a specific min TLS version requirement and enforce SSL ",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect Azure Database for PostgreSQL server",
              "description": "Enable or disable the execution of the policy minimum TLS version Azure Database for PostgreSQL server"
            }
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_0",
              "TLS1_1",
              "TLSEnforcementDisabled"
            ],
            "metadata": {
              "displayName": "Select version for PostgreSQL server",
              "description": "Select version minimum TLS version Azure Database for PostgreSQL server to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.DBforPostgreSQL/servers"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.DBforPostgreSQL/servers/sslEnforcement",
                    "notEquals": "Enabled"
                  },
                  {
                    "field": "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion",
                    "notEquals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.DBforPostgreSQL/servers",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.DBforPostgreSQL/servers/sslEnforcement",
                    "equals": "Enabled"
                  },
                  {
                    "field": "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion",
                    "equals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              },
              "name": "current",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "minimalTlsVersion": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DBforPostgreSQL/servers",
                        "apiVersion": "2017-12-01",
                        "name": "[concat(parameters('resourceName'))]",
                        "location": "[parameters('location')]",
                        "properties": {
                          "sslEnforcement": "[if(equals(parameters('minimalTlsVersion'), 'TLSEnforcementDisabled'),'Disabled', 'Enabled')]",
                          "minimalTlsVersion": "[parameters('minimalTlsVersion')]"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "minimalTlsVersion": {
                      "value": "[parameters('minimalTlsVersion')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WebServerFarm": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for App Service Plan to stream to a Log Analytics workspace when any App Service Plan which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-WebServerFarm",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WebServerFarm",
        "displayName": "Deploy Diagnostic Settings for App Service Plan to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Web/serverfarms"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Web/serverfarms/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": []
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-http": {
        "metadata": {
          "version": "1.0.0",
          "category": "App Service",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks.",
        "name": "Deny-AppServiceApiApp-http",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-http",
        "displayName": "API App should only be accessible over HTTPS",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/sites"
              },
              {
                "field": "kind",
                "like": "*api"
              },
              {
                "field": "Microsoft.Web/sites/httpsOnly",
                "equals": "false"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-disableNonSslPort": {
        "metadata": {
          "version": "1.0.1",
          "category": "Cache",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Azure Cache for Redis Append and the enforcement that enableNonSslPort is disabled. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Append-Redis-disableNonSslPort",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-disableNonSslPort",
        "displayName": "Azure Cache for Redis Append and the enforcement that enableNonSslPort is disabled.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect Azure Cache for Redis",
              "description": "Enable or disable the execution of the policy minimum TLS version Azure Cache for Redis"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Cache/redis"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.Cache/Redis/enableNonSslPort",
                    "equals": "true"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": [
              {
                "field": "Microsoft.Cache/Redis/enableNonSslPort",
                "value": false
              }
            ]
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-MachineLearning-PrivateEndpointId": {
        "metadata": {
          "version": "1.0.0",
          "category": "Machine Learning",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Audit private endpoints that are created in other subscriptions and/or tenants for Azure Machine Learning.",
        "name": "Audit-MachineLearning-PrivateEndpointId",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-MachineLearning-PrivateEndpointId",
        "displayName": "Control private endpoint connections to Azure Machine Learning",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Audit"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateLinkServiceConnectionState.status",
                "equals": "Approved"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id",
                    "exists": false
                  },
                  {
                    "value": "[split(concat(field('Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id'), '//'), '/')[2]]",
                    "notEquals": "[subscription().subscriptionId]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments_20230706": {
        "metadata": {
          "version": "1.0.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "replacesPolicy": "Deploy-Sql-vulnerabilityAssessments",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy SQL Database Vulnerability Assessments when it does not exist in the deployment, and save results to the storage account specified in the parameters.",
        "name": "Deploy-Sql-vulnerabilityAssessments_20230706",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments_20230706",
        "displayName": "Deploy SQL Database Vulnerability Assessments",
        "parameters": {
          "vulnerabilityAssessmentsEmail": {
            "type": "Array",
            "metadata": {
              "description": "The email address(es) to send alerts.",
              "displayName": "The email address(es) to send alerts."
            }
          },
          "vulnerabilityAssessmentsStorageID": {
            "type": "String",
            "metadata": {
              "description": "The storage account ID to store assessments",
              "displayName": "The storage account ID to store assessments"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Sql/servers/databases"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
              "existenceCondition": {
                "allOf": [
                  {
                    "count": {
                      "field": "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*]",
                      "where": {
                        "value": "current(Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*])",
                        "notIn": "[parameters('vulnerabilityAssessmentsEmail')]"
                      }
                    },
                    "greater": 0
                  },
                  {
                    "field": "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.isEnabled",
                    "equals": true
                  }
                ]
              },
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "location": {
                        "type": "String"
                      },
                      "sqlServerName": {
                        "type": "String"
                      },
                      "sqlServerDataBaseName": {
                        "type": "String"
                      },
                      "vulnerabilityAssessmentsEmail": {
                        "type": "Array"
                      },
                      "vulnerabilityAssessmentsStorageID": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "name": "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]",
                        "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
                        "apiVersion": "2017-03-01-preview",
                        "properties": {
                          "storageContainerPath": "[concat('https://', last( split(parameters('vulnerabilityAssessmentsStorageID') ,  '/') ) , '.blob.core.windows.net/vulneraabilitylogs')]",
                          "storageAccountAccessKey": "[listkeys(parameters('vulnerabilityAssessmentsStorageID'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
                          "recurringScans": {
                            "isEnabled": true,
                            "emailSubscriptionAdmins": false,
                            "emails": "[parameters('vulnerabilityAssessmentsEmail')]"
                          }
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "location": {
                      "value": "[field('location')]"
                    },
                    "sqlServerName": {
                      "value": "[first(split(field('fullname'),'/'))]"
                    },
                    "sqlServerDataBaseName": {
                      "value": "[field('name')]"
                    },
                    "vulnerabilityAssessmentsEmail": {
                      "value": "[parameters('vulnerabilityAssessmentsEmail')]"
                    },
                    "vulnerabilityAssessmentsStorageID": {
                      "value": "[parameters('vulnerabilityAssessmentsStorageID')]"
                    }
                  }
                }
              },
              "roleDefinitionIds": [
                "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab"
              ]
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VNetGW": {
        "metadata": {
          "version": "1.1.1",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for VPN Gateway to stream to a Log Analytics workspace when any VPN Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled.",
        "name": "Deploy-Diagnostics-VNetGW",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VNetGW",
        "displayName": "Deploy Diagnostic Settings for VPN Gateway to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/virtualNetworkGateways"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/virtualNetworkGateways/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "GatewayDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "IKEDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "P2SDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "RouteDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "TunnelDiagnosticLog",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-UDR-With-Specific-NextHop": {
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of a User Defined Route with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway'.",
        "name": "Deny-UDR-With-Specific-NextHop",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-UDR-With-Specific-NextHop",
        "displayName": "User Defined Routes with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway' should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "excludedDestinations": {
            "type": "Array",
            "metadata": {
              "displayName": "Excluded Destinations",
              "description": "Array of route destinations that are to be denied"
            },
            "defaultValue": [
              "Internet",
              "VirtualNetworkGateway"
            ]
          }
        },
        "policyRule": {
          "if": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "equals": "Microsoft.Network/routeTables",
                    "field": "type"
                  },
                  {
                    "count": {
                      "field": "Microsoft.Network/routeTables/routes[*]",
                      "where": {
                        "field": "Microsoft.Network/routeTables/routes[*].nextHopType",
                        "in": "[parameters('excludedDestinations')]"
                      }
                    },
                    "notEquals": 0
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "field": "type",
                    "equals": "Microsoft.Network/routeTables/routes"
                  },
                  {
                    "field": "Microsoft.Network/routeTables/routes/nextHopType",
                    "in": "[parameters('excludedDestinations')]"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CosmosDB": {
        "metadata": {
          "version": "1.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Cosmos DB to stream to a Log Analytics workspace when any Cosmos DB which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-CosmosDB",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CosmosDB",
        "displayName": "Deploy Diagnostic Settings for Cosmos DB to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DocumentDB/databaseAccounts"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DocumentDB/databaseAccounts/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "Requests",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "DataPlaneRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "MongoRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "QueryRuntimeStatistics",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "PartitionKeyStatistics",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "PartitionKeyRUConsumption",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "ControlPlaneRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "CassandraRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "GremlinRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "TableApiRequests",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DiagnosticLogs": {
        "metadata": {
          "deprecated": false,
          "version": "1.0.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "DenyAction implementation on Diagnostic Logs.",
        "name": "DenyAction-DiagnosticLogs",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DiagnosticLogs",
        "displayName": "DenyAction implementation on Diagnostic Logs.",
        "parameters": {},
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Insights/diagnosticSettings"
          },
          "then": {
            "effect": "denyAction",
            "details": {
              "actionNames": [
                "delete"
              ]
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TimeSeriesInsights": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Time Series Insights to stream to a Log Analytics workspace when any Time Series Insights which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-TimeSeriesInsights",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TimeSeriesInsights",
        "displayName": "Deploy Diagnostic Settings for Time Series Insights to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.TimeSeriesInsights/environments"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.TimeSeriesInsights/environments/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "Ingress",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Management",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-SqlMi-minTLS": {
        "metadata": {
          "version": "1.2.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy a specific min TLS version requirement and enforce SSL on SQL managed instances. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server.",
        "name": "Deploy-SqlMi-minTLS",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-SqlMi-minTLS",
        "displayName": "SQL managed instances deploy a specific min TLS version requirement.",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect SQL servers",
              "description": "Enable or disable the execution of the policy minimum TLS version SQL servers"
            }
          },
          "minimalTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.1",
              "1.0"
            ],
            "metadata": {
              "displayName": "Select version for SQL server",
              "description": "Select version minimum TLS version SQL servers to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Sql/managedInstances"
              },
              {
                "field": "Microsoft.Sql/managedInstances/minimalTlsVersion",
                "notequals": "[parameters('minimalTlsVersion')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Sql/managedInstances",
              "evaluationDelay": "AfterProvisioningSuccess",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Sql/managedInstances/minimalTlsVersion",
                    "equals": "[parameters('minimalTlsVersion')]"
                  }
                ]
              },
              "name": "current",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "minimalTlsVersion": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Sql/managedInstances",
                        "apiVersion": "2020-02-02-preview",
                        "name": "[concat(parameters('resourceName'))]",
                        "location": "[parameters('location')]",
                        "properties": {
                          "minimalTlsVersion": "[parameters('minimalTlsVersion')]"
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "minimalTlsVersion": {
                      "value": "[parameters('minimalTlsVersion')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-Sql-DefenderSQL-DCR": {
        "metadata": {
          "version": "1.0.0",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Microsoft Defender for SQL collects events from the agent and uses them to provide security alerts and tailored hardening tasks (recommendations). Create a resource group and a Data Collection Rule in the same region as the user-defined Log Analytics workspace.",
        "name": "Deploy-MDFC-Arc-Sql-DefenderSQL-DCR",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-Sql-DefenderSQL-DCR",
        "displayName": "Configure Arc-enabled SQL Servers to automatically install Microsoft Defender for SQL and DCR with a user-defined LA workspace",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "userWorkspaceResourceId": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace Resource Id",
              "description": "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "omsWorkspace"
            }
          },
          "workspaceRegion": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace region",
              "description": "Region of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "location"
            }
          },
          "enableCollectionOfSqlQueriesForSecurityResearch": {
            "type": "Boolean",
            "metadata": {
              "displayName": "Enable collection of SQL queries for security research",
              "description": "Enable or disable the collection of SQL queries for security research."
            },
            "allowedValues": [
              true,
              false
            ],
            "defaultValue": false
          },
          "dcrName": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Name",
              "description": "Name of the Data Collection Rule."
            }
          },
          "dcrResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Resource Group",
              "description": "Resource Group of the Data Collection Rule."
            }
          },
          "dcrId": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Id",
              "description": "Id of the Data Collection Rule."
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.HybridCompute/machines"
              },
              {
                "field": "Microsoft.HybridCompute/machines/osName",
                "equals": "Windows"
              },
              {
                "field": "Microsoft.HybridCompute/machines/mssqlDiscovered",
                "equals": "true"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/dataCollectionRules",
              "deploymentScope": "subscription",
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
              ],
              "existenceScope": "subscription",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "location",
                    "equals": "[parameters('workspaceRegion')]"
                  },
                  {
                    "field": "name",
                    "equals": "[parameters('dcrName')]"
                  }
                ]
              },
              "deployment": {
                "location": "eastus",
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceGroup": {
                        "type": "string"
                      },
                      "vmName": {
                        "type": "string"
                      },
                      "userWorkspaceResourceId": {
                        "type": "string"
                      },
                      "workspaceRegion": {
                        "type": "string"
                      },
                      "enableCollectionOfSqlQueriesForSecurityResearch": {
                        "type": "bool"
                      },
                      "dcrName": {
                        "type": "string"
                      },
                      "dcrResourceGroup": {
                        "type": "string"
                      },
                      "dcrId": {
                        "type": "string"
                      }
                    },
                    "variables": {
                      "locationLongNameToShortMap": {
                        "australiacentral": "CAU",
                        "australiaeast": "EAU",
                        "australiasoutheast": "SEAU",
                        "brazilsouth": "CQ",
                        "canadacentral": "CCA",
                        "canadaeast": "CCA",
                        "centralindia": "CIN",
                        "centralus": "CUS",
                        "eastasia": "EA",
                        "eastus2euap": "eus2p",
                        "eastus": "EUS",
                        "eastus2": "EUS2",
                        "francecentral": "PAR",
                        "germanywestcentral": "DEWC",
                        "japaneast": "EJP",
                        "jioindiawest": "CIN",
                        "koreacentral": "SE",
                        "koreasouth": "SE",
                        "northcentralus": "NCUS",
                        "northeurope": "NEU",
                        "norwayeast": "NOE",
                        "southafricanorth": "JNB",
                        "southcentralus": "SCUS",
                        "southeastasia": "SEA",
                        "southindia": "CIN",
                        "swedencentral": "SEC",
                        "switzerlandnorth": "CHN",
                        "switzerlandwest": "CHW",
                        "uaenorth": "DXB",
                        "uksouth": "SUK",
                        "ukwest": "WUK",
                        "westcentralus": "WCUS",
                        "westeurope": "WEU",
                        "westindia": "CIN",
                        "westus": "WUS",
                        "westus2": "WUS2"
                      },
                      "locationCode": "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "defaultRGName": "[parameters('resourceGroup')]",
                      "defaultRGLocation": "[parameters('workspaceRegion')]",
                      "dcrName": "[parameters('dcrName')]",
                      "dcrId": "[parameters('dcrId')]",
                      "dcraName": "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]",
                      "deployDataCollectionRules": "[concat('deployDataCollectionRules-', uniqueString(deployment().name))]",
                      "deployDataCollectionRulesAssociation": "[concat('deployDataCollectionRulesAssociation-', uniqueString(deployment().name))]"
                    },
                    "resources": [
                      {
                        "condition": "[empty(parameters('dcrResourceGroup'))]",
                        "type": "Microsoft.Resources/resourceGroups",
                        "name": "[variables('defaultRGName')]",
                        "apiVersion": "2022-09-01",
                        "location": "[variables('defaultRGLocation')]",
                        "tags": {
                          "createdBy": "MicrosoftDefenderForSQL"
                        }
                      },
                      {
                        "condition": "[empty(parameters('dcrId'))]",
                        "type": "Microsoft.Resources/deployments",
                        "name": "[variables('deployDataCollectionRules')]",
                        "apiVersion": "2022-09-01",
                        "resourceGroup": "[variables('defaultRGName')]",
                        "dependsOn": [
                          "[variables('defaultRGName')]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "defaultRGLocation": {
                              "value": "[variables('defaultRGLocation')]"
                            },
                            "workspaceResourceId": {
                              "value": "[parameters('userWorkspaceResourceId')]"
                            },
                            "dcrName": {
                              "value": "[variables('dcrName')]"
                            },
                            "dcrId": {
                              "value": "[variables('dcrId')]"
                            },
                            "enableCollectionOfSqlQueriesForSecurityResearch": {
                              "value": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "defaultRGLocation": {
                                "type": "string"
                              },
                              "workspaceResourceId": {
                                "type": "string"
                              },
                              "dcrName": {
                                "type": "string"
                              },
                              "dcrId": {
                                "type": "string"
                              },
                              "enableCollectionOfSqlQueriesForSecurityResearch": {
                                "type": "bool"
                              }
                            },
                            "variables": {},
                            "resources": [
                              {
                                "type": "Microsoft.Insights/dataCollectionRules",
                                "name": "[parameters('dcrName')]",
                                "apiVersion": "2021-04-01",
                                "location": "[parameters('defaultRGLocation')]",
                                "tags": {
                                  "createdBy": "MicrosoftDefenderForSQL"
                                },
                                "properties": {
                                  "description": "Data collection rule for Microsoft Defender for SQL. Deleting this rule will break the detection of security vulnerabilities.",
                                  "dataSources": {
                                    "extensions": [
                                      {
                                        "extensionName": "MicrosoftDefenderForSQL",
                                        "name": "MicrosoftDefenderForSQL",
                                        "streams": [
                                          "Microsoft-DefenderForSqlAlerts",
                                          "Microsoft-DefenderForSqlLogins",
                                          "Microsoft-DefenderForSqlTelemetry",
                                          "Microsoft-DefenderForSqlScanEvents",
                                          "Microsoft-DefenderForSqlScanResults"
                                        ],
                                        "extensionSettings": {
                                          "enableCollectionOfSqlQueriesForSecurityResearch": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                        }
                                      }
                                    ]
                                  },
                                  "destinations": {
                                    "logAnalytics": [
                                      {
                                        "workspaceResourceId": "[parameters('workspaceResourceId')]",
                                        "name": "LogAnalyticsDest"
                                      }
                                    ]
                                  },
                                  "dataFlows": [
                                    {
                                      "streams": [
                                        "Microsoft-DefenderForSqlAlerts",
                                        "Microsoft-DefenderForSqlLogins",
                                        "Microsoft-DefenderForSqlTelemetry",
                                        "Microsoft-DefenderForSqlScanEvents",
                                        "Microsoft-DefenderForSqlScanResults"
                                      ],
                                      "destinations": [
                                        "LogAnalyticsDest"
                                      ]
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "Microsoft.Resources/deployments",
                        "name": "[variables('deployDataCollectionRulesAssociation')]",
                        "apiVersion": "2022-09-01",
                        "resourceGroup": "[parameters('resourceGroup')]",
                        "dependsOn": [
                          "[variables('deployDataCollectionRules')]"
                        ],
                        "properties": {
                          "mode": "Incremental",
                          "expressionEvaluationOptions": {
                            "scope": "inner"
                          },
                          "parameters": {
                            "dcrId": {
                              "value": "[variables('dcrId')]"
                            },
                            "dcraName": {
                              "value": "[variables('dcraName')]"
                            }
                          },
                          "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                              "dcrId": {
                                "type": "string"
                              },
                              "dcraName": {
                                "type": "string"
                              }
                            },
                            "resources": [
                              {
                                "type": "Microsoft.HybridCompute/machines/providers/dataCollectionRuleAssociations",
                                "name": "[parameters('dcraName')]",
                                "apiVersion": "2021-04-01",
                                "properties": {
                                  "description": "Configure association between Arc-enabled SQL Server and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this Arc-enabled SQL Server.",
                                  "dataCollectionRuleId": "[parameters('dcrId')]"
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "parameters": {
                    "resourceGroup": {
                      "value": "[parameters('dcrResourceGroup')]"
                    },
                    "vmName": {
                      "value": "[field('name')]"
                    },
                    "userWorkspaceResourceId": {
                      "value": "[parameters('userWorkspaceResourceId')]"
                    },
                    "workspaceRegion": {
                      "value": "[parameters('workspaceRegion')]"
                    },
                    "enableCollectionOfSqlQueriesForSecurityResearch": {
                      "value": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    },
                    "dcrName": {
                      "value": "[parameters('dcrName')]"
                    },
                    "dcrResourceGroup": {
                      "value": "[parameters('dcrResourceGroup')]"
                    },
                    "dcrId": {
                      "value": "[parameters('dcrId')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-SFTP": {
        "metadata": {
          "version": "1.0.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy denies the creation of Storage Accounts with SFTP enabled for Blob Storage.",
        "name": "Deny-Storage-SFTP",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-SFTP",
        "displayName": "Storage Accounts with SFTP enabled should be denied",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts"
              },
              {
                "field": "Microsoft.Storage/storageAccounts/isSftpEnabled",
                "equals": "true"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDScalingPlans": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for AVD Scaling Plans to stream to a Log Analytics workspace when any Scaling Plan which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.",
        "name": "Deploy-Diagnostics-AVDScalingPlans",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDScalingPlans",
        "displayName": "Deploy Diagnostic Settings for AVD Scaling Plans to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DesktopVirtualization/scalingplans"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DesktopVirtualization/scalingplans/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "logs": [
                            {
                              "category": "Autoscale",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NIC": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Network Interfaces to stream to a Log Analytics workspace when any Network Interfaces which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-NIC",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NIC",
        "displayName": "Deploy Diagnostic Settings for Network Interfaces to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Network/networkInterfaces"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "timeGrain": null,
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "enabled": false,
                                "days": 0
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CDNEndpoints": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for CDN Endpoint to stream to a Log Analytics workspace when any CDN Endpoint which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-CDNEndpoints",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CDNEndpoints",
        "displayName": "Deploy Diagnostic Settings for CDN Endpoint to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Cdn/profiles/endpoints"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.Cdn/profiles/endpoints/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [],
                          "logs": [
                            {
                              "category": "CoreAnalytics",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('fullName')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-VirtualNetwork": {
        "metadata": {
          "version": "1.0.0",
          "category": "Databricks",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforces the use of vnet injection for Databricks workspaces.",
        "name": "Deny-Databricks-VirtualNetwork",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-VirtualNetwork",
        "displayName": "Deny Databricks workspaces without Vnet injection",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Databricks/workspaces"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.DataBricks/workspaces/parameters.customVirtualNetworkId.value",
                    "exists": false
                  },
                  {
                    "field": "Microsoft.DataBricks/workspaces/parameters.customPublicSubnetName.value",
                    "exists": false
                  },
                  {
                    "field": "Microsoft.DataBricks/workspaces/parameters.customPrivateSubnetName.value",
                    "exists": false
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDWorkspace": {
        "metadata": {
          "version": "1.1.1",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for AVD Workspace to stream to a Log Analytics workspace when any Workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.",
        "name": "Deploy-Diagnostics-WVDWorkspace",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDWorkspace",
        "displayName": "Deploy Diagnostic Settings for AVD Workspace to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.DesktopVirtualization/workspaces"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.DesktopVirtualization/workspaces/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "logs": [
                            {
                              "category": "Checkpoint",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Error",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Management",
                              "enabled": "[parameters('logsEnabled')]"
                            },
                            {
                              "category": "Feed",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess": {
        "metadata": {
          "version": "1.1.0",
          "category": "Machine Learning",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deny public access of Azure Machine Learning clusters via SSH.",
        "name": "Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess",
        "displayName": "Deny public access of Azure Machine Learning clusters via SSH",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.MachineLearningServices/workspaces/computes"
              },
              {
                "field": "Microsoft.MachineLearningServices/workspaces/computes/computeType",
                "equals": "AmlCompute"
              },
              {
                "anyOf": [
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess",
                    "exists": false
                  },
                  {
                    "field": "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess",
                    "notEquals": "Disabled"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "All"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones": {
        "metadata": {
          "version": "1.0.1",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy audits the creation of a Private Link Private DNS Zones in the current scope, used in combination with policies that create centralized private DNS in connectivity subscription",
        "name": "Audit-PrivateLinkDnsZones",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones",
        "displayName": "Audit the creation of Private Link Private DNS Zones",
        "parameters": {
          "effect": {
            "type": "String",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Audit",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "privateLinkDnsZones": {
            "type": "Array",
            "metadata": {
              "displayName": "Private Link Private DNS Zones",
              "description": "An array of Private Link Private DNS Zones to check for the existence of in the assigned scope."
            },
            "defaultValue": [
              "privatelink.adf.azure.com",
              "privatelink.afs.azure.net",
              "privatelink.agentsvc.azure-automation.net",
              "privatelink.analysis.windows.net",
              "privatelink.api.azureml.ms",
              "privatelink.azconfig.io",
              "privatelink.azure-api.net",
              "privatelink.azure-automation.net",
              "privatelink.azurecr.io",
              "privatelink.azure-devices.net",
              "privatelink.azure-devices-provisioning.net",
              "privatelink.azuredatabricks.net",
              "privatelink.azurehdinsight.net",
              "privatelink.azurehealthcareapis.com",
              "privatelink.azurestaticapps.net",
              "privatelink.azuresynapse.net",
              "privatelink.azurewebsites.net",
              "privatelink.batch.azure.com",
              "privatelink.blob.core.windows.net",
              "privatelink.cassandra.cosmos.azure.com",
              "privatelink.cognitiveservices.azure.com",
              "privatelink.database.windows.net",
              "privatelink.datafactory.azure.net",
              "privatelink.dev.azuresynapse.net",
              "privatelink.dfs.core.windows.net",
              "privatelink.dicom.azurehealthcareapis.com",
              "privatelink.digitaltwins.azure.net",
              "privatelink.directline.botframework.com",
              "privatelink.documents.azure.com",
              "privatelink.eventgrid.azure.net",
              "privatelink.file.core.windows.net",
              "privatelink.gremlin.cosmos.azure.com",
              "privatelink.guestconfiguration.azure.com",
              "privatelink.his.arc.azure.com",
              "privatelink.kubernetesconfiguration.azure.com",
              "privatelink.managedhsm.azure.net",
              "privatelink.mariadb.database.azure.com",
              "privatelink.media.azure.net",
              "privatelink.mongo.cosmos.azure.com",
              "privatelink.monitor.azure.com",
              "privatelink.mysql.database.azure.com",
              "privatelink.notebooks.azure.net",
              "privatelink.ods.opinsights.azure.com",
              "privatelink.oms.opinsights.azure.com",
              "privatelink.pbidedicated.windows.net",
              "privatelink.postgres.database.azure.com",
              "privatelink.prod.migration.windowsazure.com",
              "privatelink.purview.azure.com",
              "privatelink.purviewstudio.azure.com",
              "privatelink.queue.core.windows.net",
              "privatelink.redis.cache.windows.net",
              "privatelink.redisenterprise.cache.azure.net",
              "privatelink.search.windows.net",
              "privatelink.service.signalr.net",
              "privatelink.servicebus.windows.net",
              "privatelink.siterecovery.windowsazure.com",
              "privatelink.sql.azuresynapse.net",
              "privatelink.table.core.windows.net",
              "privatelink.table.cosmos.azure.com",
              "privatelink.tip1.powerquery.microsoft.com",
              "privatelink.token.botframework.com",
              "privatelink.vaultcore.azure.net",
              "privatelink.web.core.windows.net",
              "privatelink.webpubsub.azure.com"
            ]
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Network/privateDnsZones"
              },
              {
                "field": "name",
                "in": "[parameters('privateLinkDnsZones')]"
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogAnalytics": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Log Analytics workspaces to stream to a Log Analytics workspace when any Log Analytics workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-LogAnalytics",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogAnalytics",
        "displayName": "Deploy Diagnostic Settings for Log Analytics to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "microsoft.operationalinsights/workspaces"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "microsoft.operationalinsights/workspaces/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "Audit",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-minTLS": {
        "metadata": {
          "version": "1.0.0",
          "category": "Storage",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking",
        "name": "Deny-Storage-minTLS",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-minTLS",
        "displayName": "Storage Account set to minimum TLS and Secure transfer should be enabled",
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "The effect determines what happens when the policy rule is evaluated to match"
            }
          },
          "minimumTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_1",
              "TLS1_0"
            ],
            "metadata": {
              "displayName": "Storage Account select minimum TLS version",
              "description": "Select version  minimum TLS version on Azure Storage Account to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Storage/storageAccounts"
              },
              {
                "anyOf": [
                  {
                    "allOf": [
                      {
                        "value": "[requestContext().apiVersion]",
                        "less": "2019-04-01"
                      },
                      {
                        "field": "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly",
                        "exists": "false"
                      }
                    ]
                  },
                  {
                    "field": "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly",
                    "equals": "false"
                  },
                  {
                    "field": "Microsoft.Storage/storageAccounts/minimumTlsVersion",
                    "notequals": "[parameters('minimumTlsVersion')]"
                  },
                  {
                    "field": "Microsoft.Storage/storageAccounts/minimumTlsVersion",
                    "exists": "false"
                  }
                ]
              }
            ]
          },
          "then": {
            "effect": "[parameters('effect')]"
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/DenyAction-ActivityLogs": {
        "metadata": {
          "deprecated": false,
          "version": "1.0.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This is a DenyAction implementation policy on Activity Logs.",
        "name": "DenyAction-ActivityLogs",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/DenyAction-ActivityLogs",
        "displayName": "DenyAction implementation on Activity Logs",
        "parameters": {},
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.Resources/subscriptions/providers/diagnosticSettings"
          },
          "then": {
            "effect": "denyAction",
            "details": {
              "actionNames": [
                "delete"
              ]
            }
          }
        },
        "mode": "Indexed"
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PowerBIEmbedded": {
        "metadata": {
          "version": "1.1.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploys the diagnostic settings for Power BI Embedded to stream to a Log Analytics workspace when any Power BI Embedded which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled",
        "name": "Deploy-Diagnostics-PowerBIEmbedded",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PowerBIEmbedded",
        "displayName": "Deploy Diagnostic Settings for Power BI Embedded to Log Analytics workspace",
        "parameters": {
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "effect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "metricsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable metrics",
              "description": "Whether to enable metrics stream to the Log Analytics workspace - True or False"
            }
          },
          "logsEnabled": {
            "type": "String",
            "defaultValue": "True",
            "allowedValues": [
              "True",
              "False"
            ],
            "metadata": {
              "displayName": "Enable logs",
              "description": "Whether to enable logs stream to the Log Analytics workspace - True or False"
            }
          }
        },
        "policyRule": {
          "if": {
            "field": "type",
            "equals": "Microsoft.PowerBIDedicated/capacities"
          },
          "then": {
            "effect": "[parameters('effect')]",
            "details": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "name": "[parameters('profileName')]",
              "existenceCondition": {
                "allOf": [
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/metrics.enabled",
                    "equals": "true"
                  },
                  {
                    "field": "Microsoft.Insights/diagnosticSettings/workspaceId",
                    "equals": "[parameters('logAnalytics')]"
                  }
                ]
              },
              "roleDefinitionIds": [
                "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
              ],
              "deployment": {
                "properties": {
                  "mode": "Incremental",
                  "template": {
                    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "resourceName": {
                        "type": "String"
                      },
                      "logAnalytics": {
                        "type": "String"
                      },
                      "location": {
                        "type": "String"
                      },
                      "profileName": {
                        "type": "String"
                      },
                      "metricsEnabled": {
                        "type": "String"
                      },
                      "logsEnabled": {
                        "type": "String"
                      }
                    },
                    "variables": {},
                    "resources": [
                      {
                        "type": "Microsoft.PowerBIDedicated/capacities/providers/diagnosticSettings",
                        "apiVersion": "2017-05-01-preview",
                        "name": "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]",
                        "location": "[parameters('location')]",
                        "dependsOn": [],
                        "properties": {
                          "workspaceId": "[parameters('logAnalytics')]",
                          "metrics": [
                            {
                              "category": "AllMetrics",
                              "enabled": "[parameters('metricsEnabled')]",
                              "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                              },
                              "timeGrain": null
                            }
                          ],
                          "logs": [
                            {
                              "category": "Engine",
                              "enabled": "[parameters('logsEnabled')]"
                            }
                          ]
                        }
                      }
                    ],
                    "outputs": {}
                  },
                  "parameters": {
                    "logAnalytics": {
                      "value": "[parameters('logAnalytics')]"
                    },
                    "location": {
                      "value": "[field('location')]"
                    },
                    "resourceName": {
                      "value": "[field('name')]"
                    },
                    "profileName": {
                      "value": "[parameters('profileName')]"
                    },
                    "metricsEnabled": {
                      "value": "[parameters('metricsEnabled')]"
                    },
                    "logsEnabled": {
                      "value": "[parameters('logsEnabled')]"
                    }
                  }
                }
              }
            }
          }
        },
        "mode": "Indexed"
      }
    }
  },
  "createdOn": "2024-04-17 17:48:18Z",
  "policySetDefinitions": {
    "delete": {},
    "numberOfChanges": 15,
    "replace": {},
    "update": {},
    "numberUnchanged": 0,
    "new": {
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-AUM-CheckUpdates": {
        "metadata": {
          "version": "1.0.0",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Configure auto-assessment (every 24 hours) for OS updates. You can control the scope of assignment according to machine subscription, resource group, location or tag. Learn more about this for Windows: https://aka.ms/computevm-windowspatchassessmentmode, for Linux: https://aka.ms/computevm-linuxpatchassessmentmode.",
        "name": "Deploy-AUM-CheckUpdates",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-AUM-CheckUpdates",
        "policyDefinitionGroups": null,
        "displayName": "Configure periodic checking for missing system updates on azure virtual machines and Arc-enabled virtual machines",
        "parameters": {
          "assessmentMode": {
            "type": "String",
            "metadata": {
              "displayName": "Assessment mode",
              "description": "Assessment mode for the machines."
            },
            "allowedValues": [
              "ImageDefault",
              "AutomaticByPlatform"
            ],
            "defaultValue": "AutomaticByPlatform"
          },
          "locations": {
            "type": "Array",
            "metadata": {
              "displayName": "Machines locations",
              "description": "The list of locations from which machines need to be targeted.",
              "strongType": "location"
            },
            "defaultValue": []
          },
          "tagValues": {
            "type": "Object",
            "metadata": {
              "displayName": "Tags on machines",
              "description": "The list of tags that need to matched for getting target machines."
            },
            "defaultValue": {}
          },
          "tagOperator": {
            "type": "String",
            "metadata": {
              "displayName": "Tag operator",
              "description": "Matching condition for resource tags"
            },
            "allowedValues": [
              "All",
              "Any"
            ],
            "defaultValue": "Any"
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "azureUpdateManagerVmCheckUpdateWindows",
            "groupNames": [],
            "parameters": {
              "assessmentMode": {
                "value": "[parameters('assessmentMode')]"
              },
              "osType": {
                "value": "Windows"
              },
              "locations": {
                "value": "[parameters('locations')]"
              },
              "tagValues": {
                "value": "[parameters('tagValues')]"
              },
              "tagOperator": {
                "value": "[parameters('tagOperator')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/59efceea-0c96-497e-a4a1-4eb2290dac15"
          },
          {
            "policyDefinitionReferenceId": "azureUpdateManagerVmCheckUpdateLinux",
            "groupNames": [],
            "parameters": {
              "assessmentMode": {
                "value": "[parameters('assessmentMode')]"
              },
              "osType": {
                "value": "Linux"
              },
              "locations": {
                "value": "[parameters('locations')]"
              },
              "tagValues": {
                "value": "[parameters('tagValues')]"
              },
              "tagOperator": {
                "value": "[parameters('tagOperator')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/59efceea-0c96-497e-a4a1-4eb2290dac15"
          },
          {
            "policyDefinitionReferenceId": "azureUpdateManagerVmArcCheckUpdateWindows",
            "groupNames": [],
            "parameters": {
              "assessmentMode": {
                "value": "[parameters('assessmentMode')]"
              },
              "osType": {
                "value": "Windows"
              },
              "locations": {
                "value": "[parameters('locations')]"
              },
              "tagValues": {
                "value": "[parameters('tagValues')]"
              },
              "tagOperator": {
                "value": "[parameters('tagOperator')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/bfea026e-043f-4ff4-9d1b-bf301ca7ff46"
          },
          {
            "policyDefinitionReferenceId": "azureUpdateManagerVmArcCheckUpdateLinux",
            "groupNames": [],
            "parameters": {
              "assessmentMode": {
                "value": "[parameters('assessmentMode')]"
              },
              "osType": {
                "value": "Linux"
              },
              "locations": {
                "value": "[parameters('locations')]"
              },
              "tagValues": {
                "value": "[parameters('tagValues')]"
              },
              "tagOperator": {
                "value": "[parameters('tagOperator')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/bfea026e-043f-4ff4-9d1b-bf301ca7ff46"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization": {
        "metadata": {
          "version": "2.0.0",
          "category": "Cost Optimization",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Optimize cost by detecting unused but chargeable resources. Leverage this Azure Policy Initiative as a cost control tool to reveal orphaned resources that are contributing cost.",
        "name": "Audit-UnusedResourcesCostOptimization",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization",
        "policyDefinitionGroups": null,
        "displayName": "Unused resources driving cost should be avoided",
        "parameters": {
          "effectDisks": {
            "type": "String",
            "metadata": {
              "displayName": "Disks Effect",
              "description": "Enable or disable the execution of the policy for Microsoft.Compute/disks"
            },
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "effectPublicIpAddresses": {
            "type": "String",
            "metadata": {
              "displayName": "PublicIpAddresses Effect",
              "description": "Enable or disable the execution of the policy for Microsoft.Network/publicIpAddresses"
            },
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "effectServerFarms": {
            "type": "String",
            "metadata": {
              "displayName": "ServerFarms Effect",
              "description": "Enable or disable the execution of the policy for Microsoft.Web/serverfarms"
            },
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "defaultValue": "Audit"
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "AuditDisksUnusedResourcesCostOptimization",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectDisks')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-Disks-UnusedResourcesCostOptimization"
          },
          {
            "policyDefinitionReferenceId": "AuditPublicIpAddressesUnusedResourcesCostOptimization",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectPublicIpAddresses')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization"
          },
          {
            "policyDefinitionReferenceId": "AuditServerFarmsUnusedResourcesCostOptimization",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectServerFarms')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization"
          },
          {
            "policyDefinitionReferenceId": "AuditAzureHybridBenefitUnusedResourcesCostOptimization",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "Audit"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Audit-AzureHybridBenefit"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/DenyAction-DeleteProtection": {
        "metadata": {
          "version": "1.0.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforces DenyAction - Delete on Activity Log Settings and Diagnostic Settings.",
        "name": "DenyAction-DeleteProtection",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/DenyAction-DeleteProtection",
        "policyDefinitionGroups": null,
        "displayName": "DenyAction Delete - Activity Log Settings and Diagnostic Settings",
        "parameters": {},
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "DenyActionDelete-DiagnosticSettings",
            "groupNames": [],
            "parameters": {},
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/DenyAction-DiagnosticLogs"
          },
          {
            "policyDefinitionReferenceId": "DenyActionDelete-ActivityLogSettings",
            "groupNames": [],
            "parameters": {},
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/DenyAction-ActivityLogs"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB": {
        "metadata": {
          "version": "1.0.0",
          "category": "Guest Configuration",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforce Azure Compute Security Benchmark compliance auditing for Windows and Linux virtual machines.",
        "name": "Enforce-ACSB",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB",
        "policyDefinitionGroups": null,
        "displayName": "Enforce Azure Compute Security Benchmark compliance auditing",
        "parameters": {
          "includeArcMachines": {
            "type": "String",
            "allowedValues": [
              "true",
              "false"
            ],
            "metadata": {
              "displayName": "Include Arc connected servers",
              "description": "By selecting this option, you agree to be charged monthly per Arc connected machine."
            },
            "defaultValue": "true"
          },
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "AuditIfNotExists",
              "Disabled"
            ],
            "defaultValue": "AuditIfNotExists"
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "GcIdentity",
            "groupNames": [],
            "parameters": {},
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/3cf2ab00-13f1-4d0c-8971-2ac904541a7e"
          },
          {
            "policyDefinitionReferenceId": "GcLinux",
            "groupNames": [],
            "parameters": {},
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/331e8ea8-378a-410f-a2e5-ae22f38bb0da"
          },
          {
            "policyDefinitionReferenceId": "GcWindows",
            "groupNames": [],
            "parameters": {},
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/385f5831-96d4-41db-9a3c-cd3af78aaae6"
          },
          {
            "policyDefinitionReferenceId": "WinAcsb",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              },
              "IncludeArcMachines": {
                "value": "[parameters('includeArcMachines')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/72650e9f-97bc-4b2a-ab5f-9781a9fcecbc"
          },
          {
            "policyDefinitionReferenceId": "LinAcsb",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              },
              "IncludeArcMachines": {
                "value": "[parameters('includeArcMachines')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/fc9b3da7-8347-4380-8e70-0a0361d8dedd"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Private-DNS-Zones": {
        "metadata": {
          "version": "2.1.2",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy initiative is a group of policies that ensures private endpoints to Azure PaaS services are integrated with Azure Private DNS zones",
        "name": "Deploy-Private-DNS-Zones",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Private-DNS-Zones",
        "policyDefinitionGroups": null,
        "displayName": "Configure Azure PaaS services to use private DNS zones",
        "parameters": {
          "azureFilePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureFilePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureAutomationWebhookPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureAutomationWebhookPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureAutomationDSCHybridPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureAutomationDSCHybridPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureCosmosSQLPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureCosmosSQLPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureCosmosMongoPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureCosmosMongoPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureCosmosCassandraPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureCosmosCassandraPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureCosmosGremlinPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureCosmosGremlinPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureCosmosTablePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureCosmosTablePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureDataFactoryPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureDataFactoryPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureDataFactoryPortalPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureDataFactoryPortalPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureDatabricksPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureDatabricksPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureHDInsightPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureHDInsightPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMigratePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMigratePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageBlobPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageBlobPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageBlobSecPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageBlobSecPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageQueuePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageQueuePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageQueueSecPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageQueueSecPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageFilePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageFilePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageStaticWebPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageStaticWebPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageStaticWebSecPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageStaticWebSecPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageDFSPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageDFSPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureStorageDFSSecPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureStorageDFSSecPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureSynapseSQLPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureSynapseSQLPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureSynapseSQLODPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureSynapseSQLODPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureSynapseDevPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureSynapseDevPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMediaServicesKeyPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMediaServicesKeyPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMediaServicesLivePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMediaServicesLivePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMediaServicesStreamPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMediaServicesStreamPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMonitorPrivateDnsZoneId1": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMonitorPrivateDnsZoneId1",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMonitorPrivateDnsZoneId2": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMonitorPrivateDnsZoneId2",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMonitorPrivateDnsZoneId3": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMonitorPrivateDnsZoneId3",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMonitorPrivateDnsZoneId4": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMonitorPrivateDnsZoneId4",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMonitorPrivateDnsZoneId5": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMonitorPrivateDnsZoneId5",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureWebPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureWebPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureBatchPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureBatchPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureAppPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureAppPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureAsrPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureAsrPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureIotPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureIotPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureKeyVaultPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureKeyVaultPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureSignalRPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureSignalRPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureAppServicesPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureAppServicesPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureEventGridTopicsPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureEventGridTopicsPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureDiskAccessPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureDiskAccessPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureCognitiveServicesPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureCognitiveServicesPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureIotHubsPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureIotHubsPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureEventGridDomainsPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureEventGridDomainsPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureRedisCachePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureRedisCachePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureAcrPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureAcrPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureEventHubNamespacePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureEventHubNamespacePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureMachineLearningWorkspacePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureMachineLearningWorkspacePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureServiceBusNamespacePrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureServiceBusNamespacePrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "azureCognitiveSearchPrivateDnsZoneId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
              "displayName": "azureCognitiveSearchPrivateDnsZoneId",
              "strongType": "Microsoft.Network/privateDnsZones",
              "description": "Private DNS Zone Identifier"
            }
          },
          "effect": {
            "type": "string",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "effect1": {
            "type": "string",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "deployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "deployIfNotExists"
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-File-Sync",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureFilePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/06695360-db88-47f6-b976-7500d4297475"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Automation-Webhook",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureAutomationWebhookPrivateDnsZoneId')]"
              },
              "privateEndpointGroupId": {
                "value": "Webhook"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6dd01e4f-1be1-4e80-9d0b-d109e04cb064"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Automation-DSCHybrid",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureAutomationDSCHybridPrivateDnsZoneId')]"
              },
              "privateEndpointGroupId": {
                "value": "DSCAndHybridWorker"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6dd01e4f-1be1-4e80-9d0b-d109e04cb064"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Cosmos-SQL",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureCosmosSQLPrivateDnsZoneId')]"
              },
              "privateEndpointGroupId": {
                "value": "SQL"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Cosmos-MongoDB",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureCosmosMongoPrivateDnsZoneId')]"
              },
              "privateEndpointGroupId": {
                "value": "MongoDB"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Cosmos-Cassandra",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureCosmosCassandraPrivateDnsZoneId')]"
              },
              "privateEndpointGroupId": {
                "value": "Cassandra"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Cosmos-Gremlin",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureCosmosGremlinPrivateDnsZoneId')]"
              },
              "privateEndpointGroupId": {
                "value": "Gremlin"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Cosmos-Table",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureCosmosTablePrivateDnsZoneId')]"
              },
              "privateEndpointGroupId": {
                "value": "Table"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a63cc0bd-cda4-4178-b705-37dc439d3e0f"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-DataFactory",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureDataFactoryPrivateDnsZoneId')]"
              },
              "listOfGroupIds": {
                "value": [
                  "dataFactory"
                ]
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/86cd96e1-1745-420d-94d4-d3f2fe415aa4"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-DataFactory-Portal",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureDataFactoryPortalPrivateDnsZoneId')]"
              },
              "listOfGroupIds": {
                "value": [
                  "portal"
                ]
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/86cd96e1-1745-420d-94d4-d3f2fe415aa4"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Databricks-UI-Api",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureDatabricksPrivateDnsZoneId')]"
              },
              "groupId": {
                "value": "databricks_ui_api"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0eddd7f3-3d9b-4927-a07a-806e8ac9486c"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Databricks-Browser-AuthN",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureDatabricksPrivateDnsZoneId')]"
              },
              "groupId": {
                "value": "browser_authentication"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0eddd7f3-3d9b-4927-a07a-806e8ac9486c"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-HDInsight",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureHDInsightPrivateDnsZoneId')]"
              },
              "groupId": {
                "value": "cluster"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/43d6e3bd-fc6a-4b44-8b4d-2151d8736a11"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Migrate",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureMigratePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/7590a335-57cf-4c95-babd-ecbc8fafeb1f"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-Blob",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageBlobPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/75973700-529f-4de2-b794-fb9b6781b6b0"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-Blob-Sec",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageBlobSecPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/d847d34b-9337-4e2d-99a5-767e5ac9c582"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-Queue",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageQueuePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/bcff79fb-2b0d-47c9-97e5-3023479b00d1"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-Queue-Sec",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageQueueSecPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/da9b4ae8-5ddc-48c5-b9c0-25f8abf7a3d6"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-File",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageFilePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6df98d03-368a-4438-8730-a93c4d7693d6"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-StaticWeb",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageStaticWebPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/9adab2a5-05ba-4fbd-831a-5bf958d04218"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-StaticWeb-Sec",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageStaticWebSecPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/d19ae5f1-b303-4b82-9ca8-7682749faf0c"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-DFS",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageDFSPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/83c6fe0f-2316-444a-99a1-1ecd8a7872ca"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Storage-DFS-Sec",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureStorageDFSSecPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/90bd4cb3-9f59-45f7-a6ca-f69db2726671"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Synapse-SQL",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureSynapseSQLPrivateDnsZoneId')]"
              },
              "targetSubResource": {
                "value": "Sql"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e5ed725-f16c-478b-bd4b-7bfa2f7940b9"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Synapse-SQL-OnDemand",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureSynapseSQLODPrivateDnsZoneId')]"
              },
              "targetSubResource": {
                "value": "SqlOnDemand"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e5ed725-f16c-478b-bd4b-7bfa2f7940b9"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Synapse-Dev",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureSynapseDevPrivateDnsZoneId')]"
              },
              "targetSubResource": {
                "value": "Dev"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e5ed725-f16c-478b-bd4b-7bfa2f7940b9"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-MediaServices-Key",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureMediaServicesKeyPrivateDnsZoneId')]"
              },
              "groupId": {
                "value": "keydelivery"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b4a7f6c1-585e-4177-ad5b-c2c93f4bb991"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-MediaServices-Live",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureMediaServicesLivePrivateDnsZoneId')]"
              },
              "groupId": {
                "value": "liveevent"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b4a7f6c1-585e-4177-ad5b-c2c93f4bb991"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-MediaServices-Stream",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureMediaServicesStreamPrivateDnsZoneId')]"
              },
              "groupId": {
                "value": "streamingendpoint"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b4a7f6c1-585e-4177-ad5b-c2c93f4bb991"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Monitor",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId1": {
                "value": "[parameters('azureMonitorPrivateDnsZoneId1')]"
              },
              "privateDnsZoneId2": {
                "value": "[parameters('azureMonitorPrivateDnsZoneId2')]"
              },
              "privateDnsZoneId3": {
                "value": "[parameters('azureMonitorPrivateDnsZoneId3')]"
              },
              "privateDnsZoneId4": {
                "value": "[parameters('azureMonitorPrivateDnsZoneId4')]"
              },
              "privateDnsZoneId5": {
                "value": "[parameters('azureMonitorPrivateDnsZoneId5')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/437914ee-c176-4fff-8986-7e05eb971365"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Web",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureWebPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0b026355-49cb-467b-8ac4-f777874e175a"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Batch",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureBatchPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/4ec38ebc-381f-45ee-81a4-acbc4be878f8"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-App",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureAppPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/7a860e27-9ca2-4fc6-822d-c2d248c300df"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-Site-Recovery",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureAsrPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/942bd215-1a66-44be-af65-6a1c0318dbe2"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-IoT",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureIotPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aaa64d2d-2fa3-45e5-b332-0b031b9b30e8"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-KeyVault",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureKeyVaultPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/ac673a9a-f77d-4846-b2d8-a57f8e1c01d4"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-SignalR",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureSignalRPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b0e86710-7fb7-4a6c-a064-32e9b829509e"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-AppServices",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureAppServicesPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b318f84a-b872-429b-ac6d-a01b96814452"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-EventGridTopics",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureEventGridTopicsPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect1')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/baf19753-7502-405f-8745-370519b20483"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-DiskAccess",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureDiskAccessPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/bc05b96c-0b36-4ca9-82f0-5c53f96ce05a"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-CognitiveServices",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureCognitiveServicesPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/c4bc6f10-cb41-49eb-b000-d5ab82e2a091"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-IoTHubs",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureIotHubsPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect1')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/c99ce9c1-ced7-4c3e-aca0-10e69ce0cb02"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-EventGridDomains",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureEventGridDomainsPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect1')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/d389df0a-e0d7-4607-833c-75a6fdac2c2d"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-RedisCache",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureRedisCachePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/e016b22b-e0eb-436d-8fd7-160c4eaed6e2"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-ACR",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureAcrPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/e9585a95-5b8c-4d03-b193-dc7eb5ac4c32"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-EventHubNamespace",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureEventHubNamespacePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/ed66d4f5-8220-45dc-ab4a-20d1749c74e6"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-MachineLearningWorkspace",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureMachineLearningWorkspacePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/ee40564d-486e-4f68-a5ca-7a621edae0fb"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-ServiceBusNamespace",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureServiceBusNamespacePrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/f0fcf93c-c063-4071-9668-c47474bd3564"
          },
          {
            "policyDefinitionReferenceId": "DINE-Private-DNS-Azure-CognitiveSearch",
            "groupNames": [],
            "parameters": {
              "privateDnsZoneId": {
                "value": "[parameters('azureCognitiveSearchPrivateDnsZoneId')]"
              },
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/fbc14a67-53e4-4932-abcc-2049c6706009"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Sql-Security": {
        "metadata": {
          "version": "1.0.0",
          "category": "SQL",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy auditing, Alert, TDE and SQL vulnerability to SQL Databases when it not exist in the deployment",
        "name": "Deploy-Sql-Security",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Sql-Security",
        "policyDefinitionGroups": null,
        "displayName": "Deploy SQL Database built-in SQL security configuration",
        "parameters": {
          "vulnerabilityAssessmentsEmail": {
            "metadata": {
              "description": "The email address to send alerts",
              "displayName": "The email address to send alerts"
            },
            "type": "String"
          },
          "vulnerabilityAssessmentsStorageID": {
            "metadata": {
              "description": "The storage account ID to store assessments",
              "displayName": "The storage account ID to store assessments"
            },
            "type": "String"
          },
          "SqlDbTdeDeploySqlSecurityEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy SQL Database Transparent Data Encryption ",
              "description": "Deploy the Transparent Data Encryption when it is not enabled in the deployment"
            }
          },
          "SqlDbSecurityAlertPoliciesDeploySqlSecurityEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy SQL Database security Alert Policies configuration with email admin accounts",
              "description": "Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration"
            }
          },
          "SqlDbAuditingSettingsDeploySqlSecurityEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy SQL database auditing settings",
              "description": "Deploy auditing settings to SQL Database when it not exist in the deployment"
            }
          },
          "SqlDbVulnerabilityAssessmentsDeploySqlSecurityEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy SQL Database vulnerability Assessments",
              "description": "Deploy SQL Database vulnerability Assessments when it not exist in the deployment. To the specific  storage account in the parameters"
            }
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "SqlDbTdeDeploySqlSecurity",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SqlDbTdeDeploySqlSecurityEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f"
          },
          {
            "policyDefinitionReferenceId": "SqlDbSecurityAlertPoliciesDeploySqlSecurity",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SqlDbSecurityAlertPoliciesDeploySqlSecurityEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-SecurityAlertPolicies"
          },
          {
            "policyDefinitionReferenceId": "SqlDbAuditingSettingsDeploySqlSecurity",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SqlDbAuditingSettingsDeploySqlSecurityEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-AuditingSettings"
          },
          {
            "policyDefinitionReferenceId": "SqlDbVulnerabilityAssessmentsDeploySqlSecurity",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SqlDbVulnerabilityAssessmentsDeploySqlSecurityEffect')]"
              },
              "vulnerabilityAssessmentsEmail": {
                "value": "[parameters('vulnerabilityAssessmentsEmail')]"
              },
              "vulnerabilityAssessmentsStorageID": {
                "value": "[parameters('vulnerabilityAssessmentsStorageID')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Sql-vulnerabilityAssessments"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault": {
        "metadata": {
          "version": "1.0.0",
          "category": "Key Vault",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforce recommended guardrails for Azure Key Vault.",
        "name": "Enforce-Guardrails-KeyVault",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Guardrails-KeyVault",
        "policyDefinitionGroups": null,
        "displayName": "Enforce recommended guardrails for Azure Key Vault",
        "parameters": {
          "effectKvSoftDelete": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "effectKvPurgeProtection": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "effectKvSecretsExpire": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "effectKvKeysExpire": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "effectKvFirewallEnabled": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "effectKvCertLifetime": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "audit",
              "Audit",
              "deny",
              "Deny",
              "disabled",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "maximumCertLifePercentageLife": {
            "type": "Integer",
            "metadata": {
              "displayName": "The maximum lifetime percentage",
              "description": "Enter the percentage of lifetime of the certificate when you want to trigger the policy action. For example, to trigger a policy action at 80% of the certificate's valid life, enter '80'."
            },
            "defaultValue": 80
          },
          "minimumCertLifeDaysBeforeExpiry": {
            "type": "Integer",
            "metadata": {
              "displayName": "The minimum days before expiry",
              "description": "Enter the days before expiration of the certificate when you want to trigger the policy action. For example, to trigger a policy action 90 days before the certificate's expiration, enter '90'."
            },
            "defaultValue": 90
          },
          "effectKvKeysLifetime": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "minimumKeysLifeDaysBeforeExpiry": {
            "type": "Integer",
            "metadata": {
              "displayName": "The minimum days before expiry",
              "description": "Enter the days before expiration of the certificate when you want to trigger the policy action. For example, to trigger a policy action 90 days before the certificate's expiration, enter '90'."
            },
            "defaultValue": 90
          },
          "effectKvSecretsLifetime": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Audit"
          },
          "minimumSecretsLifeDaysBeforeExpiry": {
            "type": "Integer",
            "metadata": {
              "displayName": "The minimum days before expiry",
              "description": "Enter the days before expiration of the certificate when you want to trigger the policy action. For example, to trigger a policy action 90 days before the certificate's expiration, enter '90'."
            },
            "defaultValue": 90
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "KvSoftDelete",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvSoftDelete')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d"
          },
          {
            "policyDefinitionReferenceId": "KvPurgeProtection",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvPurgeProtection')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0b60c0b2-2dc2-4e1c-b5c9-abbed971de53"
          },
          {
            "policyDefinitionReferenceId": "KvSecretsExpire",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvSecretsExpire')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/98728c90-32c7-4049-8429-847dc0f4fe37"
          },
          {
            "policyDefinitionReferenceId": "KvKeysExpire",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvKeysExpire')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/152b15f7-8e1f-4c1f-ab71-8c010ba5dbc0"
          },
          {
            "policyDefinitionReferenceId": "KvFirewallEnabled",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvFirewallEnabled')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/55615ac9-af46-4a59-874e-391cc3dfb490"
          },
          {
            "policyDefinitionReferenceId": "KvCertLifetime",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvCertLifetime')]"
              },
              "maximumPercentageLife": {
                "value": "[parameters('maximumCertLifePercentageLife')]"
              },
              "minimumDaysBeforeExpiry": {
                "value": "[parameters('minimumCertLifeDaysBeforeExpiry')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/12ef42cb-9903-4e39-9c26-422d29570417"
          },
          {
            "policyDefinitionReferenceId": "KvKeysLifetime",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvKeysLifetime')]"
              },
              "minimumDaysBeforeExpiration": {
                "value": "[parameters('minimumKeysLifeDaysBeforeExpiry')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/5ff38825-c5d8-47c5-b70e-069a21955146"
          },
          {
            "policyDefinitionReferenceId": "KvSecretsLifetime",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectKvSecretsLifetime')]"
              },
              "minimumDaysBeforeExpiration": {
                "value": "[parameters('minimumSecretsLifeDaysBeforeExpiry')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b0eb591a-5e70-4534-a8bf-04b9c489584a"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Decomm": {
        "metadata": {
          "version": "1.0.0",
          "category": "Decommissioned",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforce policies in the Decommissioned Landing Zone.",
        "name": "Enforce-ALZ-Decomm",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Decomm",
        "policyDefinitionGroups": null,
        "displayName": "Enforce policies in the Decommissioned Landing Zone",
        "parameters": {
          "listOfResourceTypesAllowed": {
            "type": "Array",
            "defaultValue": [],
            "metadata": {
              "displayName": "Allowed resource types in the Decommissioned landing zone",
              "description": "Allowed resource types in the Decommissioned landing zone, default is none.",
              "strongType": "resourceTypes"
            }
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "DecomDenyResources",
            "groupNames": [],
            "parameters": {
              "listOfResourceTypesAllowed": {
                "value": "[parameters('listOfResourceTypesAllowed')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a08ec900-254a-4555-9bf5-e42af04b5c5c"
          },
          {
            "policyDefinitionReferenceId": "DecomShutdownMachines",
            "groupNames": [],
            "parameters": {},
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Vm-autoShutdown"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config": {
        "metadata": {
          "version": "7.0.0",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deploy Microsoft Defender for Cloud configuration",
        "name": "Deploy-MDFC-Config",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config",
        "policyDefinitionGroups": null,
        "displayName": "Deploy Microsoft Defender for Cloud configuration",
        "parameters": {
          "emailSecurityContact": {
            "type": "string",
            "metadata": {
              "displayName": "Security contacts email address",
              "description": "Provide email address for Microsoft Defender for Cloud contact details"
            }
          },
          "minimalSeverity": {
            "type": "string",
            "allowedValues": [
              "High",
              "Medium",
              "Low"
            ],
            "defaultValue": "High",
            "metadata": {
              "displayName": "Minimal severity",
              "description": "Defines the minimal alert severity which will be sent as email notifications"
            }
          },
          "logAnalytics": {
            "type": "String",
            "metadata": {
              "displayName": "Primary Log Analytics workspace",
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "strongType": "omsWorkspace"
            }
          },
          "ascExportResourceGroupName": {
            "type": "String",
            "metadata": {
              "displayName": "Resource Group name for the export to Log Analytics workspace configuration",
              "description": "The resource group name where the export to Log Analytics workspace configuration is created. If you enter a name for a resource group that doesn't exist, it'll be created in the subscription. Note that each resource group can only have one export to Log Analytics workspace configured."
            }
          },
          "ascExportResourceGroupLocation": {
            "type": "String",
            "metadata": {
              "displayName": "Resource Group location for the export to Log Analytics workspace configuration",
              "description": "The location where the resource group and the export to Log Analytics workspace configuration are created."
            }
          },
          "enableAscForCosmosDbs": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForSql": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForSqlOnVm": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForDns": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForArm": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForOssDb": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForAppServices": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForKeyVault": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForStorage": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForContainers": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForServers": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForServersVulnerabilityAssessments": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "vulnerabilityAssessmentProvider": {
            "type": "String",
            "allowedValues": [
              "default",
              "mdeTvm"
            ],
            "defaultValue": "default",
            "metadata": {
              "displayName": "Vulnerability assessment provider type",
              "description": "Select the vulnerability assessment solution to provision to machines."
            }
          },
          "enableAscForApis": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "enableAscForCspm": {
            "type": "String",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "defenderForOssDb",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForOssDb')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/44433aa3-7ec2-4002-93ea-65c65ff0310a"
          },
          {
            "policyDefinitionReferenceId": "defenderForVM",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForServers')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/8e86a5b6-b9bd-49d1-8e21-4bb8a0862222"
          },
          {
            "policyDefinitionReferenceId": "defenderForVMVulnerabilityAssessment",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForServersVulnerabilityAssessments')]"
              },
              "vaType": {
                "value": "[parameters('vulnerabilityAssessmentProvider')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/13ce0167-8ca6-4048-8e6b-f996402e3c1b"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlServerVirtualMachines",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForSqlOnVm')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/50ea7265-7d8c-429e-9a7d-ca1f410191c3"
          },
          {
            "policyDefinitionReferenceId": "defenderForAppServices",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForAppServices')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b40e7bcd-a1e5-47fe-b9cf-2f534d0bfb7d"
          },
          {
            "policyDefinitionReferenceId": "defenderForStorageAccountsV2",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForStorage')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/cfdc5972-75b3-4418-8ae1-7f5c36839390"
          },
          {
            "policyDefinitionReferenceId": "defenderforContainers",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForContainers')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/c9ddb292-b203-4738-aead-18e2716e858f"
          },
          {
            "policyDefinitionReferenceId": "defenderforKubernetes",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForContainers')]"
              },
              "logAnalyticsWorkspaceResourceId": {
                "value": "[parameters('logAnalytics')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/64def556-fbad-4622-930e-72d1d5589bf5"
          },
          {
            "policyDefinitionReferenceId": "azurePolicyForKubernetes",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForContainers')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7"
          },
          {
            "policyDefinitionReferenceId": "defenderForKeyVaults",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForKeyVault')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1f725891-01c0-420a-9059-4fa46cb770b7"
          },
          {
            "policyDefinitionReferenceId": "defenderForDns",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForDns')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2370a3c1-4a25-4283-a91a-c9c1a145fb2f"
          },
          {
            "policyDefinitionReferenceId": "defenderForArm",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForArm')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b7021b2b-08fd-4dc0-9de7-3c6ece09faf9"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlPaas",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForSql')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b99b73e7-074b-4089-9395-b7236f094491"
          },
          {
            "policyDefinitionReferenceId": "defenderForCosmosDbs",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForCosmosDbs')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/82bf5b87-728b-4a74-ba4d-6123845cf542"
          },
          {
            "policyDefinitionReferenceId": "defenderForApis",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForApis')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/e54d2be9-5f2e-4d65-98e4-4f0e670b23d6"
          },
          {
            "policyDefinitionReferenceId": "defenderForCspm",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('enableAscForCspm')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/689f7782-ef2c-4270-a6d0-7664869076bd"
          },
          {
            "policyDefinitionReferenceId": "securityEmailContact",
            "groupNames": [],
            "parameters": {
              "emailSecurityContact": {
                "value": "[parameters('emailSecurityContact')]"
              },
              "minimalSeverity": {
                "value": "[parameters('minimalSeverity')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-SecurityContacts"
          },
          {
            "policyDefinitionReferenceId": "ascExport",
            "groupNames": [],
            "parameters": {
              "resourceGroupName": {
                "value": "[parameters('ascExportResourceGroupName')]"
              },
              "resourceGroupLocation": {
                "value": "[parameters('ascExportResourceGroupLocation')]"
              },
              "workspaceResourceId": {
                "value": "[parameters('logAnalytics')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/ffb6f416-7bd2-4488-8828-56585fef2be9"
          },
          {
            "policyDefinitionReferenceId": "migrateToMdeTvm",
            "groupNames": [],
            "parameters": {},
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/766e621d-ba95-4e43-a6f2-e945db3d7888"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Sandbox": {
        "metadata": {
          "version": "1.0.0",
          "category": "Sandbox",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Enforce policies in the Sandbox Landing Zone.",
        "name": "Enforce-ALZ-Sandbox",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ALZ-Sandbox",
        "policyDefinitionGroups": null,
        "displayName": "Enforce policies in the Sandbox Landing Zone",
        "parameters": {
          "listOfResourceTypesNotAllowed": {
            "type": "Array",
            "defaultValue": [],
            "metadata": {
              "displayName": "Not allowed resource types in the Sandbox landing zone",
              "description": "Not allowed resource types in the Sandbox landing zone, default is none.",
              "strongType": "resourceTypes"
            }
          },
          "effectNotAllowedResources": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "effectDenyVnetPeering": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "SandboxNotAllowed",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectNotAllowedResources')]"
              },
              "listOfResourceTypesNotAllowed": {
                "value": "[parameters('listOfResourceTypesNotAllowed')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749"
          },
          {
            "policyDefinitionReferenceId": "SandboxDenyVnetPeering",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effectDenyVnetPeering')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-VNET-Peer-Cross-Sub"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Diagnostics-LogAnalytics": {
        "metadata": {
          "version": "2.2.0",
          "category": "Monitoring",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy set deploys the configurations of application Azure resources to forward diagnostic logs and metrics to an Azure Log Analytics workspace. See the list of policies of the services that are included ",
        "name": "Deploy-Diagnostics-LogAnalytics",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Diagnostics-LogAnalytics",
        "policyDefinitionGroups": null,
        "displayName": "Deploy Diagnostic Settings to Azure Services",
        "parameters": {
          "logAnalytics": {
            "metadata": {
              "description": "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.",
              "displayName": "Log Analytics workspace",
              "strongType": "omsWorkspace"
            },
            "type": "String"
          },
          "profileName": {
            "type": "String",
            "defaultValue": "setbypolicy",
            "metadata": {
              "displayName": "Profile name",
              "description": "The diagnostic settings profile name"
            }
          },
          "ACILogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Container Instances to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Container Instances to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. The Policy willset the diagnostic with all metrics enabled."
            }
          },
          "ACRLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Container Registry to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Container Registry to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics  enabled."
            }
          },
          "AKSLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Kubernetes Service to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Kubernetes Service to stream to a Log Analytics workspace when any Kubernetes Service which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled."
            }
          },
          "AnalysisServiceLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Analysis Services to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Analysis Services to stream to a Log Analytics workspace when any Analysis Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "APIforFHIRLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Azure API for FHIR to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Azure API for FHIR to stream to a Log Analytics workspace when any Azure API for FHIR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "APIMgmtLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for API Management to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for API Management to stream to a Log Analytics workspace when any API Management which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "APIMgmtLogAnalyticsDestinationType": {
            "type": "String",
            "defaultValue": "AzureDiagnostics",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "metadata": {
              "displayName": "Destination table for the Diagnostic Setting for API Management to Log Analytics workspace",
              "description": "Destination table for the diagnostic setting for API Management to Log Analytics workspace, allowed values are 'Dedicated' (for resource-specific) and 'AzureDiagnostics'. Default value is 'AzureDiagnostics'"
            }
          },
          "ApplicationGatewayLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Application Gateway to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Application Gateway to stream to a Log Analytics workspace when any Application Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "AutomationLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Automation to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Automation to stream to a Log Analytics workspace when any Automation which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "BastionLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Azure Bastion to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Azure Bastion to stream to a Log Analytics workspace when any Bastion which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "BatchLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Batch to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Batch to stream to a Log Analytics workspace when any Batch which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "CDNEndpointsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for CDN Endpoint to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for CDN Endpoint to stream to a Log Analytics workspace when any CDN Endpoint which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "CognitiveServicesLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Cognitive Services to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Cognitive Services to stream to a Log Analytics workspace when any Cognitive Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "CosmosLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Cosmos DB to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Cosmos DB to stream to a Log Analytics workspace when any Cosmos DB which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "DatabricksLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Databricks to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Databricks to stream to a Log Analytics workspace when any Databricks which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "DataExplorerClusterLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Azure Data Explorer Cluster to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Azure Data Explorer Cluster to stream to a Log Analytics workspace when any Azure Data Explorer Cluster which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "DataFactoryLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Data Factory to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Data Factory to stream to a Log Analytics workspace when any Data Factory which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "DataLakeStoreLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Azure Data Lake Store to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Azure Data Lake Store to stream to a Log Analytics workspace when anyAzure Data Lake Store which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "DataLakeAnalyticsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Data Lake Analytics to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Data Lake Analytics to stream to a Log Analytics workspace when any Data Lake Analytics which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "EventGridSubLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Event Grid subscriptions to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Event Grid subscriptions to stream to a Log Analytics workspace when any Event Grid subscriptions which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "EventGridTopicLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Event Grid Topic to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Event Grid Topic to stream to a Log Analytics workspace when any Event Grid Topic which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "EventHubLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Event Hubs to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Event Hubs to stream to a Log Analytics workspace when any Event Hubs which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "EventSystemTopicLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Event Grid System Topic to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Event Grid System Topic to stream to a Log Analytics workspace when any Event Grid System Topic which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "ExpressRouteLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for ExpressRoute to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for ExpressRoute to stream to a Log Analytics workspace when any ExpressRoute which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "FirewallLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Firewall to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Firewall to stream to a Log Analytics workspace when any Firewall which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "FirewallLogAnalyticsDestinationType": {
            "type": "String",
            "defaultValue": "AzureDiagnostics",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "metadata": {
              "displayName": "Destination table for the Diagnostic Setting for Firewall to Log Analytics workspace",
              "description": "Destination table for the diagnostic setting for Firewall to Log Analytics workspace, allowed values are 'Dedicated' (for resource-specific) and 'AzureDiagnostics'. Default value is 'AzureDiagnostics'"
            }
          },
          "FrontDoorLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Front Door to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Front Door to stream to a Log Analytics workspace when any Front Door which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "FunctionAppLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Azure Function App to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Azure Function App to stream to a Log Analytics workspace when any function app which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "HDInsightLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for HDInsight to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for HDInsight to stream to a Log Analytics workspace when any HDInsight which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "IotHubLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for IoT Hub to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for IoT Hub to stream to a Log Analytics workspace when any IoT Hub which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "KeyVaultLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Key Vault to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Key Vault to stream to a Log Analytics workspace when any Key Vault which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "LoadBalancerLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Load Balancer to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Load Balancer to stream to a Log Analytics workspace when any Load Balancer which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "LogAnalyticsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Log Analytics to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Log Analytics to stream to a Log Analytics workspace when any Log Analytics workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category Audit enabled"
            }
          },
          "LogicAppsISELogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Logic Apps integration service environment to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Logic Apps integration service environment to stream to a Log Analytics workspace when any Logic Apps integration service environment which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "LogicAppsWFLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Logic Apps Workflows to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Logic Apps Workflows to stream to a Log Analytics workspace when any Logic Apps Workflows which are missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "MariaDBLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for MariaDB to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for MariaDB to stream to a Log Analytics workspace when any MariaDB  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "MediaServiceLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Azure Media Service to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Azure Media Service to stream to a Log Analytics workspace when any Azure Media Service which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "MlWorkspaceLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Machine Learning workspace to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Machine Learning workspace to stream to a Log Analytics workspace when any Machine Learning workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "MySQLLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Database for MySQL to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Database for MySQL to stream to a Log Analytics workspace when any Database for MySQL which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "NetworkSecurityGroupsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Network Security Groups to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "NetworkNICLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Network Interfaces to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Network Interfaces to stream to a Log Analytics workspace when any Network Interfaces which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "PostgreSQLLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Database for PostgreSQL to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Database for PostgreSQL to stream to a Log Analytics workspace when any Database for PostgreSQL which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "PowerBIEmbeddedLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Power BI Embedded to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Power BI Embedded to stream to a Log Analytics workspace when any Power BI Embedded which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "NetworkPublicIPNicLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Public IP addresses to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Public IP addresses to stream to a Log Analytics workspace when any Public IP addresses which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "RedisCacheLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Redis Cache to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Redis Cache to stream to a Log Analytics workspace when any Redis Cache which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "RelayLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Relay to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Relay to stream to a Log Analytics workspace when any Relay which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "SearchServicesLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Search Services to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Search Services to stream to a Log Analytics workspace when any Search Services which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "ServiceBusLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Service Bus namespaces  to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for ServiceBus to stream to a Log Analytics workspace when any ServiceBus which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "SignalRLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for SignalR to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for SignalR to stream to a Log Analytics workspace when any SignalR which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "SQLDBsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for SQL Databases  to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for SQL Databases to stream to a Log Analytics workspace when any SQL Databases  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "SQLElasticPoolsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for SQL Elastic Pools to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for SQL Elastic Pools to stream to a Log Analytics workspace when any SQL Elastic Pools which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "SQLMLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for SQL Managed Instances to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for SQL Managed Instances to stream to a Log Analytics workspace when any SQL Managed Instances which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "StreamAnalyticsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Stream Analytics to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Stream Analytics to stream to a Log Analytics workspace when any Stream Analytics which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "TimeSeriesInsightsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Time Series Insights to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Time Series Insights to stream to a Log Analytics workspace when any Time Series Insights which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "TrafficManagerLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Traffic Manager to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Traffic Manager to stream to a Log Analytics workspace when any Traffic Manager which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "VirtualNetworkLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Virtual Network to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "VirtualMachinesLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Virtual Machines to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "VMSSLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Virtual Machine Scale Sets to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Virtual Machine Scale Sets  to stream to a Log Analytics workspace when any Virtual Machine Scale Sets  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "VNetGWLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for VPN Gateway to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for VPN Gateway to stream to a Log Analytics workspace when any VPN Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled."
            }
          },
          "AppServiceLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for App Service Plan to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for App Service Plan to stream to a Log Analytics workspace when any App Service Plan which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "AppServiceWebappLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for App Service to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Web App to stream to a Log Analytics workspace when any Web App which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "AVDScalingPlansLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for AVD Scaling Plans to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for AVD Scaling Plans to stream to a Log Analytics workspace when any application groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "WVDAppGroupsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for AVD Application Groups to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for AVD Application groups to stream to a Log Analytics workspace when any application groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "WVDWorkspaceLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for AVD Workspace to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for AVD Workspace to stream to a Log Analytics workspace when any Workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "WVDHostPoolsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for AVD Host pools to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for AVD Host pools to stream to a Log Analytics workspace when any host pool which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "StorageAccountsLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for Storage Accounts to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for Storage Accounts to stream to a Log Analytics workspace when any storage account which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          },
          "VWanS2SVPNGWLogAnalyticsEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Deploy Diagnostic Settings for VWAN S2S VPN gateway to Log Analytics workspace",
              "description": "Deploys the diagnostic settings for VWAN S2S VPN gateway to stream to a Log Analytics workspace when any storage account which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
            }
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "StorageAccountDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('StorageAccountsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/59759c62-9a22-4cdf-ae64-074495983fef"
          },
          {
            "policyDefinitionReferenceId": "StorageAccountBlobServicesDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('StorageAccountsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b4fe1a3b-0715-4c6c-a5ea-ffc33cf823cb"
          },
          {
            "policyDefinitionReferenceId": "StorageAccountFileServicesDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('StorageAccountsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/25a70cc8-2bd4-47f1-90b6-1478e4662c96"
          },
          {
            "policyDefinitionReferenceId": "StorageAccountQueueServicesDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('StorageAccountsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/7bd000e3-37c7-4928-9f31-86c4b77c5c45"
          },
          {
            "policyDefinitionReferenceId": "StorageAccountTableServicesDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('StorageAccountsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2fb86bf3-d221-43d1-96d1-2434af34eaa0"
          },
          {
            "policyDefinitionReferenceId": "AVDScalingPlansDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('AVDScalingPlansLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDScalingPlans"
          },
          {
            "policyDefinitionReferenceId": "WVDAppGroupDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('WVDAppGroupsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDAppGroup"
          },
          {
            "policyDefinitionReferenceId": "WVDWorkspaceDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('WVDWorkspaceLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDWorkspace"
          },
          {
            "policyDefinitionReferenceId": "WVDHostPoolsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('WVDHostPoolsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WVDHostPools"
          },
          {
            "policyDefinitionReferenceId": "ACIDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('ACILogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACI"
          },
          {
            "policyDefinitionReferenceId": "ACRDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('ACRLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ACR"
          },
          {
            "policyDefinitionReferenceId": "AKSDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('AKSLogAnalyticsEffect')]"
              },
              "diagnosticsSettingNameToUse": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6c66c325-74c8-42fd-a286-a74b0e2939d8"
          },
          {
            "policyDefinitionReferenceId": "AnalysisServiceDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('AnalysisServiceLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AnalysisService"
          },
          {
            "policyDefinitionReferenceId": "APIforFHIRDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('APIforFHIRLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApiForFHIR"
          },
          {
            "policyDefinitionReferenceId": "APIMgmtDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "logAnalyticsDestinationType": {
                "value": "[parameters('APIMgmtLogAnalyticsDestinationType')]"
              },
              "effect": {
                "value": "[parameters('APIMgmtLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-APIMgmt"
          },
          {
            "policyDefinitionReferenceId": "ApplicationGatewayDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('ApplicationGatewayLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ApplicationGateway"
          },
          {
            "policyDefinitionReferenceId": "AutomationDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('AutomationLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AA"
          },
          {
            "policyDefinitionReferenceId": "BastionDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('BastionLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Bastion"
          },
          {
            "policyDefinitionReferenceId": "BatchDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('BatchLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/c84e5349-db6d-4769-805e-e14037dab9b5"
          },
          {
            "policyDefinitionReferenceId": "CDNEndpointsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('CDNEndpointsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CDNEndpoints"
          },
          {
            "policyDefinitionReferenceId": "CognitiveServicesDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('CognitiveServicesLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CognitiveServices"
          },
          {
            "policyDefinitionReferenceId": "CosmosDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('CosmosLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-CosmosDB"
          },
          {
            "policyDefinitionReferenceId": "DatabricksDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('DatabricksLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Databricks"
          },
          {
            "policyDefinitionReferenceId": "DataExplorerClusterDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('DataExplorerClusterLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataExplorerCluster"
          },
          {
            "policyDefinitionReferenceId": "DataFactoryDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('DataFactoryLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DataFactory"
          },
          {
            "policyDefinitionReferenceId": "DataLakeStoreDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('DataLakeStoreLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/d56a5a7c-72d7-42bc-8ceb-3baf4c0eae03"
          },
          {
            "policyDefinitionReferenceId": "DataLakeAnalyticsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('DataLakeAnalyticsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-DLAnalytics"
          },
          {
            "policyDefinitionReferenceId": "EventGridSubDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('EventGridSubLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSub"
          },
          {
            "policyDefinitionReferenceId": "EventGridTopicDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('EventGridTopicLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridTopic"
          },
          {
            "policyDefinitionReferenceId": "EventHubDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('EventHubLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1f6e93e8-6b31-41b1-83f6-36e449a42579"
          },
          {
            "policyDefinitionReferenceId": "EventSystemTopicDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('EventSystemTopicLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-EventGridSystemTopic"
          },
          {
            "policyDefinitionReferenceId": "ExpressRouteDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('ExpressRouteLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ExpressRoute"
          },
          {
            "policyDefinitionReferenceId": "FirewallDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "logAnalyticsDestinationType": {
                "value": "[parameters('FirewallLogAnalyticsDestinationType')]"
              },
              "effect": {
                "value": "[parameters('FirewallLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Firewall"
          },
          {
            "policyDefinitionReferenceId": "FrontDoorDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('FrontDoorLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-FrontDoor"
          },
          {
            "policyDefinitionReferenceId": "FunctionAppDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('FunctionAppLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Function"
          },
          {
            "policyDefinitionReferenceId": "HDInsightDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('HDInsightLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-HDInsight"
          },
          {
            "policyDefinitionReferenceId": "IotHubDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('IotHubLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-iotHub"
          },
          {
            "policyDefinitionReferenceId": "KeyVaultDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('KeyVaultLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/bef3f64c-5290-43b7-85b0-9b254eef4c47"
          },
          {
            "policyDefinitionReferenceId": "LoadBalancerDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('LoadBalancerLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LoadBalancer"
          },
          {
            "policyDefinitionReferenceId": "LogAnalyticsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('LogAnalyticsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogAnalytics"
          },
          {
            "policyDefinitionReferenceId": "LogicAppsISEDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('LogicAppsISELogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-LogicAppsISE"
          },
          {
            "policyDefinitionReferenceId": "LogicAppsWFDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('LogicAppsWFLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b889a06c-ec72-4b03-910a-cb169ee18721"
          },
          {
            "policyDefinitionReferenceId": "MariaDBDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('MariaDBLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MariaDB"
          },
          {
            "policyDefinitionReferenceId": "MediaServiceDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('MediaServiceLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MediaService"
          },
          {
            "policyDefinitionReferenceId": "MlWorkspaceDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('MlWorkspaceLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MlWorkspace"
          },
          {
            "policyDefinitionReferenceId": "MySQLDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('MySQLLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-MySQL"
          },
          {
            "policyDefinitionReferenceId": "NetworkSecurityGroupsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('NetworkSecurityGroupsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NetworkSecurityGroups"
          },
          {
            "policyDefinitionReferenceId": "NetworkNICDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('NetworkNICLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NIC"
          },
          {
            "policyDefinitionReferenceId": "PostgreSQLDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('PostgreSQLLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PostgreSQL"
          },
          {
            "policyDefinitionReferenceId": "PowerBIEmbeddedDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('PowerBIEmbeddedLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-PowerBIEmbedded"
          },
          {
            "policyDefinitionReferenceId": "NetworkPublicIPNicDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('NetworkPublicIPNicLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              },
              "metricsEnabled": {
                "value": "True"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/752154a7-1e0f-45c6-a880-ac75a7e4f648"
          },
          {
            "policyDefinitionReferenceId": "RecoveryVaultDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/c717fb0c-d118-4c43-ab3d-ece30ac81fb3"
          },
          {
            "policyDefinitionReferenceId": "RedisCacheDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('RedisCacheLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-RedisCache"
          },
          {
            "policyDefinitionReferenceId": "RelayDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('RelayLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Relay"
          },
          {
            "policyDefinitionReferenceId": "SearchServicesDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('SearchServicesLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/08ba64b8-738f-4918-9686-730d2ed79c7d"
          },
          {
            "policyDefinitionReferenceId": "ServiceBusDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('ServiceBusLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/04d53d87-841c-4f23-8a5b-21564380b55e"
          },
          {
            "policyDefinitionReferenceId": "SignalRDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('SignalRLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SignalR"
          },
          {
            "policyDefinitionReferenceId": "SQLDatabaseDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('SQLDBsLogAnalyticsEffect')]"
              },
              "diagnosticsSettingNameToUse": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b79fa14e-238a-4c2d-b376-442ce508fc84"
          },
          {
            "policyDefinitionReferenceId": "SQLElasticPoolsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('SQLElasticPoolsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLElasticPools"
          },
          {
            "policyDefinitionReferenceId": "SQLMDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('SQLMLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-SQLMI"
          },
          {
            "policyDefinitionReferenceId": "StreamAnalyticsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('StreamAnalyticsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/237e0f7e-b0e8-4ec4-ad46-8c12cb66d673"
          },
          {
            "policyDefinitionReferenceId": "TimeSeriesInsightsDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('TimeSeriesInsightsLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TimeSeriesInsights"
          },
          {
            "policyDefinitionReferenceId": "TrafficManagerDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('TrafficManagerLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-TrafficManager"
          },
          {
            "policyDefinitionReferenceId": "VirtualNetworkDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('VirtualNetworkLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VirtualNetwork"
          },
          {
            "policyDefinitionReferenceId": "VirtualMachinesDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('VirtualMachinesLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VM"
          },
          {
            "policyDefinitionReferenceId": "VMSSDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('VMSSLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VMSS"
          },
          {
            "policyDefinitionReferenceId": "VNetGWDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('VNetGWLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VNetGW"
          },
          {
            "policyDefinitionReferenceId": "AppServiceDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('AppServiceLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-WebServerFarm"
          },
          {
            "policyDefinitionReferenceId": "AppServiceWebappDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('AppServiceWebappLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-Website"
          },
          {
            "policyDefinitionReferenceId": "VWanS2SVPNGWDeployDiagnosticLogDeployLogAnalytics",
            "groupNames": [],
            "parameters": {
              "logAnalytics": {
                "value": "[parameters('logAnalytics')]"
              },
              "effect": {
                "value": "[parameters('VWanS2SVPNGWLogAnalyticsEffect')]"
              },
              "profileName": {
                "value": "[parameters('profileName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VWanS2SVPNGW"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Encryption-CMK": {
        "metadata": {
          "version": "2.0.0",
          "category": "Encryption",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Deny or Audit resources without Encryption with a customer-managed key (CMK)",
        "name": "Enforce-Encryption-CMK",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-Encryption-CMK",
        "policyDefinitionGroups": null,
        "displayName": "Deny or Audit resources without Encryption with a customer-managed key (CMK)",
        "parameters": {
          "ACRCmkEffect": {
            "metadata": {
              "displayName": "Container registries should be encrypted with a customer-managed key (CMK)",
              "description": "Use customer-managed keys to manage the encryption at rest of the contents of your registries. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/acr/CMK."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ]
          },
          "AksCmkEffect": {
            "metadata": {
              "displayName": "Azure Kubernetes Service clusters both operating systems and data disks should be encrypted by customer-managed keys",
              "description": "Encrypting OS and data disks using customer-managed keys provides more control and greater flexibility in key management. This is a common requirement in many regulatory and industry compliance standards."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ]
          },
          "WorkspaceCMKEffect": {
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure Machine Learning workspaces should be encrypted with a customer-managed key (CMK)",
              "description": "Manage encryption at rest of your Azure Machine Learning workspace data with customer-managed keys (CMK). By default, customer data is encrypted with service-managed keys, but CMKs are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/azureml-workspaces-cmk."
            }
          },
          "CognitiveServicesCMKEffect": {
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Cognitive Services accounts should enable data encryption with a customer-managed key (CMK)",
              "description": "Customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data stored in Cognitive Services to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/cosmosdb-cmk."
            }
          },
          "CosmosCMKEffect": {
            "type": "String",
            "defaultValue": "audit",
            "allowedValues": [
              "audit",
              "deny",
              "disabled"
            ],
            "metadata": {
              "displayName": "Azure Cosmos DB accounts should use customer-managed keys to encrypt data at rest",
              "description": "Use customer-managed keys to manage the encryption at rest of your Azure Cosmos DB. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/cosmosdb-cmk."
            }
          },
          "DataBoxCMKEffect": {
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure Data Box jobs should use a customer-managed key to encrypt the device unlock password",
              "description": "Use a customer-managed key to control the encryption of the device unlock password for Azure Data Box. Customer-managed keys also help manage access to the device unlock password by the Data Box service in order to prepare the device and copy data in an automated manner. The data on the device itself is already encrypted at rest with Advanced Encryption Standard 256-bit encryption, and the device unlock password is encrypted by default with a Microsoft managed key."
            }
          },
          "StreamAnalyticsCMKEffect": {
            "type": "String",
            "defaultValue": "audit",
            "allowedValues": [
              "audit",
              "deny",
              "disabled"
            ],
            "metadata": {
              "displayName": "Azure Stream Analytics jobs should use customer-managed keys to encrypt data",
              "description": "Use customer-managed keys when you want to securely store any metadata and private data assets of your Stream Analytics jobs in your storage account. This gives you total control over how your Stream Analytics data is encrypted."
            }
          },
          "SynapseWorkspaceCMKEffect": {
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure Synapse workspaces should use customer-managed keys to encrypt data at rest",
              "description": "Use customer-managed keys to control the encryption at rest of the data stored in Azure Synapse workspaces. Customer-managed keys deliver double encryption by adding a second layer of encryption on top of the default encryption with service-managed keys."
            }
          },
          "StorageCMKEffect": {
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Storage accounts should use customer-managed key (CMK) for encryption, no deny as this would result in not able to create storage account because the first need of MSI for encryption",
              "description": "Secure your storage account with greater flexibility using customer-managed keys (CMKs). When you specify a CMK, that key is used to protect and control access to the key that encrypts your data. Using CMKs provides additional capabilities to control rotation of the key encryption key or cryptographically erase data."
            }
          },
          "MySQLCMKEffect": {
            "type": "String",
            "defaultValue": "AuditIfNotExists",
            "allowedValues": [
              "AuditIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure MySQL servers bring your own key data protection should be enabled",
              "description": "Use customer-managed keys to manage the encryption at rest of your MySQL servers. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management."
            }
          },
          "PostgreSQLCMKEffect": {
            "type": "String",
            "defaultValue": "AuditIfNotExists",
            "allowedValues": [
              "AuditIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure PostgreSQL servers bring your own key data protection should be enabled",
              "description": "Use customer-managed keys to manage the encryption at rest of your PostgreSQL servers. By default, the data is encrypted at rest with service-managed keys, but customer-managed keys (CMK) are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management."
            }
          },
          "SqlServerTDECMKEffect": {
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "SQL servers should use customer-managed keys to encrypt data at rest",
              "description": "Implementing Transparent Data Encryption (TDE) with your own key provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties. This recommendation applies to organizations with a related compliance requirement."
            }
          },
          "HealthcareAPIsCMKEffect": {
            "type": "String",
            "defaultValue": "audit",
            "allowedValues": [
              "audit",
              "disabled"
            ],
            "metadata": {
              "displayName": "Azure API for FHIR should use a customer-managed key (CMK) to encrypt data at rest",
              "description": "Use a customer-managed key to control the encryption at rest of the data stored in Azure API for FHIR when this is a regulatory or compliance requirement. Customer-managed keys also deliver double encryption by adding a second layer of encryption on top of the default one done with service-managed keys."
            }
          },
          "AzureBatchCMKEffect": {
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure Batch account should use customer-managed keys to encrypt data",
              "description": "Use customer-managed keys (CMKs) to manage the encryption at rest of your Batch account's data. By default, customer data is encrypted with service-managed keys, but CMKs are commonly required to meet regulatory compliance standards. CMKs enable the data to be encrypted with an Azure Key Vault key created and owned by you. You have full control and responsibility for the key lifecycle, including rotation and management. Learn more about CMK encryption at https://aka.ms/Batch-CMK."
            }
          },
          "EncryptedVMDisksEffect": {
            "type": "String",
            "defaultValue": "AuditIfNotExists",
            "allowedValues": [
              "AuditIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Disk encryption should be applied on virtual machines",
              "description": "Virtual machines without an enabled disk encryption will be monitored by Azure Security Center as recommendations."
            }
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "ACRCmkDeny",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('ACRCmkEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580"
          },
          {
            "policyDefinitionReferenceId": "AksCmkDeny",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AksCmkEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/7d7be79c-23ba-4033-84dd-45e2a5ccdd67"
          },
          {
            "policyDefinitionReferenceId": "WorkspaceCMK",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('WorkspaceCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/ba769a63-b8cc-4b2d-abf6-ac33c7204be8"
          },
          {
            "policyDefinitionReferenceId": "CognitiveServicesCMK",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('CognitiveServicesCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/67121cc7-ff39-4ab8-b7e3-95b84dab487d"
          },
          {
            "policyDefinitionReferenceId": "CosmosCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('CosmosCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1f905d99-2ab7-462c-a6b0-f709acca6c8f"
          },
          {
            "policyDefinitionReferenceId": "DataBoxCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('DataBoxCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/86efb160-8de7-451d-bc08-5d475b0aadae"
          },
          {
            "policyDefinitionReferenceId": "StreamAnalyticsCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('StreamAnalyticsCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/87ba29ef-1ab3-4d82-b763-87fcd4f531f7"
          },
          {
            "policyDefinitionReferenceId": "SynapseWorkspaceCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SynapseWorkspaceCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/f7d52b2d-e161-4dfa-a82b-55e564167385"
          },
          {
            "policyDefinitionReferenceId": "StorageCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('StorageCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/6fac406b-40ca-413b-bf8e-0bf964659c25"
          },
          {
            "policyDefinitionReferenceId": "MySQLCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('MySQLCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/83cef61d-dbd1-4b20-a4fc-5fbc7da10833"
          },
          {
            "policyDefinitionReferenceId": "PostgreSQLCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('PostgreSQLCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/18adea5e-f416-4d0f-8aa8-d24321e3e274"
          },
          {
            "policyDefinitionReferenceId": "SqlServerTDECMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SqlServerTDECMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0a370ff3-6cab-4e85-8995-295fd854c5b8"
          },
          {
            "policyDefinitionReferenceId": "HealthcareAPIsCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('HealthcareAPIsCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/051cba44-2429-45b9-9649-46cec11c7119"
          },
          {
            "policyDefinitionReferenceId": "AzureBatchCMKEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AzureBatchCMKEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/99e9ccd8-3db9-4592-b0d1-14b1715a4d8a"
          },
          {
            "policyDefinitionReferenceId": "EncryptedVMDisksEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('EncryptedVMDisksEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0961003e-5a0a-4549-abde-af6a37f2724d"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-DefenderSQL-AMA": {
        "metadata": {
          "version": "1.0.1",
          "category": "Security Center",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Microsoft Defender for SQL collects events from the agents and uses them to provide security alerts and tailored hardening tasks (recommendations). Creates a resource group and a Data Collection Rule in the same region as the user-defined Log Analytics workspace.",
        "name": "Deploy-MDFC-DefenderSQL-AMA",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-DefenderSQL-AMA",
        "policyDefinitionGroups": null,
        "displayName": "Configure SQL VMs and Arc-enabled SQL Servers to install Microsoft Defender for SQL and AMA with a user-defined LA workspace",
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "workspaceRegion": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace region",
              "description": "Region of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "location"
            }
          },
          "dcrName": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Name",
              "description": "Name of the Data Collection Rule."
            }
          },
          "dcrResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Resource Group",
              "description": "Resource Group of the Data Collection Rule."
            }
          },
          "dcrId": {
            "type": "String",
            "metadata": {
              "displayName": "Data Collection Rule Id",
              "description": "Id of the Data Collection Rule."
            }
          },
          "userWorkspaceResourceId": {
            "type": "String",
            "metadata": {
              "displayName": "Workspace Resource Id",
              "description": "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule.",
              "strongType": "omsWorkspace"
            }
          },
          "enableCollectionOfSqlQueriesForSecurityResearch": {
            "type": "Boolean",
            "metadata": {
              "displayName": "Enable collection of SQL queries for security research",
              "description": "Enable or disable the collection of SQL queries for security research."
            },
            "allowedValues": [
              true,
              false
            ],
            "defaultValue": false
          },
          "identityResourceGroup": {
            "type": "String",
            "metadata": {
              "displayName": "Identity Resource Group",
              "description": "The name of the resource group created by the policy."
            },
            "defaultValue": ""
          },
          "userAssignedIdentityName": {
            "type": "String",
            "metadata": {
              "displayName": "User Assigned Managed Identity Name",
              "description": "The name of the user assigned managed identity."
            },
            "defaultValue": ""
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "defenderForSqlArcAma",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/3592ff98-9787-443a-af59-4505d0fe0786"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlArcMdsql",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/65503269-6a54-4553-8a28-0065a8e6d929"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlArcMdsqlDcr",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              },
              "userWorkspaceResourceId": {
                "value": "[parameters('userWorkspaceResourceId')]"
              },
              "workspaceRegion": {
                "value": "[parameters('workspaceRegion')]"
              },
              "enableCollectionOfSqlQueriesForSecurityResearch": {
                "value": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
              },
              "dcrName": {
                "value": "[parameters('dcrName')]"
              },
              "dcrResourceGroup": {
                "value": "[parameters('dcrResourceGroup')]"
              },
              "dcrId": {
                "value": "[parameters('dcrId')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-Sql-DefenderSQL-DCR"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlArcDcrAssociation",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              },
              "workspaceRegion": {
                "value": "[parameters('workspaceRegion')]"
              },
              "dcrName": {
                "value": "[parameters('dcrName')]"
              },
              "dcrResourceGroup": {
                "value": "[parameters('dcrResourceGroup')]"
              },
              "dcrId": {
                "value": "[parameters('dcrId')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-Arc-SQL-DCR-Association"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlAma",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              },
              "identityResourceGroup": {
                "value": "[parameters('identityResourceGroup')]"
              },
              "userAssignedIdentityName": {
                "value": "[parameters('userAssignedIdentityName')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-AMA"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlMdsql",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('effect')]"
              },
              "workspaceRegion": {
                "value": "[parameters('workspaceRegion')]"
              },
              "dcrResourceGroup": {
                "value": "[parameters('dcrResourceGroup')]"
              },
              "dcrName": {
                "value": "[parameters('dcrName')]"
              },
              "dcrId": {
                "value": "[parameters('dcrId')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL"
          },
          {
            "policyDefinitionReferenceId": "defenderForSqlMdsqlDcr",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "Disabled"
              },
              "userWorkspaceResourceId": {
                "value": "[parameters('userWorkspaceResourceId')]"
              },
              "workspaceRegion": {
                "value": "[parameters('workspaceRegion')]"
              },
              "enableCollectionOfSqlQueriesForSecurityResearch": {
                "value": "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
              },
              "dcrName": {
                "value": "[parameters('dcrName')]"
              },
              "dcrResourceGroup": {
                "value": "[parameters('dcrResourceGroup')]"
              },
              "dcrId": {
                "value": "[parameters('dcrId')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MDFC-SQL-DefenderSQL-DCR"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deny-PublicPaaSEndpoints": {
        "metadata": {
          "version": "3.2.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "This policy initiative is a group of policies that prevents creation of Azure PaaS services with exposed public endpoints",
        "name": "Deny-PublicPaaSEndpoints",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Deny-PublicPaaSEndpoints",
        "policyDefinitionGroups": null,
        "displayName": "Public network access should be disabled for PaaS services",
        "parameters": {
          "CosmosPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for CosmosDB",
              "description": "This policy denies that  Cosmos database accounts  are created with out public network access is disabled."
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "KeyVaultPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for KeyVault",
              "description": "This policy denies creation of Key Vaults with IP Firewall exposed to all public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "SqlServerPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access on Azure SQL Database should be disabled",
              "description": "This policy denies creation of Sql servers with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "StoragePublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access onStorage accounts should be disabled",
              "description": "This policy denies creation of storage accounts with IP Firewall exposed to all public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "AKSPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access on AKS API should be disabled",
              "description": "This policy denies  the creation of  Azure Kubernetes Service non-private clusters"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "ACRPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access on Azure Container Registry disabled",
              "description": "This policy denies the creation of Azure Container Registires with exposed public endpoints "
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "AFSPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access on Azure File Sync disabled",
              "description": "This policy denies the creation of Azure File Sync instances with exposed public endpoints "
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "PostgreSQLFlexPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for PostgreSql Flexible Server",
              "description": "This policy denies creation of Postgre SQL Flexible DB accounts with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "MySQLFlexPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for MySQL Flexible Server",
              "description": "This policy denies creation of MySql Flexible Server DB accounts with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "BatchPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for Azure Batch Instances",
              "description": "This policy denies creation of Azure Batch Instances with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "MariaDbPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for Azure MariaDB",
              "description": "This policy denies creation of Azure MariaDB with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "MlPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for Azure Machine Learning",
              "description": "This policy denies creation of Azure Machine Learning with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "RedisCachePublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for Azure Cache for Redis",
              "description": "This policy denies creation of Azure Cache for Redis with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "BotServicePublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for Bot Service",
              "description": "This policy denies creation of Bot Service with exposed public endpoints. Bots should be seet to 'isolated only' mode"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "AutomationPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for Automation accounts",
              "description": "This policy denies creation of Automation accounts with exposed public endpoints. Bots should be seet to 'isolated only' mode"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "AppConfigPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for App Configuration",
              "description": "This policy denies creation of App Configuration with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "FunctionPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for Function apps",
              "description": "This policy denies creation of Function apps with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "AsePublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for App Service Environment apps",
              "description": "This policy denies creation of App Service Environment apps with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "AsPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for App Service apps",
              "description": "This policy denies creation of App Service apps with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          },
          "ApiManPublicIpDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Public network access should be disabled for API Management services",
              "description": "This policy denies creation of API Management services with exposed public endpoints"
            },
            "allowedValues": [
              "AuditIfNotExists",
              "Disabled"
            ],
            "defaultValue": "AuditIfNotExists"
          },
          "ContainerAppsEnvironmentDenyEffect": {
            "type": "String",
            "metadata": {
              "displayName": "Container Apps environment should disable public network access",
              "description": "This policy denies creation of Container Apps Environment with exposed public endpoints"
            },
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ],
            "defaultValue": "Deny"
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "CosmosDenyPaasPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('CosmosPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/797b37f7-06b8-444c-b1ad-fc62867f335a"
          },
          {
            "policyDefinitionReferenceId": "KeyVaultDenyPaasPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('KeyVaultPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/405c5871-3e91-4644-8a63-58e19d68ff5b"
          },
          {
            "policyDefinitionReferenceId": "SqlServerDenyPaasPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SqlServerPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1b8ca024-1d5c-4dec-8995-b1a932b41780"
          },
          {
            "policyDefinitionReferenceId": "StorageDenyPaasPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('StoragePublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/b2982f36-99f2-4db5-8eff-283140c09693"
          },
          {
            "policyDefinitionReferenceId": "AKSDenyPaasPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AKSPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/040732e8-d947-40b8-95d6-854c95024bf8"
          },
          {
            "policyDefinitionReferenceId": "ACRDenyPaasPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('ACRPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0fdf0491-d080-4575-b627-ad0e843cba0f"
          },
          {
            "policyDefinitionReferenceId": "AFSDenyPaasPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AFSPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/21a8cd35-125e-4d13-b82d-2e19b7208bb7"
          },
          {
            "policyDefinitionReferenceId": "PostgreSQLFlexDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('PostgreSQLFlexPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/5e1de0e3-42cb-4ebc-a86d-61d0c619ca48"
          },
          {
            "policyDefinitionReferenceId": "MySQLFlexDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('MySQLFlexPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/c9299215-ae47-4f50-9c54-8a392f68a052"
          },
          {
            "policyDefinitionReferenceId": "BatchDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('BatchPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/74c5a0ae-5e48-4738-b093-65e23a060488"
          },
          {
            "policyDefinitionReferenceId": "MariaDbDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('MariaDbPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/fdccbe47-f3e3-4213-ad5d-ea459b2fa077"
          },
          {
            "policyDefinitionReferenceId": "MlDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('MlPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/438c38d2-3772-465a-a9cc-7a6666a275ce"
          },
          {
            "policyDefinitionReferenceId": "RedisCacheDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('RedisCachePublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/470baccb-7e51-4549-8b1a-3e5be069f663"
          },
          {
            "policyDefinitionReferenceId": "BotServiceDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('BotServicePublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/5e8168db-69e3-4beb-9822-57cb59202a9d"
          },
          {
            "policyDefinitionReferenceId": "AutomationDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AutomationPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/955a914f-bf86-4f0e-acd5-e0766b0efcb6"
          },
          {
            "policyDefinitionReferenceId": "AppConfigDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AppConfigPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/3d9f5e4c-9947-4579-9539-2a7695fbc187"
          },
          {
            "policyDefinitionReferenceId": "FunctionDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('FunctionPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/969ac98b-88a8-449f-883c-2e9adb123127"
          },
          {
            "policyDefinitionReferenceId": "AseDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AsePublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2d048aca-6479-4923-88f5-e2ac295d9af3"
          },
          {
            "policyDefinitionReferenceId": "AsDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AsPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1b5ef780-c53c-4a64-87f3-bb9c8c8094ba"
          },
          {
            "policyDefinitionReferenceId": "ApiManDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('ApiManPublicIpDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/df73bd95-24da-4a4f-96b9-4e8b94b402bd"
          },
          {
            "policyDefinitionReferenceId": "ContainerAppsEnvironmentDenyPublicIP",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('ContainerAppsEnvironmentDenyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a"
          }
        ]
      },
      "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit": {
        "metadata": {
          "version": "2.1.0",
          "category": "Encryption",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ],
          "pacOwnerId": "ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6",
          "deployedBy": "epac/ff2ce5e1-da8a-4cfb-883b-aee9fbfb85d6/epac-dev"
        },
        "description": "Choose either Deploy if not exist and append in combination with audit or Select Deny in the Policy effect. Deny polices shift left. Deploy if not exist and append enforce but can be changed, and because missing existence condition require then the combination of Audit. ",
        "name": "Enforce-EncryptTransit",
        "scopeId": "/providers/Microsoft.Management/managementGroups/epac-dev",
        "id": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policySetDefinitions/Enforce-EncryptTransit",
        "policyDefinitionGroups": null,
        "displayName": "Deny or Deploy and append TLS requirements and SSL enforcement on resources without Encryption in transit",
        "parameters": {
          "AppServiceHttpEffect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "App Service. Appends the AppService sites config WebApp, APIApp, Function App with TLS version selected below",
              "description": "Append the AppService sites object to ensure that min Tls version is set to required TLS version. Please note Append does not enforce compliance use then deny."
            }
          },
          "AppServiceTlsVersionEffect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "App Service. Appends the AppService WebApp, APIApp, Function App to enable https only",
              "description": "App Service. Appends the AppService sites object to ensure that  HTTPS only is enabled for  server/service authentication and protects data in transit from network layer eavesdropping attacks. Please note Append does not enforce compliance use then deny."
            }
          },
          "AppServiceminTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.0",
              "1.1"
            ],
            "metadata": {
              "displayName": "App Service. Select version minimum TLS Web App config",
              "description": "App Service. Select version  minimum TLS version for a  Web App config to enforce"
            }
          },
          "APIAppServiceHttpsEffect": {
            "metadata": {
              "displayName": "App Service API App. API App should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy.",
              "description": "Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ]
          },
          "FunctionLatestTlsEffect": {
            "metadata": {
              "displayName": "App Service Function App. Latest TLS version should be used in your Function App",
              "description": "Only Audit, deny not possible as it is a related resource. Upgrade to the latest TLS version."
            },
            "type": "String",
            "defaultValue": "AuditIfNotExists",
            "allowedValues": [
              "AuditIfNotExists",
              "Disabled"
            ]
          },
          "FunctionServiceHttpsEffect": {
            "metadata": {
              "displayName": "App Service Function App. Function App should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy.",
              "description": "App Service Function App. Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ]
          },
          "WebAppServiceLatestTlsEffect": {
            "metadata": {
              "displayName": "App Service Web App. Latest TLS version should be used in your Web App",
              "description": "Only Audit, deny not possible as it is a related resource. Upgrade to the latest TLS version."
            },
            "type": "String",
            "defaultValue": "AuditIfNotExists",
            "allowedValues": [
              "AuditIfNotExists",
              "Disabled"
            ]
          },
          "WebAppServiceHttpsEffect": {
            "metadata": {
              "displayName": "App Service Web App. Web Application should only be accessible over HTTPS. Choose Deny or Audit in combination with Append policy.",
              "description": "Choose Deny or Audit in combination with Append policy. Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ]
          },
          "AKSIngressHttpsOnlyEffect": {
            "metadata": {
              "displayName": "AKS Service. Enforce HTTPS ingress in Kubernetes cluster",
              "description": "This policy enforces HTTPS ingress in a Kubernetes cluster. This policy is generally available for Kubernetes Service (AKS), and preview for AKS Engine and Azure Arc enabled Kubernetes. For instructions on using this policy, visit https://aka.ms/kubepolicydoc."
            },
            "type": "String",
            "defaultValue": "deny",
            "allowedValues": [
              "audit",
              "deny",
              "disabled"
            ]
          },
          "MySQLEnableSSLDeployEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "MySQL database servers. Deploy if not exist set minimum TLS version Azure Database for MySQL server",
              "description": "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for MySQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
            }
          },
          "MySQLEnableSSLEffect": {
            "metadata": {
              "displayName": "MySQL database servers. Enforce SSL connection should be enabled for MySQL database servers",
              "description": "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ]
          },
          "MySQLminimalTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_0",
              "TLS1_1",
              "TLSEnforcementDisabled"
            ],
            "metadata": {
              "displayName": "MySQL database servers. Select version minimum TLS for MySQL server",
              "description": "Select version  minimum TLS version Azure Database for MySQL server to enforce"
            }
          },
          "PostgreSQLEnableSSLDeployEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "PostgreSQL database servers. Deploy if not exist set minimum TLS version Azure Database for PostgreSQL server",
              "description": "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for PostgreSQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
            }
          },
          "PostgreSQLEnableSSLEffect": {
            "metadata": {
              "displayName": "PostgreSQL database servers. Enforce SSL connection should be enabled for PostgreSQL database servers",
              "description": "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ]
          },
          "PostgreSQLminimalTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_0",
              "TLS1_1",
              "TLSEnforcementDisabled"
            ],
            "metadata": {
              "displayName": "PostgreSQL database servers. Select version minimum TLS for MySQL server",
              "description": "PostgreSQL database servers. Select version  minimum TLS version Azure Database for MySQL server to enforce"
            }
          },
          "RedisTLSDeployEffect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure Cache for Redis. Deploy a specific min TLS version requirement and enforce SSL Azure Cache for Redis",
              "description": "Deploy a specific min TLS version requirement and enforce SSL on Azure Cache for Redis. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
            }
          },
          "RedisMinTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.0",
              "1.1"
            ],
            "metadata": {
              "displayName": "Azure Cache for Redis.Select version minimum TLS for Azure Cache for Redis",
              "description": "Select version  minimum TLS version for a Azure Cache for Redis to enforce"
            }
          },
          "RedisTLSEffect": {
            "metadata": {
              "displayName": "Azure Cache for Redis. Only secure connections to your Azure Cache for Redis should be enabled",
              "description": "Azure Cache for Redis. Audit enabling of only connections via SSL to Azure Cache for Redis. Use of secure connections ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ]
          },
          "SQLManagedInstanceTLSDeployEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure Managed Instance. Deploy a specific min TLS version requirement and enforce SSL on SQL servers",
              "description": "Deploy a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
            }
          },
          "SQLManagedInstanceMinTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.0",
              "1.1"
            ],
            "metadata": {
              "displayName": "Azure Managed Instance.Select version minimum TLS for Azure Managed Instance",
              "description": "Select version  minimum TLS version for Azure Managed Instanceto to  enforce"
            }
          },
          "SQLManagedInstanceTLSEffect": {
            "metadata": {
              "displayName": "SQL Managed Instance should have the minimal TLS version of 1.2",
              "description": "Setting minimal TLS version to 1.2 improves security by ensuring your SQL Managed Instance can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ]
          },
          "SQLServerTLSDeployEffect": {
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Azure SQL Database. Deploy a specific min TLS version requirement and enforce SSL on SQL servers",
              "description": "Deploy a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
            }
          },
          "SQLServerminTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.0",
              "1.1"
            ],
            "metadata": {
              "displayName": "Azure SQL Database.Select version minimum TLS for Azure SQL Database",
              "description": "Select version  minimum TLS version for Azure SQL Database to enforce"
            }
          },
          "SQLServerTLSEffect": {
            "metadata": {
              "displayName": "Azure SQL Database should have the minimal TLS version of 1.2",
              "description": "Setting minimal TLS version to 1.2 improves security by ensuring your Azure SQL Database can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Disabled",
              "Deny"
            ]
          },
          "StorageDeployHttpsEnabledEffect": {
            "metadata": {
              "displayName": "Azure Storage Account. Deploy Secure transfer to storage accounts should be enabled",
              "description": "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
            },
            "type": "String",
            "defaultValue": "DeployIfNotExists",
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ]
          },
          "StorageminimumTlsVersion": {
            "type": "String",
            "defaultValue": "TLS1_2",
            "allowedValues": [
              "TLS1_2",
              "TLS1_1",
              "TLS1_0"
            ],
            "metadata": {
              "displayName": "Storage Account select minimum TLS version",
              "description": "Select version  minimum TLS version on Azure Storage Account to enforce"
            }
          },
          "StorageHttpsEnabledEffect": {
            "metadata": {
              "displayName": "Azure Storage Account. Secure transfer to storage accounts should be enabled",
              "description": "Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
            },
            "type": "String",
            "defaultValue": "Audit",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ]
          },
          "ContainerAppsHttpsOnlyEffect": {
            "metadata": {
              "displayName": "Container Apps should only be accessible over HTTPS",
              "description": "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling 'allowInsecure' will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps."
            },
            "type": "String",
            "defaultValue": "Deny",
            "allowedValues": [
              "Audit",
              "Deny",
              "Disabled"
            ]
          }
        },
        "policyDefinitions": [
          {
            "policyDefinitionReferenceId": "AppServiceHttpEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AppServiceHttpEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-httpsonly"
          },
          {
            "policyDefinitionReferenceId": "AppServiceminTlsVersion",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AppServiceTlsVersionEffect')]"
              },
              "minTlsVersion": {
                "value": "[parameters('AppServiceminTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-AppService-latestTLS"
          },
          {
            "policyDefinitionReferenceId": "FunctionLatestTlsEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('FunctionLatestTlsEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/f9d614c5-c173-4d56-95a7-b4437057d193"
          },
          {
            "policyDefinitionReferenceId": "WebAppServiceLatestTlsEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('WebAppServiceLatestTlsEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b"
          },
          {
            "policyDefinitionReferenceId": "APIAppServiceHttpsEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('APIAppServiceHttpsEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-http"
          },
          {
            "policyDefinitionReferenceId": "FunctionServiceHttpsEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('FunctionServiceHttpsEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceFunctionApp-http"
          },
          {
            "policyDefinitionReferenceId": "WebAppServiceHttpsEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('WebAppServiceHttpsEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceWebApp-http"
          },
          {
            "policyDefinitionReferenceId": "AKSIngressHttpsOnlyEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('AKSIngressHttpsOnlyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d"
          },
          {
            "policyDefinitionReferenceId": "MySQLEnableSSLDeployEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('MySQLEnableSSLDeployEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('MySQLminimalTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-MySQL-sslEnforcement"
          },
          {
            "policyDefinitionReferenceId": "MySQLEnableSSLEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('MySQLEnableSSLEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('MySQLminimalTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-MySql-http"
          },
          {
            "policyDefinitionReferenceId": "PostgreSQLEnableSSLDeployEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('PostgreSQLEnableSSLDeployEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('PostgreSQLminimalTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-PostgreSQL-sslEnforcement"
          },
          {
            "policyDefinitionReferenceId": "PostgreSQLEnableSSLEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('PostgreSQLEnableSSLEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('PostgreSQLminimalTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-http"
          },
          {
            "policyDefinitionReferenceId": "RedisTLSDeployEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('RedisTLSDeployEffect')]"
              },
              "minimumTlsVersion": {
                "value": "[parameters('RedisMinTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-sslEnforcement"
          },
          {
            "policyDefinitionReferenceId": "RedisdisableNonSslPort",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('RedisTLSDeployEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Append-Redis-disableNonSslPort"
          },
          {
            "policyDefinitionReferenceId": "RedisDenyhttps",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('RedisTLSEffect')]"
              },
              "minimumTlsVersion": {
                "value": "[parameters('RedisMinTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Redis-http"
          },
          {
            "policyDefinitionReferenceId": "SQLManagedInstanceTLSDeployEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SQLManagedInstanceTLSDeployEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('SQLManagedInstanceMinTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-SqlMi-minTLS"
          },
          {
            "policyDefinitionReferenceId": "SQLManagedInstanceTLSEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SQLManagedInstanceTLSEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('SQLManagedInstanceMinTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-minTLS"
          },
          {
            "policyDefinitionReferenceId": "SQLServerTLSDeployEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SQLServerTLSDeployEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('SQLServerminTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-SQL-minTLS"
          },
          {
            "policyDefinitionReferenceId": "SQLServerTLSEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('SQLServerTLSEffect')]"
              },
              "minimalTlsVersion": {
                "value": "[parameters('SQLServerminTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-minTLS"
          },
          {
            "policyDefinitionReferenceId": "StorageHttpsEnabledEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('StorageHttpsEnabledEffect')]"
              },
              "minimumTlsVersion": {
                "value": "[parameters('StorageMinimumTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-minTLS"
          },
          {
            "policyDefinitionReferenceId": "StorageDeployHttpsEnabledEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('StorageDeployHttpsEnabledEffect')]"
              },
              "minimumTlsVersion": {
                "value": "[parameters('StorageMinimumTlsVersion')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/epac-dev/providers/Microsoft.Authorization/policyDefinitions/Deploy-Storage-sslEnforcement"
          },
          {
            "policyDefinitionReferenceId": "ContainerAppsHttpsOnlyEffect",
            "groupNames": [],
            "parameters": {
              "effect": {
                "value": "[parameters('ContainerAppsHttpsOnlyEffect')]"
              }
            },
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb"
          }
        ]
      }
    }
  }
}
